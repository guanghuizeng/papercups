[{"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/index.tsx":"1","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/analytics.ts":"2","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/serviceWorker.ts":"3","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/App.tsx":"4","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/config.ts":"5","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/storage.ts":"6","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api.ts":"7","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Dashboard.tsx":"8","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/ScheduledEvent.tsx":"9","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/landing/LadingPage.tsx":"10","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/Book.tsx":"11","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingPage.tsx":"12","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/logger.tsx":"13","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common.tsx":"14","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/events/data.ts":"15","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinksBoard.tsx":"16","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLink.tsx":"17","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookProvider.tsx":"18","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookTypePage.tsx":"19","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Availability.tsx":"20","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/AppSettings.tsx":"21","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookContactsPage.tsx":"22","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookInviteePage.tsx":"23","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingProvider.tsx":"24","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookUserPage.tsx":"25","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/event-utils.tsx":"26","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/events/ScheduledEvents.tsx":"27","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventProvider.tsx":"28","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/AppDataProvider.tsx":"29","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/utils.ts":"30","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/DatePicker.tsx":"31","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/NavSidebar.tsx":"32","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api-hooks.tsx":"33","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/constants.ts":"34","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventsProvider.tsx":"35","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkSettings.tsx":"36","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Calendar.tsx":"37","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/events/EventLocationSelect.tsx":"38","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/TimeOption.tsx":"39","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/SchedulingLinkProvider.tsx":"40","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkCard.tsx":"41","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/utils.ts":"42","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/const.ts":"43","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/AuthProvider.tsx":"44","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Register.tsx":"45","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Login.tsx":"46","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordReset.tsx":"47","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/EmailVerification.tsx":"48","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/RequestPasswordReset.tsx":"49","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordResetRequested.tsx":"50"},{"size":619,"mtime":1619930461052,"results":"51","hashOfConfig":"52"},{"size":1226,"mtime":1607220770491,"results":"53","hashOfConfig":"52"},{"size":5296,"mtime":1607220770508,"results":"54","hashOfConfig":"52"},{"size":2940,"mtime":1619930461066,"results":"55","hashOfConfig":"52"},{"size":898,"mtime":1608873579256,"results":"56","hashOfConfig":"52"},{"size":1088,"mtime":1607220770508,"results":"57","hashOfConfig":"52"},{"size":25085,"mtime":1618642704913,"results":"58","hashOfConfig":"52"},{"size":1838,"mtime":1618638833664,"results":"59","hashOfConfig":"52"},{"size":6972,"mtime":1612683381999,"results":"60","hashOfConfig":"52"},{"size":21820,"mtime":1619930384508,"results":"61","hashOfConfig":"52"},{"size":1567,"mtime":1610327497495,"results":"62","hashOfConfig":"52"},{"size":13510,"mtime":1618643507191,"results":"63","hashOfConfig":"52"},{"size":3667,"mtime":1607220770507,"results":"64","hashOfConfig":"52"},{"size":2262,"mtime":1619930384502,"results":"65","hashOfConfig":"52"},{"size":4018,"mtime":1609995663108,"results":"66","hashOfConfig":"52"},{"size":2082,"mtime":1618638652902,"results":"67","hashOfConfig":"52"},{"size":14843,"mtime":1618632103300,"results":"68","hashOfConfig":"52"},{"size":5120,"mtime":1611320063757,"results":"69","hashOfConfig":"52"},{"size":9477,"mtime":1610367622515,"results":"70","hashOfConfig":"52"},{"size":10130,"mtime":1612579037811,"results":"71","hashOfConfig":"52"},{"size":9975,"mtime":1616144136460,"results":"72","hashOfConfig":"52"},{"size":6456,"mtime":1610367622427,"results":"73","hashOfConfig":"52"},{"size":252,"mtime":1610101952444,"results":"74","hashOfConfig":"52"},{"size":4566,"mtime":1619930461061,"results":"75","hashOfConfig":"52"},{"size":1435,"mtime":1610243076578,"results":"76","hashOfConfig":"52"},{"size":1720,"mtime":1612157529828,"results":"77","hashOfConfig":"52"},{"size":6193,"mtime":1616144182270,"results":"78","hashOfConfig":"52"},{"size":918,"mtime":1612683359398,"results":"79","hashOfConfig":"52"},{"size":5208,"mtime":1618800532868,"results":"80","hashOfConfig":"52"},{"size":4237,"mtime":1612269403083,"results":"81","hashOfConfig":"52"},{"size":389,"mtime":1619930384496,"results":"82","hashOfConfig":"52"},{"size":1980,"mtime":1619930461058,"results":"83","hashOfConfig":"52"},{"size":3461,"mtime":1618646348207,"results":"84","hashOfConfig":"52"},{"size":1055,"mtime":1611641475088,"results":"85","hashOfConfig":"52"},{"size":647,"mtime":1612691633336,"results":"86","hashOfConfig":"52"},{"size":10782,"mtime":1612574312404,"results":"87","hashOfConfig":"52"},{"size":14222,"mtime":1612432013047,"results":"88","hashOfConfig":"52"},{"size":771,"mtime":1612180702546,"results":"89","hashOfConfig":"52"},{"size":1220,"mtime":1610462393535,"results":"90","hashOfConfig":"52"},{"size":6835,"mtime":1618639108096,"results":"91","hashOfConfig":"52"},{"size":1071,"mtime":1612573105224,"results":"92","hashOfConfig":"52"},{"size":293,"mtime":1611664159522,"results":"93","hashOfConfig":"52"},{"size":122,"mtime":1618642705075,"results":"94","hashOfConfig":"52"},{"size":3603,"mtime":1619930384499,"results":"95","hashOfConfig":"52"},{"size":11705,"mtime":1619930461046,"results":"96","hashOfConfig":"52"},{"size":7392,"mtime":1619930461018,"results":"97","hashOfConfig":"52"},{"size":4780,"mtime":1619930461034,"results":"98","hashOfConfig":"52"},{"size":1276,"mtime":1619930461037,"results":"99","hashOfConfig":"52"},{"size":2770,"mtime":1619930461029,"results":"100","hashOfConfig":"52"},{"size":927,"mtime":1619930461049,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wwb8a3",{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"107"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"107"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"107"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"107"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"145","usedDeprecatedRules":"107"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"107"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"107"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"107"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"107"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"107"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"107"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"107"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"107"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"107"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"107"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/index.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/analytics.ts",["222"],"import * as Sentry from '@sentry/react';\nimport LogRocket from 'logrocket';\nimport posthog from 'posthog-js';\nimport {isDev} from './config';\n\nconst {\n  REACT_APP_SENTRY_DSN,\n  REACT_APP_LOGROCKET_ID,\n  REACT_APP_POSTHOG_TOKEN = 'cQo4wipp5ipWWXhTN8kTacBItgqo457yDRtzCMOr-Tw',\n  REACT_APP_POSTHOG_API_HOST = 'https://app.posthog.com',\n} = process.env;\n\nexport const isSentryEnabled = REACT_APP_SENTRY_DSN && !isDev;\nexport const isLogRocketEnabled = REACT_APP_LOGROCKET_ID && !isDev;\nexport const isPostHogEnabled = REACT_APP_POSTHOG_TOKEN && !isDev;\n\nexport const init = () => {\n  if (isSentryEnabled) {\n    Sentry.init({dsn: REACT_APP_SENTRY_DSN});\n  }\n\n  if (isLogRocketEnabled && REACT_APP_LOGROCKET_ID) {\n    LogRocket.init(REACT_APP_LOGROCKET_ID);\n  }\n\n  if (isPostHogEnabled) {\n    posthog.init(REACT_APP_POSTHOG_TOKEN, {\n      api_host: REACT_APP_POSTHOG_API_HOST,\n    });\n  }\n};\n\nexport const identify = (id: any, email: string) => {\n  if (isSentryEnabled) {\n    Sentry.setUser({id, email});\n  }\n\n  if (isLogRocketEnabled) {\n    LogRocket.identify(id, {email});\n  }\n\n  if (isPostHogEnabled) {\n    posthog.identify(id);\n    posthog.people && posthog.people.set({email});\n  }\n};\n\nexport default {\n  init,\n  identify,\n};\n",["223","224"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/serviceWorker.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/App.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/config.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/storage.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api.ts",["225","226"],"import request from 'superagent';\nimport qs from 'query-string';\nimport {getAuthTokens} from './storage';\nimport {Conversation, User} from './types';\nimport * as queryString from 'query-string';\nimport {nanoid} from 'nanoid';\n\n// TODO: handle this on the server instead\nfunction now() {\n  const date = new Date();\n\n  return new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds()\n  );\n}\n\nexport type LoginParams = {\n  email: string;\n  password: string;\n};\n\nexport type RegisterParams = LoginParams & {\n  companyName?: string;\n  inviteToken?: string;\n  passwordConfirmation: string;\n};\n\nexport type ResetPasswordParams = {\n  password: string;\n  passwordConfirmation: string;\n};\n\nexport type WidgetSettingsParams = {\n  id?: string;\n  title: string;\n  subtitle: string;\n  color: string;\n  greeting?: string;\n  new_message_placeholder?: string;\n};\n\nexport type EventSubscriptionParams = {\n  webhook_url: string;\n};\n\nexport const getAccessToken = (): string | null => {\n  const tokens = getAuthTokens();\n\n  return (tokens && tokens.token) || null;\n};\n\nexport const getRefreshToken = (): string | null => {\n  const tokens = getAuthTokens();\n\n  return (tokens && tokens.renew_token) || null;\n};\n\nexport const me = async (token = getAccessToken()): Promise<User> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const login = async ({email, password}: LoginParams) => {\n  return request\n    .post(`/api/session`)\n    .send({user: {email, password}})\n    .then((res) => res.body.data);\n};\n\nexport const logout = async () => {\n  return request.delete(`/api/session`).then((res) => res.body);\n};\n\nexport const register = async ({\n  companyName,\n  inviteToken,\n  email,\n  password,\n  passwordConfirmation,\n}: RegisterParams) => {\n  return request\n    .post(`/api/registration`)\n    .send({\n      user: {\n        company_name: companyName,\n        invite_token: inviteToken,\n        email,\n        password,\n        password_confirmation: passwordConfirmation,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const renew = async (token = getRefreshToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/session/renew`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const verifyUserEmail = async (verificationToken: string) => {\n  return request\n    .post(`/api/verify_email`)\n    .send({token: verificationToken})\n    .then((res) => res.body.data);\n};\n\nexport const sendPasswordResetEmail = async (email: string) => {\n  return request\n    .post(`/api/reset_password`)\n    .send({email})\n    .then((res) => res.body.data);\n};\n\nexport const attemptPasswordReset = async (\n  passwordResetToken: string,\n  {password, passwordConfirmation}: ResetPasswordParams\n) => {\n  return request\n    .put(`/api/reset_password`)\n    .send({\n      password,\n      password_confirmation: passwordConfirmation,\n      token: passwordResetToken,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createNewCustomer = async (accountId: string) => {\n  return request\n    .post(`/api/customers`)\n    .send({\n      customer: {\n        account_id: accountId,\n        first_seen: now(),\n        last_seen: now(),\n      },\n    }) // TODO: send over some metadata?\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomers = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/customers`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomer = async (id: string, token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/customers/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateCustomer = async (\n  id: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/customers/${id}`)\n    .set('Authorization', token)\n    .send({\n      customer: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createNewConversation = async (\n  customerId: string,\n  params?: object,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations`)\n    .set('Authorization', token)\n    .send({\n      conversation: {\n        customer_id: customerId,\n        ...params,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchAccountInfo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/accounts/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateAccountInfo = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/accounts/me`)\n    .set('Authorization', token)\n    .send({\n      account: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserProfile = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/profile`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserProfile = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/profile`)\n    .set('Authorization', token)\n    .send({\n      user_profile: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserSettings = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get('/api/user_settings')\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserSettings = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put('/api/user_settings')\n    .set('Authorization', token)\n    .send({\n      user_settings: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchAllConversations = async (\n  token = getAccessToken()\n): Promise<Array<Conversation>> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchMyConversations = async (\n  userId: number,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({assignee_id: userId, status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchPriorityConversations = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({priority: 'priority', status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchClosedConversations = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({status: 'closed'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchConversation = async (\n  id: string,\n  token = getAccessToken()\n): Promise<Conversation> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const generateShareConversationToken = async (\n  conversationId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations/${conversationId}/share`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSharedConversation = async (\n  id: string,\n  token: string\n): Promise<Conversation> => {\n  if (!token) {\n    throw new Error('Access denied!');\n  }\n\n  return request\n    .get(`/api/conversations/shared`)\n    .query({token, conversation_id: id})\n    .then((res) => res.body.data);\n};\n\nexport const updateConversation = async (\n  conversationId: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .send(updates)\n    .then((res) => res.body.data);\n};\n\nexport const deleteConversation = async (\n  conversationId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createNewMessage = async (\n  conversationId: string,\n  message: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/messages`)\n    .set('Authorization', token)\n    .send({\n      message: {\n        conversation_id: conversationId,\n        sent_at: new Date().toISOString(),\n        ...message,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const countMessages = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/messages/count`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomerConversations = async (\n  customerId: string,\n  accountId: string\n) => {\n  return request\n    .get(`/api/conversations/customer`)\n    .query({customer_id: customerId, account_id: accountId})\n    .then((res) => res.body.data);\n};\n\nexport const generateUserInvitation = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/user_invitations`)\n    .send({user_invitation: {}})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSlackAuthorization = async (\n  type = 'reply',\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/slack/authorization`)\n    .query({type})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchGmailAuthorization = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/gmail/authorization`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport type EmailParams = {\n  recipient: string;\n  subject: string;\n  message: string;\n};\n\nexport const sendGmailNotification = async (\n  {recipient, subject, message}: EmailParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/gmail/send`)\n    .send({recipient, subject, message})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchEventSubscriptions = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/event_subscriptions`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const verifyWebhookUrl = async (\n  url: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/event_subscriptions/verify`)\n    .set('Authorization', token)\n    .send({url})\n    .then((res) => res.body.data);\n};\n\nexport const createEventSubscription = async (\n  params: EventSubscriptionParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/event_subscriptions`)\n    .set('Authorization', token)\n    .send({\n      event_subscription: params,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const updateEventSubscription = async (\n  id: string,\n  updates: EventSubscriptionParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/event_subscriptions/${id}`)\n    .set('Authorization', token)\n    .send({\n      event_subscription: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const deleteEventSubscription = async (\n  id: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/event_subscriptions/${id}`)\n    .set('Authorization', token);\n};\n\nexport const authorizeSlackIntegration = async (\n  code: string,\n  type: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/slack/oauth`)\n    .query({code, type})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const authorizeGmailIntegration = async (\n  code: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/gmail/oauth`)\n    .query({code})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateWidgetSettings = async (\n  widgetSettingsParams: WidgetSettingsParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/widget_settings`)\n    .send({widget_settings: widgetSettingsParams})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchDefaultPaymentMethod = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/payment_methods`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchBillingInfo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/billing`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createSubscriptionPlan = async (\n  plan: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/billing`)\n    .send({plan})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateSubscriptionPlan = async (\n  plan: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/billing`)\n    .send({plan})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createPaymentMethod = async (\n  paymentMethod: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/payment_methods`)\n    .send({payment_method: paymentMethod})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const disableAccountUser = async (\n  userId: number | string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/users/${userId}/disable`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const enableAccountUser = async (\n  userId: number | string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/users/${userId}/enable`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomerNotes = async (\n  customerId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/notes`)\n    .query({customer_id: customerId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createCustomerNote = async (\n  customerId: string,\n  body: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/notes`)\n    .set('Authorization', token)\n    .send({\n      note: {\n        body,\n        customer_id: customerId,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const deleteCustomerNote = async (\n  noteId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request.delete(`/api/notes/${noteId}`).set('Authorization', token);\n};\n\nexport const fetchAllTags = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/tags`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createTag = async (name: string, token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/tags`)\n    .send({tag: {name}})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const addConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations/${conversationId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/conversations/${conversationId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const addCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/customers/${customerId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/customers/${customerId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\ntype BrowserSessionFilters = {\n  sessionIds?: Array<string>;\n  customerId?: string;\n  isActive?: boolean;\n  limit?: number;\n};\n\nexport const fetchBrowserSessions = async (\n  {customerId, isActive, limit = 100, sessionIds = []}: BrowserSessionFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions`)\n    .query(\n      qs.stringify(\n        {\n          ids: sessionIds,\n          customer_id: customerId,\n          active: isActive,\n          limit,\n        },\n        {arrayFormat: 'bracket'}\n      )\n    )\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const countBrowserSessions = async (\n  {customerId, isActive}: BrowserSessionFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions/count`)\n    .query(\n      qs.stringify(\n        {\n          customer_id: customerId,\n          active: isActive,\n        },\n        {arrayFormat: 'bracket'}\n      )\n    )\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchBrowserSession = async (\n  id: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\ntype ReportingFilters = {\n  from_date?: string | null;\n  to_date?: string | null;\n};\n\nexport const fetchReportingData = async (\n  filters = {} as ReportingFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/reporting`)\n    .query(filters)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createSchedulingLink = async (\n  scheduling_link: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/scheduling_links`)\n    .send({scheduling_link})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateSchedulingLink = async (\n  eventTypeId: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/scheduling_links/${eventTypeId}`)\n    .set('Authorization', token)\n    .send({\n      scheduling_link: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createDemo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/demos`)\n    .send({\n      demo: {\n        name: 'type1',\n        count: 1,\n      },\n    })\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinks = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/scheduling_links/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinksBrief = async (user: string) => {\n  return request\n    .get(`/api/scheduling_links_brief/`)\n    .then((res) => res.body.data);\n};\n\nexport const createSchedule = async (\n  schedule: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/schedules/`)\n    .set('Authorization', token)\n    .send({\n      schedule,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedules = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/schedules/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchScheduleById = async (user: string, schedule_id: string) => {\n  return request\n    .get(`/api/schedules`)\n    .query({schedule_id})\n    .then((res) => res.body.data);\n};\n\nexport const updateSchedule = async (\n  id: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/schedules/${id}`)\n    .set('Authorization', token)\n    .send({\n      schedule: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserProfileBySlug = async (slug: string) => {\n  return request\n    .get(`/api/profile`)\n    .query({slug})\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinkByUrl = async (user: string, url: string) => {\n  return request\n    .get(`/api/event_type`)\n    .query({url})\n    .then((res) => res.body.data);\n};\n\nexport interface CreateEventParams {\n  user: string;\n  link: string;\n  event: {\n    displayName: string;\n    email: string;\n    startAt: string;\n    endAt: string;\n    fields: any;\n  };\n}\n\nexport const createEvent = async (params: CreateEventParams) => {\n  return request\n    .post(`/api/scheduled_events`)\n    .send(params)\n    .then((res) => res.body.data);\n};\n\nexport const createScheduledEvent = async (\n  scheduling_link_id: string,\n  start_time: string,\n  guest_name: string\n) => {\n  return request\n    .post(`/api/scheduled_events`)\n    .send({\n      event: {\n        scheduling_link_id,\n        start_time,\n        guest_name,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchDatetimeSpotsByRange = async (\n  event_type_id: string,\n  start_time: string,\n  end_time: string\n) => {\n  return request\n    .get(`/api/booking/scheduling_links/${event_type_id}/calendar/range`)\n    .query({\n      start_time,\n      end_time,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchScheduledEvents = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/scheduled_events/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchIntervals = async (\n  userSlug: string,\n  linkSlug: string,\n  from: string,\n  to: string\n) => {\n  const url = queryString.stringifyUrl({\n    url: `/api/links/${userSlug}/${linkSlug}/intervals`,\n    query: {\n      from,\n      to,\n    },\n  });\n  return request\n    .get(`/api/links/${userSlug}/${linkSlug}/intervals`)\n    .query({\n      from,\n      to,\n    })\n    .then((res) => res.body.data);\n};\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Dashboard.tsx",["227","228","229","230","231"],"import React, {useEffect} from 'react';\nimport Header from './Header';\nimport {\n  useLocation,\n  Switch,\n  Redirect,\n  Route,\n  Link,\n  RouteComponentProps,\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport ScheduledEvents from './events/ScheduledEvents';\nimport SchedulingLink from './SchedulingLink';\nimport AppDataProvider from '../hooks/AppDataProvider';\nimport {SchedulingLinksBoard} from './SchedulingLinksBoard';\nimport {AppSettings} from './AppSettings';\nimport {Availability} from './Availability';\nimport BookingPage from './booking/BookingPage';\n\nfunction Dashboard(props: RouteComponentProps) {\n  return (\n    <div\n      className=\"flex flex-col md:flex-row h-full w-screen\"\n      style={{\n        minHeight: '100vh',\n      }}\n    >\n      <div className=\"flex flex-row w-full\">\n        <Switch>\n          <Route exact path=\"/\" component={() => <Redirect to={'/links'} />} />\n          <Route exact path=\"/links\" component={SchedulingLinksBoard} />\n          <Route\n            path=\"/links/:id\"\n            component={() => (\n              <div className=\"w-full border-l border-gray-200 border-solid\">\n                <SchedulingLink />\n              </div>\n            )}\n          />\n          <Route path=\"/events\" component={ScheduledEvents} />\n          <Route path=\"/settings\" component={AppSettings} />\n          <Route path=\"/availabilities/:id/edit\" component={Availability} />\n          {/*<Route path=\"/apps\" component={() => <div>apps</div>} />*/}\n          <Route\n            path=\"/:userSlug/:schedulingLinkSlug\"\n            component={BookingPage}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nconst DashboardWrapper = (props: RouteComponentProps) => {\n  return (\n    <AppDataProvider>\n      <Dashboard {...props} />\n    </AppDataProvider>\n  );\n};\n\nexport default DashboardWrapper;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/ScheduledEvent.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/landing/LadingPage.tsx",["232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/Book.tsx",["253","254","255"],"import React, {useEffect, useState} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport BookProvider, {useBook} from './BookProvider';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport BookUserPage from './BookUserPage';\nimport BookTypePageWrapper from './BookTypePage';\nimport BookContactsPage from './BookContactsPage';\nimport BookInviteePage from './BookInviteePage';\n\nmoment.locale('zh-cn');\n\nconst Book = () => {\n  return (\n    <div className=\"w-screen h-screen bg-gray-100\">\n      <div\n        className=\"w-full flex flex-row justify-center\"\n        style={{\n          paddingTop: '66px',\n          paddingBottom: '30px',\n        }}\n      >\n        <div\n          className=\"bg-white border-primary border-2 border-solid rounded shadow\"\n          style={{\n            // width: '1024px',\n            minHeight: '700px',\n          }}\n        >\n          <Switch>\n            <Route exact path=\"/@:user\" component={BookUserPage} />\n            <Route exact path=\"/@:user/:type\" component={BookTypePageWrapper} />\n            <Route\n              exact\n              path=\"/@:user/:type/invitees/:invitee\"\n              component={BookInviteePage}\n            />\n            <Route\n              exact\n              path=\"/@:user/:type/:datetime\"\n              component={BookContactsPage}\n            />\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const BookWrapper = (props: any) => {\n  return (\n    <BookProvider>\n      <Book {...props} />\n    </BookProvider>\n  );\n};\n\nexport default BookWrapper;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingPage.tsx",["256","257","258","259","260","261","262","263","264","265","266","267","268"],"import React, {useState, Fragment, RefObject} from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\nimport BookingProvider, {useBooking} from './BookingProvider';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport FullCalendar, {\n  DateSelectArg,\n  DayHeaderContentArg,\n  EventApi,\n} from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin, {DateClickArg} from '@fullcalendar/interaction';\nimport {\n  complementIntervals,\n  createEventId,\n  eliminateIntervals,\n  INITIAL_EVENTS,\n} from '../event-utils';\nimport zhLocale from '@fullcalendar/core/locales/zh-cn';\nimport dayjs, {Dayjs} from 'dayjs';\nimport {Button, Input, Text} from '@geist-ui/react';\nimport humanizeDuration from 'humanize-duration';\nimport {colourOptions} from '../events/data';\nimport {convertMinToHrsMin, dayConvertToEn} from '../../utils';\nimport {nanoid} from 'nanoid';\nimport _ from 'lodash';\nimport * as API from '../../api';\nimport {EventInput} from '@fullcalendar/common';\nimport {EMAIL, USERNAME} from '../../const';\n\nvar localizedFormat = require('dayjs/plugin/localizedFormat');\ndayjs.extend(localizedFormat);\ndayjs().format('L LT');\n\nfunction GeneralSection() {\n  const {user, schedulingLink, eventDuration, setEventDuration} = useBooking();\n\n  return (\n    <div date-section=\"control\" className=\"flex flex-col\">\n      <div className=\"px-4 pt-8\">\n        <h2 className=\"text-2xl\">{schedulingLink?.name}</h2>\n        <p className=\"pt-4\">{schedulingLink?.description}</p>\n      </div>\n\n      <div\n        className=\"px-2 pt-8 pr-4 py-2 grid gap-x-1 gap-y-6\"\n        style={{gridTemplateColumns: '30px auto'}}\n      >\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <i className=\"fas fa-user-alt \" />\n          </span>\n          <span>{schedulingLink?.organizer.displayName}</span>\n        </Fragment>\n\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <i className=\"fas fa-clock\" />\n          </span>\n          <div className=\"flex flex-row flex-wrap\">\n            {schedulingLink?.durations.map((d: number) => {\n              const durationDisplay = humanizeDuration(d * 60 * 1000, {\n                units: ['h', 'm'],\n                language: 'zh_CN',\n              });\n\n              return (\n                <div key={d} className=\"mt-1 mr-1\">\n                  <Button\n                    onClick={() => {\n                      setEventDuration(d);\n                    }}\n                    type={d === eventDuration ? 'success' : 'default'}\n                    size=\"mini\"\n                  >\n                    {durationDisplay}\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        </Fragment>\n\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <i className=\"fas fa-video\" />\n          </span>\n          <span>\n            {schedulingLink?.location &&\n              colourOptions.find((opt) => opt.value === schedulingLink.location)\n                ?.label}\n          </span>\n        </Fragment>\n      </div>\n\n      <div className=\"px-4 pt-8\">当前登录用户：{user?.display_name}</div>\n    </div>\n  );\n}\n\nfunction EventSection() {\n  const {\n    user,\n    timeSelected,\n    eventStartTime,\n    schedulingLink,\n    setEventTime,\n    eventDuration,\n    setEventId,\n    cancelEventDrafted,\n  } = useBooking();\n  const history = useHistory();\n\n  const durationDisplay = humanizeDuration(eventDuration * 60 * 1000, {\n    units: ['h', 'm'],\n    language: 'zh_CN',\n  });\n\n  const onSubmit = () => {\n    if (eventStartTime) {\n      console.log('scheduling link', schedulingLink);\n      API.createEvent({\n        user: USERNAME,\n        link: schedulingLink.url,\n        event: {\n          displayName: 'guest',\n          email: EMAIL,\n          startAt: eventStartTime.toISOString(),\n          endAt: dayjs(eventStartTime)\n            .add(eventDuration, 'minutes')\n            .toISOString(),\n          fields: {},\n        },\n      }).then((data) => {\n        history.push(`/event/${data.id}`);\n      });\n    }\n  };\n\n  const onCancel = () => {\n    cancelEventDrafted();\n  };\n\n  return (\n    <div className=\"pt-2\">\n      <div className=\"px-4 pt-8\">\n        <h2 className=\"text-2xl\">{schedulingLink?.name}</h2>\n        <p className=\"pt-4\">{schedulingLink?.description}</p>\n      </div>\n\n      <div\n        className=\"px-2 pt-8 pr-4 py-2 grid gap-x-1 gap-y-6\"\n        style={{gridTemplateColumns: '30px auto'}}\n      >\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <i className=\"fas fa-user-alt \" />\n          </span>\n          <span>{schedulingLink?.organizer.displayName}</span>\n        </Fragment>\n\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <i className=\"fas fa-clock\" />\n          </span>\n          <span>{durationDisplay}</span>\n        </Fragment>\n\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <i className=\"fas fa-calendar-check\" />\n          </span>\n          {eventStartTime && (\n            <div\n              className=\"grid grid-cols-2 gap-2\"\n              style={{gridTemplateColumns: '80px auto'}}\n            >\n              <span>{dayjs(eventStartTime).format('M[月]DD[日]')}</span>\n              <span>{dayjs(eventStartTime).format('a h点 mm[分]')}</span>\n              <span className=\"text-right\">至</span>\n              <span>\n                {dayjs(eventStartTime)\n                  .add(eventDuration, 'minutes')\n                  .format('a h点 mm[分]')}\n              </span>\n            </div>\n          )}\n        </Fragment>\n      </div>\n\n      <div className=\"px-4 pt-8\">\n        <div className=\"pt-4\">\n          <Input placeholder=\"\" type=\"text\" id={'name'} clearable>\n            联系人\n          </Input>\n        </div>\n        <div className=\"pt-4\">\n          <Input placeholder=\"\" type=\"email\" id={'email'} clearable>\n            Email\n          </Input>\n        </div>\n        {schedulingLink?.fields && (\n          <>\n            {schedulingLink.fields.map((field: any) => {\n              return (\n                <div key={field.id} className=\"pt-4\">\n                  <Input placeholder=\"\" type=\"text\" id={field.id} clearable>\n                    {field.label}\n                  </Input>\n                </div>\n              );\n            })}\n          </>\n        )}\n      </div>\n\n      <div className=\"px-4 flex flex-row pt-8\">\n        <Button className=\"mr-8\" type=\"success\" size=\"mini\" onClick={onSubmit}>\n          确定\n        </Button>\n        <Button size=\"mini\" onClick={onCancel}>\n          取消\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction CalendarMonthView() {\n  const [selectedDay, handleDayClick] = useState<Date>(new Date());\n\n  return (\n    <div className=\"absolute bottom-0 border-t border-primary border-solid\">\n      <DayPicker\n        selectedDays={selectedDay}\n        onDayClick={handleDayClick}\n        todayButton=\"今天\"\n        modifiers={{\n          foo: new Date(),\n        }}\n        onTodayButtonClick={(day, modifiers) => console.log(day, modifiers)}\n      />\n    </div>\n  );\n}\n\nfunction ControlSection() {\n  const {eventDrafted} = useBooking();\n  return (\n    <div className=\"flex flex-col w-96\">\n      {eventDrafted ? <EventSection /> : <GeneralSection />}\n      <CalendarMonthView />\n    </div>\n  );\n}\n\nfunction CalendarSection() {\n  const {\n    eventDuration,\n    eventStartTime,\n    setEventStartTime,\n    draftEvent,\n    calendarRef,\n    eventDrafted,\n    getIntervals,\n  } = useBooking();\n\n  const renderDayHeaderContent = (props: DayHeaderContentArg) => {\n    const date = dayjs(props.date);\n    return (\n      <div className=\"h-full\">\n        {\n          // @ts-ignore\n          date.isToday() ? (\n            <>\n              <div className=\"text-xs font-medium text-gray-600\">\n                {date.format('ddd')}\n              </div>\n              <div className=\"mb-2 flex justify-center\">\n                <div className=\"flex items-center justify-center w-10 h-10 rounded-full text-2xl bg-indigo-600 text-white font-bold\">\n                  {date.format('D')}\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"text-xs font-medium text-gray-600\">\n                {date.format('ddd')}\n              </div>\n              <div className=\"mb-2 flex justify-center\">\n                <div className=\"flex items-center justify-center w-10 h-10 rounded-full text-2xl text-gray-700 font-medium\">\n                  {date.format('D')}\n                </div>\n              </div>\n            </>\n          )\n        }\n      </div>\n    );\n  };\n\n  const handleDateClick = (info: DateClickArg) => {\n    let calendarApi = info.view.calendar;\n    // calendarApi.\n    // calendarApi.removeAllEvents();\n    setEventStartTime(info.date);\n    //\n    // const id = nanoid();\n    // setEventId(id);\n    //\n    draftEvent();\n\n    // calendarApi.addEvent({\n    //   id,\n    //   start: info.dateStr,\n    //   end: dayjs(info.date).add(eventDuration, 'minutes').toISOString(),\n    // });\n  };\n\n  const handleEvents = (events: EventApi[]) => {\n    console.log('handleEvents', events);\n  };\n\n  /**\n   * organizer.availability\n   * 1. presets\n   * 2. overrides\n   */\n  const getBlockEvents = (\n    arg: {\n      start: Date;\n      end: Date;\n      startStr: string;\n      endStr: string;\n      timeZone: string;\n    },\n    successCallback: (events: EventInput[]) => void,\n    failureCallback: (error: any) => any\n  ) => {\n    console.log('get intervals', getIntervals(arg.start, arg.end));\n\n    const intervals = getIntervals(arg.start, arg.end);\n\n    const now = dayjs();\n    const intervalsFormat: Dayjs[][] = intervals\n      ? intervals\n          .filter((interval) => dayjs(interval.endAt).isAfter(now))\n          .map((interval) => [dayjs(interval.startAt), dayjs(interval.endAt)])\n          .filter((interval) => interval.length > 0)\n      : [];\n\n    const startDate = dayjs(arg.start);\n    const endDate = dayjs(arg.end);\n\n    const complementedIntervals = complementIntervals(\n      startDate,\n      endDate,\n      intervalsFormat\n    );\n\n    successCallback(\n      complementedIntervals.map((interval) => {\n        return {\n          id: createEventId(),\n          start: interval[0].toISOString(),\n          end: interval[1].toISOString(),\n          className: 'sc-unavailable',\n          overlap: false,\n          editable: false,\n          display: 'background',\n        };\n      })\n    );\n  };\n\n  const getEvent = (\n    arg: {\n      start: Date;\n      end: Date;\n      startStr: string;\n      endStr: string;\n      timeZone: string;\n    },\n    successCallback: (events: EventInput[]) => void,\n    failureCallback: (error: any) => any\n  ) => {\n    successCallback(\n      eventDrafted && eventStartTime\n        ? [\n            {\n              id: nanoid(),\n              start: eventStartTime,\n              end: dayjs(eventStartTime)\n                .add(eventDuration, 'minutes')\n                .toISOString(),\n            },\n          ]\n        : []\n    );\n  };\n\n  return (\n    <div className=\"pt-8 w-full h-full\">\n      <div className=\"w-full h-full\">\n        <FullCalendar\n          ref={calendarRef}\n          height=\"100%\"\n          contentHeight=\"900px\"\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          headerToolbar={{\n            left: 'title',\n            center: '',\n            right: 'today prev,next',\n          }}\n          weekNumberCalculation=\"ISO\"\n          initialView=\"timeGridWeek\"\n          slotDuration=\"00:30:00\"\n          snapDuration=\"00:15:00\"\n          slotLabelInterval=\"01:00\"\n          slotMinTime=\"00:00:00\"\n          dayHeaderContent={renderDayHeaderContent}\n          editable={true}\n          selectable={false}\n          eventDurationEditable={false}\n          allDaySlot={false}\n          // dayMaxEvents={true}\n          weekends={true}\n          // events={[\n          //   {\n          //     id: nanoid(),\n          //     start: timeSelected?.start,\n          //     end: timeSelected?.end,\n          //   },\n          // ]} // alternatively, use the `events` setting to fetch from a feed\n          eventSources={[\n            {\n              events: getBlockEvents,\n              display: 'background',\n            },\n            {\n              events: getEvent,\n            },\n          ]}\n          // eventContent={renderEventContent} // custom render function\n          eventClick={(e) => {\n            console.log('click', e);\n          }}\n          eventsSet={handleEvents} // called after events are initialized/added/changed/removed\n          dateClick={handleDateClick}\n          eventDragStop={function (arg) {\n            console.log('drag stop', arg, arg.event.startStr, arg.event.endStr);\n          }}\n          nowIndicator={true}\n          locale={zhLocale}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function BookingPage() {\n  const {userSlug, schedulingLinkSlug} = useParams();\n\n  console.log('userSlug', userSlug);\n\n  // read scheduling link\n  // - name\n  // - description\n  // - ...\n\n  return (\n    <BookingProvider\n      userSlug={userSlug}\n      schedulingLinkSlug={schedulingLinkSlug}\n    >\n      <div className=\"w-screen h-screen flex flex-row \">\n        <ControlSection />\n        <CalendarSection />\n      </div>\n    </BookingProvider>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/logger.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/events/data.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinksBoard.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLink.tsx",["269","270","271","272","273","274"],"import * as React from 'react';\nimport {Link, Route, Switch, useParams} from 'react-router-dom';\nimport 'tui-calendar/dist/tui-calendar.css';\nimport SchedulingLinkProvider, {\n  useSchedulingLink,\n} from '../hooks/SchedulingLinkProvider';\nimport SingleSelect from './events/EventLocationSelect';\nimport Select, {components} from 'react-select';\nimport WithTip from '../components-new/common/WithTip';\nimport Calendar from './Calendar';\nimport SchedulingLinkSettings from './SchedulingLinkSettings';\nimport {useAppData} from '../hooks/AppDataProvider';\nimport {useState, Fragment, useEffect} from 'react';\nimport {X} from '@geist-ui/react-icons';\nimport {\n  Button,\n  Input,\n  Toggle,\n  Link as LinkPlain,\n  Tooltip,\n  Textarea,\n} from '@geist-ui/react';\n\nconst URL = 'http://localhost:3000';\n\nfunction Header() {\n  const {profile} = useAppData();\n  const {slug: schedulingLinkSlug, updateSlug} = useSchedulingLink();\n  const userSlug = profile?.slug;\n\n  const [slug, setSlug] = useState<string>('');\n  const [editing, setEditing] = useState(false);\n\n  useEffect(() => {\n    setSlug(schedulingLinkSlug);\n  }, [schedulingLinkSlug]);\n\n  const onSave = () => {\n    console.log('on save', slug);\n    updateSlug(slug);\n    setEditing(false);\n  };\n\n  return (\n    <div className=\"Header\">\n      <div className=\"flex flex-row w-full\">\n        <Link\n          to=\"/links\"\n          className=\"hover:bg-gray-100 text-gray-600 focus:outline-none hover:text-black gentle-flex w-10 h-10 rounded-full \"\n        >\n          <X />\n        </Link>\n        <div className=\"flex flex-row justify-between w-full px-10\">\n          <div className=\"gentle-flex\">\n            <span>编辑</span>\n          </div>\n          <div className=\"flex flex-row\">\n            <div className=\"gentle-flex mr-4\">\n              <div className=\"bg-green-100 text-green-700 px-2 py-1\">\n                <i className=\"fas fa-check\" />\n                <span className=\"px-1\">已保存</span>\n              </div>\n            </div>\n            {/*<Button onClick={() => {}}>测试保存</Button>*/}\n            <div className=\"gentle-flex mr-3\">\n              <Toggle initialChecked={true} size=\"medium\" onChange={() => {}} />\n            </div>\n            <div className=\"gentle-flex px-1\">\n              {editing ? (\n                <div>\n                  <Input\n                    label={URL + '/@' + userSlug + '/'}\n                    placeholder=\"必填\"\n                    initialValue={slug}\n                    autoFocus={true}\n                    onChange={(e) => {\n                      setSlug(e.target.value);\n                    }}\n                  />\n                </div>\n              ) : (\n                <Tooltip text={'点击复制链接'} type={'dark'} placement=\"bottom\">\n                  <span className=\"cursor-pointer text-gray-600 hover:text-blue-500 hover:bg-blue-100 py-2 px-2 rounded\">\n                    {URL + '/@' + userSlug + '/' + slug}\n                  </span>\n                </Tooltip>\n              )}\n            </div>\n            <div className=\"gentle-flex\">\n              {editing ? (\n                <div className=\"flex flex-row\">\n                  <div className=\"ml-1\">\n                    <Button\n                      size={'small'}\n                      type={'success'}\n                      auto\n                      onClick={onSave}\n                    >\n                      保存\n                    </Button>\n                  </div>\n                  <div className=\"ml-1\">\n                    <Button\n                      size={'small'}\n                      auto\n                      onClick={() => setEditing(false)}\n                    >\n                      取消\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <Button size={'small'} auto onClick={() => setEditing(true)}>\n                  编辑\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst DurationOptions = [\n  ['10 分钟', 10],\n  ['15 分钟', 15],\n  ['30 分钟', 30],\n  ['45 分钟', 45],\n  ['60 分钟', 60],\n  ['90 分钟', 90],\n  ['2 小时', 120],\n];\n\nconst DurationOptionsMap = DurationOptions.map((opt) => ({\n  value: opt[1],\n  label: opt[0],\n}));\n\nconst MenuList = (props: any) => {\n  return (\n    <components.MenuList {...props}>\n      <div className=\"flex flex-row justify-end px-2 items-center \">\n        <Link to=\"/settings/links\" className=\"text-gray-400 hover:text-black\">\n          <i className=\"fas fa-external-link-alt\" />\n          <span className=\"px-2\">编辑</span>\n        </Link>\n      </div>\n      {props.children}\n    </components.MenuList>\n  );\n};\n\nconst NoOptionsMessage = (props: any) => {\n  return (\n    <components.NoOptionsMessage {...props}>\n      没有更多选项\n    </components.NoOptionsMessage>\n  );\n};\n\nfunction AvailabilitySelect() {\n  const {availabilityPresets} = useAppData();\n  const {\n    availabilityPresets: organizerAvailabilityPresets,\n    updateAvailabilityPresets,\n  } = useSchedulingLink();\n\n  const options = availabilityPresets\n    ? availabilityPresets.map((preset) => ({\n        value: preset.id,\n        label: preset.name,\n      }))\n    : [];\n\n  const defaultValue = organizerAvailabilityPresets\n    ? organizerAvailabilityPresets.map((scheduleId) => {\n        return options.find((opt) => opt.value === scheduleId);\n      })\n    : null;\n\n  const updatePresets = async (value: string[] | null) => {\n    return updateAvailabilityPresets(value);\n    // updateSchedulingLink()\n  };\n\n  return (\n    <Select\n      className=\"w-full\"\n      options={options}\n      defaultValue={defaultValue}\n      isMulti\n      components={{\n        ClearIndicator: null,\n        IndicatorSeparator: null,\n        MenuList,\n        NoOptionsMessage,\n      }}\n      onChange={(value) => {\n        // update organizer\n        updatePresets(value ? value.map((opt) => opt.value) : null);\n      }}\n    />\n  );\n}\n\nfunction GeneralSection() {\n  let {id} = useParams();\n  const {\n    name,\n    description,\n    durations,\n    location,\n    organizer,\n\n    updateLocation,\n    updateName,\n    updateDescription,\n    updateDurations,\n  } = useSchedulingLink();\n\n  return (\n    <div date-section=\"general\" className=\"flex flex-col\">\n      <div className=\"px-4 pt-8\">\n        <textarea\n          className=\"-mx-2 px-2 py-2 rounded-lg text-2xl leading-6 font-bold border-transparent focus:outline-none focus:border-gray-300 focus:ring focus:ring-black focus:ring-opacity-50 text-gray-800 resize-none w-full placeholder-gray-600\"\n          placeholder=\"未命名\"\n          spellCheck=\"false\"\n          style={{minHeight: '42px !important'}}\n          defaultValue={name}\n          rows={1}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              e.preventDefault();\n            }\n          }}\n          onChange={(e) => {\n            updateName(e.target.value);\n          }}\n        />\n        <textarea\n          className=\"-mx-2 mt-2 px-2 py-2 rounded-md block border-transparent focus:outline-none focus:border focus:border-gray-300 focus:ring focus:ring-black  focus:ring-opacity-50 w-full text-gray-600 resize-none leading-5 placeholder-gray-600\"\n          placeholder=\"描述\"\n          spellCheck=\"false\"\n          style={{minHeight: '24px !important'}}\n          defaultValue={description}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              e.preventDefault();\n            }\n          }}\n          onChange={(e) => {\n            updateDescription(e.target.value);\n          }}\n        />\n      </div>\n      <div\n        className=\"px-2 pr-4 py-2 grid gap-x-1 gap-y-6\"\n        style={{gridTemplateColumns: '30px auto'}}\n      >\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <Tooltip text=\"时间\" type=\"dark\" placement={'top'}>\n              <i className=\"fas fa-clock\" />\n            </Tooltip>\n          </span>\n          <Select\n            className=\"w-full\"\n            options={DurationOptionsMap}\n            components={{\n              ClearIndicator: null,\n              IndicatorSeparator: null,\n            }}\n            defaultValue={\n              durations\n                ? durations.map((d) => {\n                    const opt = DurationOptions.find((opt) => opt[1] === d);\n                    if (opt) {\n                      return {\n                        value: opt[1],\n                        label: opt[0],\n                      };\n                    }\n                  })\n                : []\n            }\n            isMulti\n            onChange={(value: any) => {\n              updateDurations(value.map((opt: any) => opt.value));\n            }}\n          />\n        </Fragment>\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <Tooltip text=\"可选时间\" type=\"dark\" placement={'top'}>\n              <i className=\"fas fa-calendar-check\" />\n            </Tooltip>\n          </span>\n          <AvailabilitySelect />\n        </Fragment>\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <Tooltip text=\"方式\" type=\"dark\" placement={'top'}>\n              <i className=\"fas fa-video\" />\n            </Tooltip>\n          </span>\n          <SingleSelect\n            defaultValue={location}\n            onChange={(v: any) => {\n              updateLocation(v.value);\n            }}\n          />\n        </Fragment>\n        <Fragment>\n          <Switch>\n            <Route\n              exact\n              path=\"/links/:id\"\n              component={() => (\n                // <div className=\"hover:bg-gray-200 w-full px-2 py-2 rounded\">\n                <>\n                  <span className=\"w-full gentle-flex\">\n                    <Tooltip text=\"更多设置\" type=\"dark\" placement={'top'}>\n                      <i className=\"fas fa-cog\" />\n                    </Tooltip>\n                  </span>\n                  <Link\n                    to={`/links/${id}/more-settings`}\n                    className=\"w-full px-2 py-2 hover:bg-blue-100 rounded\"\n                  >\n                    设置\n                  </Link>\n                </>\n                // </div>\n              )}\n            />\n            <Route\n              exact\n              path=\"/links/:id/more-settings\"\n              component={() => (\n                <>\n                  <span className=\"w-full gentle-flex\">\n                    <Tooltip text=\"更多设置\" type=\"dark\" placement={'top'}>\n                      <i className=\"fas fa-cog\" />\n                    </Tooltip>\n                  </span>\n                  <span className=\"bg-blue-100 w-full px-2 py-2 rounded\">\n                    设置\n                  </span>\n                </>\n                // <div className=\"bg-gray-200 w-full px-2 py-2 rounded\">\n                //   <div className=\"w-full\">\n                //   </div>\n                // </div>\n              )}\n            />\n          </Switch>\n        </Fragment>\n      </div>\n    </div>\n  );\n}\n\nfunction ControlSection() {\n  const {profile} = useAppData();\n  const {slug: schedulingLinkSlug} = useSchedulingLink();\n  const userSlug = profile?.slug;\n  const bookingUrl = '/@' + userSlug + '/' + schedulingLinkSlug;\n  return (\n    <div className=\"border-primary border-t border-solid mt-8\">\n      <div\n        className=\"px-2 pt-8 grid gap-x-1 gap-y-6\"\n        style={{gridTemplateColumns: '30px auto'}}\n      >\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <Tooltip text=\"在新页面打开预览\" type=\"dark\" placement={'top'}>\n              <i className=\"fas fa-external-link-alt \" />\n            </Tooltip>\n          </span>\n          <Link to={bookingUrl} className=\"w-full px-2 py-2 hover:underline\">\n            预览\n          </Link>\n        </Fragment>\n\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <Tooltip text=\"复制链接地址到剪贴板\" type=\"dark\" placement={'top'}>\n              <i className=\"fas fa-link\" />\n            </Tooltip>\n          </span>\n          <div className=\"cursor-pointer w-full px-2 py-2 hover:bg-blue-100 rounded\">\n            <span>复制链接</span>\n          </div>\n        </Fragment>\n        {/*<Fragment>*/}\n        {/*  <span className=\"w-full gentle-flex\">*/}\n        {/*    <i className=\"far fa-clone \" />*/}\n        {/*  </span>*/}\n        {/*  <div className=\"cursor-pointer w-full px-2 py-2 hover:bg-blue-100 rounded\">*/}\n        {/*    <span>另存为</span>*/}\n        {/*  </div>*/}\n        {/*</Fragment>*/}\n        {/*<Fragment>*/}\n        {/*  <span className=\"w-full gentle-flex\">*/}\n        {/*    <i className=\"fas fa-code \" />*/}\n        {/*  </span>*/}\n        {/*  <span>嵌入</span>*/}\n        {/*</Fragment>*/}\n        <Fragment>\n          <span className=\"w-full gentle-flex\">\n            <Tooltip text=\"删除此链接\" type=\"dark\" placement={'top'}>\n              <i className=\"far fa-trash-alt\" />\n            </Tooltip>\n          </span>\n          <div className=\"cursor-pointer w-full px-2 py-2 hover:bg-blue-100 hover:text-red-600 rounded\">\n            <span>删除</span>\n          </div>\n        </Fragment>\n      </div>\n    </div>\n  );\n}\n\nfunction CalendarSection() {}\n\n/**\n * Manage scheduling link\n *\n * context:\n *  LinkContext\n *  useLink()\n *\n * LinkContext:\n *  link\n *  updateName\n *  updateDescription\n *  updateDuration\n *  updateAvailability\n *  updateLocation\n *  updateBuffer\n *  updateLimit\n *  updateCalendar\n *  ...\n *\n * Link:\n *  name\n *  description\n *  duration\n *  availability\n *  location\n *  ...\n *\n * Components:\n *   Header\n *      ViewControl\n *      Title\n *      LinkControl\n *   GeneralSection\n *   SettingSection\n *      Buffer&Limit Subsection\n *      ...\n *   ControlSection\n *   CalendarSection\n */\nfunction SchedulingLink() {\n  let {id} = useParams();\n\n  return (\n    <SchedulingLinkProvider linkId={id}>\n      <div className=\"flex flex-col h-full\">\n        <Header />\n\n        <div className=\"flex flex-row h-full\">\n          <div className=\"w-112  h-full flex flex-col\">\n            <GeneralSection />\n            <ControlSection />\n          </div>\n\n          <div className=\"w-full h-full\">\n            <Switch>\n              <Route\n                exact\n                path=\"/links/:id/more-settings\"\n                component={SchedulingLinkSettings}\n              />\n              <Route\n                exact\n                path=\"/links/:id\"\n                component={() => (\n                  <div className=\"w-full h-full flex flex-col bg-white pt-8\">\n                    <Calendar />\n                  </div>\n                )}\n              />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </SchedulingLinkProvider>\n  );\n}\n\nexport default SchedulingLink;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookProvider.tsx",["275","276","277","278"],"import React, {useContext, useEffect, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router-dom';\nimport {\n  fetchUserProfileBySlug,\n  fetchSchedulingLinkByUrl as _fetchEventTypeByUrl,\n  fetchScheduleById,\n  createEvent as _createEvent,\n  fetchSchedulingLinksBrief,\n  fetchDatetimeSpotsByRange as fetchDatetimeSpotsByRange,\n} from '../../api';\nimport moment from 'moment';\nimport {days} from './data';\nimport dayjs from 'dayjs';\n\nexport const BookContext = React.createContext<{\n  selectedMonth: moment.Moment | null;\n  selectedDate: moment.Moment | null;\n  selectedTime: string | null;\n  updateSelectedMonth: (month: moment.Moment) => void;\n  updateSelectedDate: (date: moment.Moment) => void;\n  updateSelectedTime: (time: string) => void;\n\n  eventTypes: {[key: string]: any};\n  fetchEventTypes: (user: string) => Promise<any>;\n  fetchEventTypeByUrl: (user: string, url: string) => Promise<any>;\n\n  userProfileBySlug: {[key: string]: any};\n  fetchUserProfile: (slug: string) => Promise<any>;\n\n  schedules: {[key: string]: any};\n  fetchSchedule: (user: string, schedule_id: string) => Promise<any>;\n\n  datetimeSpotsByMonth: {[key: string]: any};\n  fetchDatetimeSpotsByMonth: (\n    event_type_id: string,\n    month: string\n  ) => Promise<any>;\n\n  createEvent: (event_type_id: string, start_time: string) => Promise<any>;\n}>({\n  selectedMonth: null,\n  selectedDate: null,\n  selectedTime: null,\n  updateSelectedMonth: (month: moment.Moment) => {},\n  updateSelectedDate: (date: moment.Moment) => {},\n  updateSelectedTime: (time: string) => {},\n\n  eventTypes: {},\n  fetchEventTypes: (user: string) => Promise.resolve([]),\n  fetchEventTypeByUrl: (user: string, url: string) => Promise.resolve({}),\n\n  userProfileBySlug: {},\n  fetchUserProfile: (slug: string) => Promise.resolve([]),\n\n  schedules: {},\n  fetchSchedule: (user: string, schedule_id: string) => Promise.resolve({}),\n\n  datetimeSpotsByMonth: {},\n  fetchDatetimeSpotsByMonth: (event_type_id: string, month: string) =>\n    Promise.resolve({}),\n\n  createEvent: (event_type_id: string, start_time: string) =>\n    Promise.resolve({}),\n});\n\nexport const useBook = () => useContext(BookContext);\n\ntype Props = React.PropsWithChildren<{}>;\n\nconst BookProvider = (props: Props) => {\n  const [selectedMonth, setSelectedMonth] = useState<moment.Moment | null>(\n    null\n  );\n  const [selectedDate, setSelectedDate] = useState<moment.Moment | null>(null);\n  const [selectedTime, setSelectedTime] = useState<string | null>(null);\n  const [datetimeSpotsByMonth, setDatetimeSpotsByMonth] = useState<any>({});\n\n  const updateSelectedMonth = (date: moment.Moment) => {\n    setSelectedMonth(date);\n  };\n\n  const updateSelectedDate = (date: moment.Moment) => {\n    setSelectedDate(date);\n  };\n\n  const updateSelectedTime = (time: string) => {\n    setSelectedTime(time);\n  };\n\n  const [eventTypes, setEventTypes] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [userProfileBySlug, setUserProfileBySlug] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const [schedules, setSchedules] = useState<{\n    [key: string]: any;\n  }>({});\n\n  useEffect(() => {}, []);\n\n  const fetchUserProfile = (slug: string) => {\n    return fetchUserProfileBySlug(slug).then((r) => {\n      setUserProfileBySlug({\n        ...userProfileBySlug,\n        [slug]: r,\n      });\n      return r;\n    });\n  };\n\n  const fetchEventTypes = (user: string) => {\n    return fetchSchedulingLinksBrief(user).then((r) => {\n      return r;\n    });\n  };\n\n  const fetchEventTypeByUrl = (user: string, url: string) => {\n    return _fetchEventTypeByUrl(user, url).then((r) => {\n      setEventTypes({\n        ...eventTypes,\n        [user]: {\n          ...eventTypes[user],\n          [url]: r,\n        },\n      });\n      return r;\n    });\n  };\n\n  const fetchSchedule = (user: string, schedule_id: string) => {\n    return fetchScheduleById(user, schedule_id).then((r) => {\n      setSchedules({\n        ...schedules,\n        [schedule_id]: r,\n      });\n\n      return r;\n    });\n  };\n\n  const fetchDatetimeSpotsByMonth = (event_type_id: string, month: string) => {\n    const start = dayjs(month).startOf('month').format('YYYY-MM-DD');\n    const end = dayjs(month).endOf('month').format('YYYY-MM-DD');\n    return fetchDatetimeSpotsByRange(event_type_id, start, end).then((r) => {\n      setDatetimeSpotsByMonth({\n        ...datetimeSpotsByMonth,\n        [month]: r,\n      });\n      return r;\n    });\n  };\n\n  const createEvent = (event_type_id: string, start_time: string) => {\n    return _createEvent(event_type_id, start_time, '');\n  };\n\n  return (\n    <BookContext.Provider\n      value={{\n        selectedMonth,\n        selectedDate,\n        selectedTime,\n        updateSelectedMonth,\n        updateSelectedDate,\n        updateSelectedTime,\n\n        eventTypes,\n        fetchEventTypes,\n        fetchEventTypeByUrl,\n\n        userProfileBySlug,\n        fetchUserProfile,\n\n        schedules,\n        fetchSchedule,\n\n        datetimeSpotsByMonth,\n        fetchDatetimeSpotsByMonth,\n\n        createEvent,\n      }}\n    >\n      {props.children}\n    </BookContext.Provider>\n  );\n};\n\nexport default BookProvider;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookTypePage.tsx",["279","280"],"import {Redirect, useHistory, useLocation, useParams} from 'react-router-dom';\nimport {useBook} from './BookProvider';\nimport React, {useEffect, useState} from 'react';\nimport moment from 'moment';\nimport dayjs from 'dayjs';\nimport {\n  PERIOD_TYPE_AVAILABLE_MOVING,\n  PERIOD_TYPE_FIXED,\n  PERIOD_TYPE_MOVING,\n  PERIOD_TYPE_UNLIMITED,\n} from '../constants';\nimport {\n  DayPickerSingleDateController,\n  isInclusivelyAfterDay,\n  isSameDay,\n} from 'react-dates';\nimport {colourOptions} from '../events/data';\nimport ReactList from 'react-list';\nimport TimeOption from './TimeOption';\nimport 'react-dates/lib/css/_datepicker.css';\nimport './day-picker.css';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst TimeOptionList = ({sliceOfTime}: any) => {\n  const {pathname} = useLocation();\n  const {selectedMonth, selectedDate, updateSelectedTime} = useBook();\n\n  const [checkedValue, setCheckedValue] = useState<string>('');\n  let history = useHistory();\n\n  const handleConfirm = () => {\n    updateSelectedTime(checkedValue);\n    history.push(\n      `${pathname}/${moment(\n        checkedValue\n      ).format()}?month=${selectedMonth?.format(\n        'YYYY-MM'\n      )}&date=${selectedDate?.format('YYYY-MM-DD')}`\n    );\n  };\n\n  return (\n    <ReactList\n      itemRenderer={(index: number, key: any) => {\n        return (\n          <div key={key}>\n            <TimeOption\n              value={sliceOfTime[index]}\n              checked={sliceOfTime[index] === checkedValue}\n              onCheck={setCheckedValue}\n              onConfirm={handleConfirm}\n            />\n          </div>\n        );\n      }}\n      length={sliceOfTime.length}\n      type=\"uniform\"\n    />\n  );\n};\n\nconst BookingInfo = ({profile, eventType}: any) => {\n  return (\n    <div\n      className=\"w-96 bg-white border-primary border-r border-solid\"\n      style={{\n        paddingTop: '25px',\n        paddingBottom: '25px',\n      }}\n    >\n      <div className=\"flex flex-col\">\n        <h4\n          className=\"\"\n          style={{\n            fontSize: '16px',\n            paddingLeft: '30px',\n            paddingRight: '10px',\n            color: 'rgba(77, 80, 85, 0.6)',\n            marginBottom: '0 0 3px',\n          }}\n        >\n          {profile?.full_name}\n        </h4>\n        <h1\n          className=\"font-bold\"\n          style={{\n            marginBottom: '24px',\n            fontSize: '28px',\n            lineHeight: '32px',\n            paddingLeft: '30px',\n            paddingRight: '10px',\n            color: '#4d5055',\n          }}\n        >\n          {eventType?.name}\n        </h1>\n        <div\n          style={{\n            fontSize: '16px',\n            lineHeight: '1.5',\n            paddingLeft: '30px',\n            paddingRight: '10px',\n            marginBottom: '20px',\n            color: '#4d5055',\n          }}\n        >\n          <i className=\"fas fa-clock mr-2 w-5 text-center\" />\n          {eventType?.duration} 分钟\n        </div>\n        <div\n          style={{\n            fontSize: '16px',\n            lineHeight: '1.5',\n            paddingLeft: '30px',\n            paddingRight: '10px',\n            marginBottom: '20px',\n            color: '#4d5055',\n          }}\n        >\n          <i className=\"fas fa-handshake mr-2 w-5 text-center\" />\n          {\n            colourOptions.find((opt) => opt.value === eventType?.location)\n              ?.label\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst BookTypePage = () => {\n  const {user, type} = useParams();\n  const query = useQuery();\n  const month = query.get('month');\n  const date = query.get('date');\n  const {pathname} = useLocation();\n  const history = useHistory();\n  const {\n    selectedMonth,\n    selectedDate,\n    updateSelectedMonth,\n    updateSelectedDate,\n\n    userProfileBySlug,\n    fetchUserProfile,\n    eventTypes,\n    fetchEventTypeByUrl,\n    fetchSchedule,\n    schedules,\n\n    datetimeSpotsByMonth,\n    fetchDatetimeSpotsByMonth,\n  } = useBook();\n\n  const [datetimeSpots, setDatetimeSpots] = useState<any>([]);\n\n  const profile = userProfileBySlug[user];\n  const eventType = eventTypes[user] && eventTypes[user][type];\n  const today = moment();\n  const schedule_id = eventType && eventType['schedule_id'];\n  const schedule = schedules && schedules[schedule_id];\n  const rules = schedule && JSON.parse(schedule.rules);\n\n  const sliceOfTime = datetimeSpots\n    ? datetimeSpots\n        .find((day: any) => day.date === selectedDate?.format('YYYY-MM-DD'))\n        ?.spots?.map((s: any) => s.start_time)\n    : [];\n\n  useEffect(() => {\n    fetchUserProfile(user);\n    fetchEventTypeByUrl(user, type).then((r) => {\n      if (r) {\n        fetchSchedule(user, r['schedule_id']).then((r) => {});\n      }\n    });\n\n    if (month) {\n      updateSelectedMonth(moment(month, 'YYYY-MM'));\n    }\n    if (date) {\n      updateSelectedDate(moment(date, 'YYYY-MM-DD'));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (eventType && selectedMonth) {\n      handleDatetimeSpotsFetch(eventType.id, selectedMonth);\n    }\n  }, [eventType, selectedMonth]);\n\n  useEffect(() => {\n    if (selectedMonth && datetimeSpotsByMonth) {\n      setDatetimeSpots(datetimeSpotsByMonth[selectedMonth.format('YYYY-MM')]);\n    }\n  }, [selectedMonth, datetimeSpotsByMonth]);\n\n  const isDayAvailable = (date: moment.Moment) => {\n    if (!eventType) {\n      return false;\n    }\n    const {max_booking_time} = eventType;\n    switch (eventType.period_type) {\n      case PERIOD_TYPE_MOVING:\n        const rule =\n          rules &&\n          rules.find(\n            (rule: any) =>\n              rule.wday ===\n              dayjs(date.toISOString()).format('dddd').toLowerCase()\n          );\n        return (\n          (isSameDay(date, today) || isInclusivelyAfterDay(date, today)) &&\n          rule &&\n          date.diff(today) < max_booking_time * 60000\n        );\n      case PERIOD_TYPE_AVAILABLE_MOVING:\n      case PERIOD_TYPE_FIXED:\n      case PERIOD_TYPE_UNLIMITED:\n    }\n    return false;\n  };\n\n  const isDayHighlighted = (date: moment.Moment) => {\n    return isDayAvailable(date);\n  };\n\n  const isOutsideRange = (date: moment.Moment) => {\n    return !isDayAvailable(date);\n  };\n\n  const handleDatetimeSpotsFetch = (\n    event_type_id: string,\n    month: moment.Moment\n  ) => {\n    return fetchDatetimeSpotsByMonth(event_type_id, month.format('YYYY-MM'));\n  };\n\n  const handleMonthNavigate = (newCurrentMonth: moment.Moment) => {\n    if (newCurrentMonth) {\n      updateSelectedMonth(newCurrentMonth);\n      history.push(\n        `${pathname}?month=${newCurrentMonth.format('YYYY-MM')}${\n          selectedDate ? `&date=${selectedDate.format('YYYY-MM-DD')}` : ''\n        }`\n      );\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-row bg-gray-200\">\n      <BookingInfo profile={profile} eventType={eventType} />\n      <div className=\"bg-white\" style={{paddingTop: '28px'}}>\n        <div\n          className=\"text-20px\"\n          style={{\n            color: '#4d5055',\n            fontSize: '20px',\n            marginBottom: '20px',\n            textAlign: 'left',\n            paddingLeft: '32px',\n            paddingRight: '32px',\n          }}\n        >\n          选择日期和时间\n        </div>\n\n        <div className=\"flex flex-row justify-between bg-white\">\n          <div className=\"w-96\">\n            <DayPickerSingleDateController\n              date={selectedDate}\n              focused={true}\n              onFocusChange={(date) => {\n                console.log('onFocusChange', date);\n              }}\n              onPrevMonthClick={handleMonthNavigate}\n              onNextMonthClick={handleMonthNavigate}\n              onDateChange={(date) => {\n                if (date) {\n                  updateSelectedDate(date);\n                  history.push(\n                    `${pathname}?month=${(selectedMonth\n                      ? selectedMonth\n                      : date\n                    ).format('YYYY-MM')}&date=${date.format('YYYY-MM-DD')}`\n                  );\n                }\n              }}\n              initialVisibleMonth={() => {\n                return month ? moment(month, 'YYYY-MM') : moment();\n              }}\n              monthFormat=\"YYYY [年] M [月]\"\n              weekDayFormat=\"dd\"\n              isOutsideRange={isOutsideRange}\n              isDayBlocked={() => false}\n              isDayHighlighted={isDayHighlighted}\n              hideKeyboardShortcutsPanel\n            />\n          </div>\n          {selectedDate && (\n            <div className=\"w-64 flex flex-col h-full\">\n              <div\n                className=\"\"\n                style={{\n                  height: '38px',\n                  marginBottom: '10px',\n                  fontSize: '16px',\n                  lineHeight: '38px',\n                  color: '#4d5055',\n                }}\n              >\n                {selectedDate?.format('MMM D[日] dddd')}\n              </div>\n              <div\n                className=\"p-1 h-full\"\n                style={{overflow: 'scroll', height: '500px'}}\n              >\n                <TimeOptionList sliceOfTime={sliceOfTime ? sliceOfTime : []} />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst BookTypePageWrapper = () => {\n  const query = useQuery();\n  const {pathname} = useLocation();\n  if (query.get('month')) {\n    return <BookTypePage />;\n  } else {\n    return <Redirect to={`${pathname}?month=${moment().format('YYYY-MM')}`} />;\n  }\n};\n\nexport default BookTypePageWrapper;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Availability.tsx",["281","282","283","284","285","286","287"],"import React from 'react';\nimport {useParams, Link} from 'react-router-dom';\nimport {useAppData} from '../hooks/AppDataProvider';\nimport TextField from './common/TextField';\nimport {listOfTime24, listOfTime24Options} from './constants';\nimport Select from 'react-select';\nimport FullCalendar, {DayHeaderContentArg} from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport {\n  complementIntervals,\n  createEventId,\n  eliminateIntervals,\n  INITIAL_EVENTS,\n} from './event-utils';\nimport zhLocale from '@fullcalendar/core/locales/zh-cn';\nimport {Button, Checkbox, Input} from '@geist-ui/react';\nimport dayjs, {Dayjs} from 'dayjs';\nimport produce, {Draft} from 'immer';\n\nimport {dayConvertToEn, dayConvertToZh} from '../utils';\nimport _ from 'lodash';\nimport {nanoid} from 'nanoid';\nimport {X} from '@geist-ui/react-icons';\nimport {EventInput} from '@fullcalendar/common';\n\nconst sliceOfTime = listOfTime24.slice(0, 24 * 4);\nconst timeOptions = listOfTime24Options;\n\nfunction AvailabilityByDay({\n  rule,\n  updateDayCheck,\n  updateStartTime,\n  updateEndTime,\n}: any) {\n  const dayState = ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su'].map((d) => {\n    return {\n      day: d,\n      checked: rule.byday.findIndex((day: string) => day === d) > -1,\n    };\n  });\n\n  return (\n    <div className={'flex flex-col'}>\n      <div className=\"flex flex-row py-2 px-4 \">\n        {dayState.map((state) => {\n          return (\n            <div key={state.day} className=\"cursor-pointer pl-4\">\n              <label className=\"cursor-pointer inline-flex flex-col\">\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={state.checked}\n                  onChange={(e) => {\n                    updateDayCheck(rule.id, state.day, e.target.checked);\n                  }}\n                />\n                {dayConvertToZh(state.day)}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"flex flex-row\">\n        <Select\n          className=\"w-28 mx-4\"\n          classNamePrefix=\"select\"\n          components={{\n            IndicatorSeparator: () => {\n              return null;\n            },\n          }}\n          name=\"color\"\n          defaultValue={timeOptions[(rule.startTime / 60) * 4]}\n          options={timeOptions}\n          onChange={(option) => {\n            if (option) {\n              updateStartTime(rule.id, option.value);\n            }\n          }}\n        />\n        <Select\n          className=\"w-28 mx-4\"\n          classNamePrefix=\"select\"\n          components={{\n            IndicatorSeparator: () => {\n              return null;\n            },\n          }}\n          name=\"color\"\n          defaultValue={timeOptions[(rule.endTime / 60) * 4]}\n          options={timeOptions}\n          onChange={(option) => {\n            if (option) {\n              updateEndTime(rule.id, option.value);\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function Availability() {\n  const {id} = useParams();\n\n  const {availabilityPresets, updateAvailabilityPreset} = useAppData();\n  const preset = availabilityPresets\n    ? availabilityPresets.find((p) => p.id === id)\n    : null;\n\n  const renderDayHeaderContent = (props: DayHeaderContentArg) => {\n    const date = dayjs(props.date);\n    return (\n      <div>\n        <div className=\"text-xs font-medium text-gray-600\">\n          {date.format('ddd')}\n        </div>\n      </div>\n    );\n  };\n\n  const getBackgroundEvents = (\n    arg: {\n      start: Date;\n      end: Date;\n      startStr: string;\n      endStr: string;\n      timeZone: string;\n    },\n    successCallback: (events: EventInput[]) => void,\n    failureCallback: (error: any) => any\n  ) => {\n    const startDate = dayjs(arg.start);\n    const endDate = dayjs(arg.end);\n    const availabilityPresetsIntervals: any = preset ? preset.rules : [];\n\n    const availableIntervals: Dayjs[][] = [];\n    let date = startDate.clone();\n    while (!date.isSame(endDate)) {\n      const day = dayConvertToEn(date.format('dd').toLowerCase());\n      availabilityPresetsIntervals.forEach((settings: any) => {\n        if (settings.byday.findIndex((d: string) => d === day) > -1) {\n          let startTime = date.add(settings.startTime, 'minute');\n          let endTime = date.add(settings.endTime, 'minute');\n          availableIntervals.push([startTime, endTime]);\n        }\n      });\n      date = date.add(1, 'day');\n    }\n    const sortedIntervals = _.sortBy(availableIntervals, (e) => e[0].valueOf());\n    const eliminatedIntervals = eliminateIntervals(sortedIntervals);\n    const complementedIntervals = complementIntervals(\n      startDate,\n      endDate,\n      eliminatedIntervals\n    );\n\n    successCallback(\n      complementedIntervals.map((interval) => {\n        return {\n          id: createEventId(),\n          start: interval[0].toISOString(),\n          end: interval[1].toISOString(),\n          className: 'sc-unavailable',\n          display: 'background',\n        };\n      })\n    );\n  };\n\n  /** update functions\n   *  1. name\n   *  2. rule: edit, add, remove\n   * */\n\n  const updateName = (value: string) => {\n    updateAvailabilityPreset(preset.id, {name: value});\n  };\n\n  const removeRule = (id: string) => {\n    updateAvailabilityPreset(preset.id, {\n      rules: preset.rules.filter((rule: any) => rule.id != id),\n    });\n  };\n\n  const addRule = () => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      draft.push({\n        id: nanoid(),\n        byday: ['mo', 'tu', 'we', 'th', 'fr'],\n        startTime: 540,\n        endTime: 1020,\n      });\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  const updateDayCheck = (ruleId: string, day: string, checked: boolean) => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      const rule = draft.find((rule: any) => rule.id === ruleId);\n      if (checked) {\n        rule.byday.push(day);\n      } else {\n        rule.byday = rule.byday.filter((byday: string) => byday !== day);\n      }\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  const updateStartTime = (ruleId: string, value: number) => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      const rule = draft.find((rule: any) => rule.id === ruleId);\n      rule.startTime = value;\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  const updateEndTime = (ruleId: string, value: number) => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      const rule = draft.find((rule: any) => rule.id === ruleId);\n      rule.endTime = value;\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  console.log('avaialbility', preset);\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <div className=\"flex flex-row header-padding header-border header-h items-center\">\n        <Link\n          to={`/settings/links`}\n          className=\"gentle-flex focus:outline-none w-10 h-10 text-gray-400 hover:text-gray-700 hover:bg-gray-100 rounded-full\"\n        >\n          <X />\n        </Link>\n        <span className=\"pl-2\">时间管理</span>\n      </div>\n\n      <div className=\"flex flex-row w-full\">\n        <div className=\"flex flex-col w-112\">\n          <div className=\"px-4 pt-8\">\n            <textarea\n              className=\"-mx-2 px-2 py-2 rounded-lg text-2xl leading-6 font-bold border-transparent focus:outline-none focus:border-gray-300 focus:ring focus:ring-black focus:ring-opacity-50 text-gray-800 resize-none placeholder-gray-600\"\n              placeholder=\"未命名\"\n              spellCheck=\"false\"\n              style={{minHeight: '42px !important'}}\n              defaultValue={preset?.name}\n              rows={1}\n              onKeyPress={(e) => {\n                console.log(e.key);\n                if (e.key === 'Enter') {\n                  e.preventDefault();\n                }\n              }}\n              onChange={(e) => {\n                // console.log('Name change', e.target.value);\n                updateName(e.target.value);\n              }}\n            />\n          </div>\n\n          <div className=\"pt-4\">\n            {preset?.rules.map((rule: any) => {\n              return (\n                <div\n                  key={rule.id}\n                  className=\"flex flex-row py-2 pb-8 mb-4 border-b border-primary border-solid\"\n                >\n                  <AvailabilityByDay\n                    rule={rule}\n                    updateDayCheck={updateDayCheck}\n                    updateStartTime={updateStartTime}\n                    updateEndTime={updateEndTime}\n                  />\n                  <button\n                    className=\"w-8 h-8 relative text-gray-300 hover:text-black hover:bg-gray-100 rounded-full gentle-flex\"\n                    onClick={() => removeRule(rule.id)}\n                  >\n                    <X />\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"w-full mt-4\">\n            <Button className={'ml-4 mt-4'} onClick={addRule}>\n              添加\n            </Button>\n            <Button className={'ml-4 mt-4'}>显示我的日历</Button>\n          </div>\n        </div>\n\n        <div className=\"ml-4 demo-app-main w-full\">\n          <FullCalendar\n            contentHeight=\"1100px\"\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={false}\n            weekNumberCalculation=\"ISO\"\n            initialView=\"timeGridWeek\"\n            slotDuration=\"00:30:00\"\n            snapDuration=\"00:15:00\"\n            slotLabelInterval=\"01:00\"\n            slotMinTime=\"06:00:00\"\n            dayHeaderContent={renderDayHeaderContent}\n            allDaySlot={false}\n            weekends={true}\n            eventSources={[\n              {\n                events: getBackgroundEvents,\n                display: 'background',\n              },\n            ]}\n            nowIndicator={false}\n            locale={zhLocale}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/AppSettings.tsx",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307"],"import React, {useEffect, useState} from 'react';\nimport {Switch, Route, Link, useLocation, Redirect} from 'react-router-dom';\nimport {useAppData} from '../hooks/AppDataProvider';\nimport {Button, Input, Spacer, Text} from '@geist-ui/react';\nimport {\n  convertMinToHrsMin,\n  convertMinToHrsMinString,\n  dayConvertToZh,\n} from '../utils';\nimport dayjs from 'dayjs';\nimport NavSidebar from './NavSidebar';\n\nfunction SettingSection(props: any) {\n  return (\n    <div className=\"border-primary border-b border-solid py-8\">\n      <div className=\"mx-auto w-128\">{props.children}</div>\n    </div>\n  );\n}\n\ninterface SectionTitleProps extends React.PropsWithChildren<any> {\n  title: string;\n}\n\nfunction SectionTitle(props: SectionTitleProps) {\n  return <div className=\"text-xl\">{props.title}</div>;\n}\n\nfunction AvailabilitySection() {\n  const {availabilityPresets, createSchedule} = useAppData();\n\n  const format = (minutes: number) => {\n    if (minutes) return convertMinToHrsMinString(minutes);\n  };\n\n  const add = () => {\n    createSchedule();\n  };\n\n  console.log('availabilityPresets', availabilityPresets);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'时间管理'} />\n      <div className=\"border-primary border-b border-solid py-2\">\n        {availabilityPresets &&\n          availabilityPresets.map((preset) => {\n            return (\n              <div\n                key={preset.id}\n                className=\"border-primary border-t border-solid  py-6 flex flex-row justify-between\"\n              >\n                <div className=\"flex flex-col\">\n                  <Text h3 className=\"font-medium\">\n                    <Link\n                      to={`/availabilities/${preset.id}/edit`}\n                      className={'hover:underline'}\n                    >\n                      {preset.name}\n                    </Link>\n                  </Text>\n                  <div className=\"pt-2\">\n                    {preset.rules.map((rule: any) => {\n                      return (\n                        <div key={rule.id} className=\"grid grid-cols-2\">\n                          <div className=\"flex flex-row\">\n                            {rule.byday.map((byday: string) => {\n                              return (\n                                <span\n                                  key={byday}\n                                  className=\"mr-1 text-sm text-gray-600\"\n                                >\n                                  {dayConvertToZh(byday)}\n                                </span>\n                              );\n                            })}\n                          </div>\n                          <div className=\"text-sm text-gray-600 pl-4\">\n                            <label className=\"mx-1\">\n                              {format(rule.startTime)}\n                            </label>\n                            -\n                            <label className=\"mx-1\">\n                              {format(rule.endTime)}\n                            </label>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                <div className=\"mt-2 flex flex-row\">\n                  <Link\n                    to={`/availabilities/${preset.id}/edit`}\n                    // className=\"btn-draft\"\n                  >\n                    <Button size={'mini'}>编辑</Button>\n                  </Link>\n                  <Button size={'mini'} className=\"ml-4\">\n                    删除\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n      <Spacer y={1.5} />\n      <Button size={'small'} onClick={add}>\n        新建\n      </Button>\n    </SettingSection>\n  );\n}\n\nfunction LinksSettingsSection() {\n  return (\n    <div className=\"flex flex-col\">\n      <AvailabilitySection />\n      <SettingSection>\n        <SectionTitle title={'Buffer'} />\n        <div></div>\n      </SettingSection>\n      <SettingSection>\n        <SectionTitle title={'提醒'} />\n        <div></div>\n      </SettingSection>\n      <SettingSection>\n        <SectionTitle title={'品牌'} />\n        <div></div>\n      </SettingSection>\n    </div>\n  );\n}\n\nconst URL = 'http://localhost:3000';\n\nfunction SlugSection() {\n  const {profile, updateSlug} = useAppData();\n  const [slug, setSlug] = useState<string>('');\n\n  const [editing, setEditing] = useState(false);\n  useEffect(() => {\n    if (profile) {\n      setSlug(profile.slug);\n    }\n  }, [profile]);\n\n  console.log('slug', profile);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'链接地址'} />\n      <div className=\"pt-4 flex flex-row justify-between\">\n        {editing ? (\n          <Input\n            label={URL + '/@'}\n            initialValue={slug}\n            autoFocus={true}\n            onChange={(e) => {\n              setSlug(e.target.value);\n            }}\n          />\n        ) : (\n          <div className=\"my-auto\">{URL + '/@' + slug} </div>\n        )}\n        {editing ? (\n          <div className=\"flex flex-row\">\n            <div className=\"ml-1\">\n              <Button\n                size={'small'}\n                type={'success'}\n                auto\n                onClick={() => {\n                  updateSlug(slug);\n                  setEditing(false);\n                }}\n              >\n                保存\n              </Button>\n            </div>\n            <div className=\"ml-1\">\n              <Button\n                size={'small'}\n                auto\n                onClick={() => {\n                  setSlug(profile.slug);\n                  setEditing(false);\n                }}\n              >\n                取消\n              </Button>\n            </div>\n          </div>\n        ) : (\n          // <div className=\"flex flex-row\">\n          //   <div\n          //     className=\"btn-draft\"\n          //     onClick={() => {\n          //       updateSlug(slug);\n          //       setEditing(false);\n          //     }}\n          //   >\n          //     保存\n          //   </div>\n          //   <div\n          //     className=\"btn-draft\"\n          //     onClick={() => {\n          //       setSlug(settings.slug);\n          //       setEditing(false);\n          //     }}\n          //   >\n          //     取消\n          //   </div>\n          // </div>\n          <Button size={'small'} onClick={() => setEditing(true)}>\n            编辑\n          </Button>\n        )}\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction LinkUrlSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  const [editing, setEditing] = useState<boolean>(false);\n}\n\nfunction EmailSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  const [editing, setEditing] = useState<boolean>(false);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'邮件地址'} />\n      <div className=\"pt-4\">{profile?.email}</div>\n    </SettingSection>\n  );\n}\n\nfunction NameSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'姓名'} />\n      <div className=\"pt-4\">\n        <Input\n          className=\"focus:outline-none\"\n          initialValue={profile?.display_name}\n          onChange={(e) => {\n            updateDisplayName(e.target.value);\n          }}\n        />\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction ProfileSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  return (\n    <div className={'flex flex-col'}>\n      <NameSection />\n      <SlugSection />\n      <EmailSection />\n      <SettingSection>\n        <SectionTitle title={'密码'} />\n        <div className=\"pt-4\">\n          <div className=\"btn-draft\">重设密码</div>\n        </div>\n      </SettingSection>\n    </div>\n  );\n}\n\nexport function AppSettings() {\n  const {pathname} = useLocation();\n\n  return (\n    <div className=\"w-full flex flex-row\">\n      <NavSidebar />\n      <div className=\"w-full\">\n        <div className=\"Header bg-gray-100\">\n          <div className=\"gentle-flex py-1 w-24\">\n            <div className=\"font-bold\">设置</div>\n          </div>\n        </div>\n        <div className=\"border-primary border-b border-solid\">\n          <div className=\"mx-auto w-128\">\n            <div className={'flex flex-row'}>\n              {[\n                {\n                  url: '/settings/profile',\n                  name: '账号',\n                },\n                {\n                  url: '/settings/links',\n                  name: '链接',\n                },\n                {\n                  url: '/settings/teams',\n                  name: '团队',\n                },\n              ].map(({url, name}) => {\n                return (\n                  <Link to={url} key={url}>\n                    <div\n                      className={`${\n                        pathname === url ||\n                        pathname.startsWith(url) ||\n                        (pathname === '/' && url === '/links')\n                          ? 'border-primary border-b-4 border-pink-400 text-black'\n                          : 'opacity-75'\n                      } px-4 py-2`}\n                    >\n                      {name}\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        <Switch>\n          <Route\n            exact\n            path=\"/settings\"\n            component={() => <Redirect to={'/settings/profile'} />}\n          />\n          <Route exact path=\"/settings/profile\" component={ProfileSection} />\n          <Route\n            exact\n            path=\"/settings/links\"\n            component={LinksSettingsSection}\n          />\n          <Route\n            exact\n            path=\"/settings/teams\"\n            component={() => <div>teams</div>}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookContactsPage.tsx",["308","309","310","311"],"import {useHistory, useLocation, useParams} from 'react-router-dom';\nimport {useBook} from './BookProvider';\nimport React, {useEffect, useState} from 'react';\nimport moment from 'moment';\nimport {colourOptions} from '../events/data';\nimport {\n  ITextFieldStyles,\n  Label,\n  PrimaryButton,\n  TextField,\n} from '@fluentui/react';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst QuestionForm = ({eventType}: any) => {\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState<boolean | null>(null);\n\n  const history = useHistory();\n\n  const {createEvent, selectedDate, selectedTime} = useBook();\n\n  const handleChangeEmail = (e: any) => {\n    setEmail(e.target.value);\n    setError(null);\n    setLoading(null);\n  };\n\n  const handleChangeName = (e: any) => {\n    setName(e.target.value);\n    setError(null);\n    setLoading(null);\n  };\n\n  const textFieldStyles: Partial<ITextFieldStyles> = {\n    field: {height: 50, fontSize: '1rem', color: 'black', padding: '12px 16px'},\n    fieldGroup: {height: 52, border: '1px black solid'},\n    revealButton: {height: 50},\n  };\n\n  return (\n    <form\n      className=\"flex flex-col justify-between h-full\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const res = `invitees/HAX776ZFSRHFOTIA`;\n        if (selectedTime) {\n          createEvent(eventType.id, selectedTime).then((r) => {\n            history.push(res);\n          });\n        } else {\n          console.log('Error time is null');\n        }\n      }}\n    >\n      <div className=\"flex flex-col\">\n        <div style={{paddingBottom: '24px'}}>\n          <Label required>姓名</Label>\n          <TextField\n            type=\"text\"\n            styles={textFieldStyles}\n            onChange={handleChangeName}\n            value={name}\n            id={'name'}\n          />\n        </div>\n        <div style={{paddingBottom: '24px'}}>\n          <Label required>Email</Label>\n          <TextField\n            type=\"email\"\n            styles={textFieldStyles}\n            onChange={handleChangeEmail}\n            value={email}\n            id={'email'}\n          />\n        </div>\n      </div>\n      <PrimaryButton className=\"submit-button\" text=\"提交\" type=\"submit\" />\n    </form>\n  );\n};\n\nconst BookContactsPage = () => {\n  const {user, type, datetime} = useParams();\n  const query = useQuery();\n  const month = query.get('month');\n  const date = query.get('date');\n\n  const {\n    selectedDate,\n    updateSelectedDate,\n    updateSelectedMonth,\n    selectedTime,\n    updateSelectedTime,\n\n    userProfileBySlug,\n    fetchUserProfile,\n    eventTypes,\n    fetchEventTypeByUrl,\n    fetchSchedule,\n  } = useBook();\n  const profile = userProfileBySlug[user];\n  const eventType = eventTypes[user] && eventTypes[user][type];\n\n  useEffect(() => {\n    fetchUserProfile(user).then((r) => {});\n    fetchEventTypeByUrl(user, type).then((r) => {\n      if (r) {\n        fetchSchedule(user, r['schedule_id']).then((r) => {});\n      }\n    });\n\n    if (month) {\n      updateSelectedMonth(moment(month, 'YYYY-MM'));\n    }\n    if (date) {\n      updateSelectedDate(moment(date, 'YYYY-MM-DD'));\n    }\n    if (datetime) {\n      updateSelectedMonth(moment(datetime, 'YYYY-MM'));\n      updateSelectedDate(moment(datetime, 'YYYY-MM-DD'));\n      updateSelectedTime(datetime);\n    }\n  }, []);\n\n  return (\n    <div className=\"h-full flex flex-row bg-gray-200\">\n      <div\n        className=\"w-96 bg-white border-primary border-r border-solid\"\n        style={{\n          paddingTop: '25px',\n          paddingBottom: '25px',\n        }}\n      >\n        <div className=\"flex flex-col\">\n          <h4\n            className=\"\"\n            style={{\n              fontSize: '16px',\n              paddingLeft: '30px',\n              paddingRight: '10px',\n              color: 'rgba(77, 80, 85, 0.6)',\n              marginBottom: '0 0 3px',\n            }}\n          >\n            {profile?.full_name}\n          </h4>\n          <h1\n            className=\"font-bold\"\n            style={{\n              marginBottom: '24px',\n              fontSize: '28px',\n              lineHeight: '32px',\n              paddingLeft: '30px',\n              paddingRight: '10px',\n              color: '#4d5055',\n            }}\n          >\n            {eventType?.name}\n          </h1>\n          <div\n            style={{\n              fontSize: '16px',\n              lineHeight: '1.5',\n              paddingLeft: '30px',\n              paddingRight: '10px',\n              marginBottom: '20px',\n              color: '#4d5055',\n            }}\n          >\n            <i className=\"fas fa-clock mr-2 w-5 text-center\" />\n            {eventType?.duration} 分钟\n          </div>\n          <div\n            style={{\n              fontSize: '16px',\n              lineHeight: '1.5',\n              paddingLeft: '30px',\n              paddingRight: '10px',\n              marginBottom: '20px',\n              color: '#4d5055',\n            }}\n          >\n            <i className=\"fas fa-handshake mr-2 w-5 text-center\" />\n            {\n              colourOptions.find((opt) => opt.value === eventType?.location)\n                ?.label\n            }\n          </div>\n\n          <div\n            style={{\n              fontSize: '16px',\n              lineHeight: '1.5',\n              paddingLeft: '30px',\n              paddingRight: '10px',\n              marginBottom: '20px',\n              color: '#4d5055',\n            }}\n          >\n            <i className=\"fas fa-calendar-day mr-2 w-5 text-center\" />\n            {moment(selectedTime).format('HH:mm')},{' '}\n            {selectedDate?.format('YYYY-MM-DD')}\n          </div>\n        </div>\n      </div>\n      <div className=\"bg-white h-full\" style={{paddingTop: '28px'}}>\n        <div\n          className=\"text-20px\"\n          style={{\n            color: '#4d5055',\n            fontSize: '20px',\n            marginBottom: '20px',\n            textAlign: 'left',\n            paddingLeft: '32px',\n            paddingRight: '32px',\n          }}\n        >\n          联系信息\n        </div>\n        <div\n          className=\"\"\n          style={{\n            width: '600px',\n            paddingLeft: '32px',\n            paddingRight: '32px',\n            height: 'calc(100% - 60px)',\n          }}\n        >\n          <QuestionForm eventType={eventType} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookContactsPage;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookInviteePage.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingProvider.tsx",["312","313","314","315","316"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/BookUserPage.tsx",["317"],"import React, {useEffect} from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport {useBook} from './BookProvider';\n\nconst BookUserPage = () => {\n  const {user} = useParams();\n  const {\n    userProfileBySlug,\n    fetchUserProfile,\n    eventTypes,\n    fetchEventTypes,\n  } = useBook();\n\n  useEffect(() => {\n    if (!eventTypes) {\n      fetchEventTypes(user).then((r) => {});\n    }\n    if (!userProfileBySlug[user]) {\n      fetchUserProfile(user).then((r) => {});\n    }\n  }, []);\n\n  return (\n    <div className=\"mx-auto p-8\">\n      <div className=\"h-56\">\n        <div className=\"h-24 gentle-flex text-xl font-normal opacity-75\">\n          {userProfileBySlug[user]?.full_name}\n        </div>\n        <div className=\"text-center\">\n          欢迎来到我的预约页面。\n          <br />\n          请按照指导添加预约时间到我的日历。\n        </div>\n      </div>\n      <div className=\"flex flex-row flex-wrap border-t-2 border-primary border-solid pt-5\">\n        {['15min', '30min', '45min', '50min'].map((type) => {\n          return (\n            <Link to={`/@${user}/${type}`}>\n              <div\n                key={type}\n                className=\"mt-2 ml-2 h-32 w-64 bg-gray-200 cursor-pointer gentle-flex hover:bg-gray-300 rounded\"\n              >\n                {type}\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default BookUserPage;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/event-utils.tsx",["318","319","320"],"import {EventInput} from '@fullcalendar/react';\nimport {Dayjs} from 'dayjs';\n\nlet eventGuid = 0;\nlet todayStr = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today\n\nexport const INITIAL_EVENTS: EventInput[] = [\n  {\n    id: createEventId(),\n    start: '2021-01-22' + 'T12:00:00',\n    end: '2021-01-22' + 'T14:00:00',\n  },\n];\n\nexport function createEventId() {\n  return String(eventGuid++);\n}\n\nexport function complementIntervals(\n  start: Dayjs,\n  end: Dayjs,\n  intervals: Dayjs[][]\n) {\n  const res: Dayjs[][] = [];\n  if (intervals.length === 0) {\n    res.push([start, end]);\n    return res;\n  }\n\n  if (start.isBefore(intervals[0][0])) {\n    res.push([start, intervals[0][0]]);\n  }\n\n  for (let index = 0; index < intervals.length - 1; index++) {\n    res.push([intervals[index][1], intervals[index + 1][0]]);\n  }\n\n  if (end.isAfter(intervals[intervals.length - 1][1])) {\n    res.push([intervals[intervals.length - 1][1], end]);\n  }\n  return res;\n}\n\nfunction max(a: Dayjs, b: Dayjs) {\n  return a.isAfter(b) ? a : b;\n}\n\nexport function eliminateIntervals(intervals: Dayjs[][]) {\n  const res: Dayjs[][] = [];\n  if (intervals.length === 0) {\n    return res;\n  }\n  let currentStart = intervals[0][0];\n  let currentEnd = intervals[0][1];\n  for (let index = 1; index < intervals.length; index++) {\n    const element = intervals[index];\n    if (currentEnd.isAfter(element[0]) || currentEnd.isSame(element[0])) {\n      currentEnd = max(element[1], currentEnd);\n    } else {\n      res.push([currentStart, currentEnd]);\n      // next\n      currentStart = element[0];\n      currentEnd = element[1];\n    }\n    if (index === intervals.length - 1) {\n      res.push([currentStart, currentEnd]);\n    }\n  }\n  return res;\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/events/ScheduledEvents.tsx",["321","322","323","324","325","326","327","328","329","330"],"import React, {useEffect, useState} from 'react';\nimport {Switch, Route, Link, useLocation, Redirect} from 'react-router-dom';\nimport {DefaultButton} from '@fluentui/react';\nimport {useEvents} from '../EventsProvider';\nimport {days} from '../book/data';\nimport dayjs from 'dayjs';\nimport moment from 'moment';\nimport {SearchBoxSmallExample} from '../EventTypes';\nimport ScheduledEventsProvider, {\n  useScheduledEvents,\n} from '../../hooks/ScheduledEventsProvider';\nimport NavSidebar from '../NavSidebar';\nvar weekOfYear = require('dayjs/plugin/weekOfYear');\ndayjs.extend(weekOfYear);\n\nfunction EventCard() {\n  const [hovered, setHovered] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  return (\n    <div\n      className=\"border-primary border-solid border flex flex-row justify-between w-full h-24\"\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n    >\n      <div\n        className=\"my-2 p-4 flex flex-row justify-between\"\n        style={{width: 'calc(100% - 10px)'}}\n      >\n        <div className=\"w-1/2\">09:30 - 09:45</div>\n        <div className=\"w-1/2\">\n          <div>张三</div>\n          <div className=\"text-gray-500\">30 分钟约见</div>\n        </div>\n      </div>\n      <div className=\"h-full w-8\">\n        {hovered && (\n          <div className=\"cursor-pointer opacity-25 hover:opacity-100 h-full bg-red-300 gentle-flex\">\n            <i className=\"fas fa-expand-alt fa-sm\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction NextEventCard() {\n  const [hovered, setHovered] = useState(false);\n  return (\n    <div\n      className=\"border-red-300 border-solid border flex flex-row justify-between w-full h-24\"\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n    >\n      <div\n        className=\"my-2 p-4 flex flex-row justify-between\"\n        style={{width: 'calc(100% - 10px)'}}\n      >\n        <div className=\"w-1/2\">09:30 - 09:45</div>\n        <div className=\"w-1/2\">\n          <div>张三</div>\n          <div className=\"text-gray-500\">30 分钟约见</div>\n        </div>\n      </div>\n      <div className=\"h-full w-8\">\n        {hovered && (\n          <div className=\"cursor-pointer opacity-25 hover:opacity-100 h-full bg-red-300 gentle-flex\">\n            <i className=\"fas fa-expand-alt fa-sm\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction UpcomingScheduledEvents() {\n  const {scheduledEvents} = useScheduledEvents();\n  console.log('scheduledEvents', scheduledEvents);\n\n  return (\n    <div className=\"w-full flex flex-col\">\n      <ul>\n        <li className=\"px-6 py-3 border-b grid grid-cols-10 gap-4 hover:bg-gray-50 transition ease-in-out duration-150 text-sm\">\n          <div className=\"text-gray-700 col-span-2 lg:col-span-1\">\n            Thu, Feb 11\n          </div>\n          <div className=\"text-gray-700 col-span-4 lg:col-span-2\">\n            12:00 pm – 2:00 pm\n          </div>\n          <div className=\"col-span-4 lg:col-span-6 text-sm leading-5\">\n            <div className=\"pb-1 flex items-center\">\n              <div className=\"pr-2\">\n                <span className=\"inline-flex flex-shrink-0 items-center justify-center h-5 w-5  rounded-full text-white ring-2 ring-white bg-gray-500 select-none\">\n                  <span className=\"text-xxs font-medium leading-none\">YZ</span>\n                </span>\n              </div>\n              <a\n                href=\"/events/b3a6b143-5493-48d2-aefd-689570e22b5a\"\n                className=\"text-gray-900 font-bold mr-2 leading-5 hover:underline truncate transition ease-in-out duration-150\"\n              >\n                Chat with Yuanyuan\n              </a>\n            </div>\n            <div className=\"ml-7 text-gray-600 truncate\">\n              Yuanyuan Zhang and Yuanyuan Zhang\n            </div>\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default function ScheduledEvents() {\n  const {pathname} = useLocation();\n\n  return (\n    <div className=\"w-full flex flex-row\">\n      <NavSidebar />\n\n      <ScheduledEventsProvider>\n        <div className=\"h-full w-full flex flex-col\">\n          <div className=\"Header bg-gray-100\">\n            <div className=\"flex flex-row\">\n              <div className=\"gentle-flex py-1 w-24\">\n                <div className=\"font-bold\">日程</div>\n              </div>\n\n              {[\n                {url: '/events/upcoming', name: '待完成'},\n                {url: '/events/past', name: '已完成'},\n                {url: '/events/canceled', name: '已取消'},\n                // {url: '/events/all', name: '全部'},\n              ].map(({url, name}) => {\n                return (\n                  <div className=\"px-2 cursor-pointer\" key={url}>\n                    {pathname === url ? (\n                      <div className=\"gentle-flex py-1 w-24\">\n                        <span>{name}</span>\n                      </div>\n                    ) : (\n                      <Link to={url}>\n                        <span className=\"gentle-flex w-24 py-1 opacity-25 hover:opacity-100\">\n                          {name}\n                        </span>\n                      </Link>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"flex flex-row\">\n              <div className=\"gentle-flex py-1 w-24 opacity-25 hover:opacity-100 cursor-pointer\">\n                日历\n              </div>\n            </div>\n          </div>\n          <div className=\"h-full\">\n            <Switch>\n              <Route\n                path=\"/events/upcoming\"\n                component={UpcomingScheduledEvents}\n              />\n              <Route path=\"/events/past\" component={() => <div>past</div>} />\n              <Route\n                path=\"/events/canceled\"\n                component={() => <div>canceled</div>}\n              />\n              <Route path=\"/events/all\" component={() => <div>all</div>} />\n              <Route path=\"/events\">\n                <Redirect to=\"/events/upcoming\" />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </ScheduledEventsProvider>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/AppDataProvider.tsx",["331","332","333","334","335"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/utils.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/DatePicker.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/NavSidebar.tsx",["336"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api-hooks.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/constants.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventsProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkSettings.tsx",["337"],"import React from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport _ from 'lodash';\nimport {useSchedulingLink} from '../hooks/SchedulingLinkProvider';\nimport Select from 'react-select';\nimport {nanoid} from 'nanoid';\nimport {X} from '@geist-ui/react-icons';\nimport {Button, Input, Toggle} from '@geist-ui/react';\n\nfunction SettingSection(props: any) {\n  return (\n    <div className=\"border-primary border-b border-solid py-8\">\n      <div className=\"mx-auto w-128\">{props.children}</div>\n    </div>\n  );\n}\n\ninterface SectionTitleProps extends React.PropsWithChildren<any> {\n  title: string;\n}\n\nfunction SectionTitle(props: SectionTitleProps) {\n  return <div className=\"text-xl py-2\">{props.title}</div>;\n}\n\nfunction CalendarBindingSection() {\n  // const {calendars} = useAppData()\n  // const {calendar} = useSchedulingLink()\n\n  return (\n    <SettingSection>\n      <h2>日历</h2>\n      <div>新日程将同步到选择的日历</div>\n    </SettingSection>\n  );\n}\n\ninterface SchedulingLinkFieldConfiguration {\n  label: string;\n  required: boolean;\n  type: string;\n}\n\ninterface SchedulingLinkField extends SchedulingLinkFieldConfiguration {\n  id: string;\n}\n\nfunction FieldSection() {\n  const {fields, updateSchedulingLink} = useSchedulingLink();\n\n  const updateLabel = (id: string, value: string) => {\n    const clone: SchedulingLinkField[] = _.cloneDeep(fields);\n    const field = clone.find((field) => field.id === id);\n    if (field) {\n      field.label = value;\n      updateSchedulingLink({\n        fields: clone,\n      });\n    }\n  };\n\n  const updateRequired = (id: string, value: boolean) => {\n    const clone: SchedulingLinkField[] = _.cloneDeep(fields);\n    const field = clone.find((field) => field.id === id);\n    if (field) {\n      field.required = value;\n      updateSchedulingLink({\n        fields: clone,\n      });\n    }\n  };\n\n  const addField = () => {\n    const clone: SchedulingLinkField[] = _.cloneDeep(fields);\n    clone.push({\n      id: 'f' + String(_.random(100)),\n      label: 'new question',\n      required: false,\n      type: 'long_text',\n    });\n    updateSchedulingLink({\n      fields: clone,\n    });\n  };\n\n  const removeField = (id: string) => {\n    if (fields) {\n      updateSchedulingLink({\n        fields: fields.filter((field) => field.id !== id),\n      });\n    }\n  };\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'问题'} />\n      <div className=\"flex flex-col\">\n        {fields ? (\n          fields.map((field) => {\n            return (\n              <div\n                key={field.id}\n                className=\"flex flex-row py-2 justify-between \"\n              >\n                <Input\n                  size=\"large\"\n                  // className=\"border-primary border-solid border-2 rounded\"\n                  initialValue={field.label}\n                  onChange={(e) => {\n                    updateLabel(field.id, e.target.value);\n                  }}\n                />\n                <div className=\"flex flex-row\">\n                  <div className=\"mx-1\">\n                    <Button\n                      size={'small'}\n                      auto\n                      onClick={() => {\n                        updateRequired(field.id, !field.required);\n                      }}\n                    >\n                      {field.required ? '必填' : '可选'}\n                    </Button>\n                  </div>\n                  <div className=\"mx-1\">\n                    <Button\n                      size={'small'}\n                      auto\n                      onClick={() => {\n                        removeField(field.id);\n                      }}\n                    >\n                      删除\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        ) : (\n          <div>template</div>\n        )}\n        <div className=\"w-24 pt-4\">\n          <Button onClick={addField} size={'small'}>\n            添加\n          </Button>\n        </div>\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction BufferLimitSection() {\n  const {\n    bufferBefore,\n    bufferAfter,\n    limitBookingTime,\n    updateSchedulingLink,\n  } = useSchedulingLink();\n\n  const updateBufferBefore = (value: number) => {\n    updateSchedulingLink({\n      before_buffer_time: value,\n    });\n  };\n\n  const updateBufferAfter = (value: number) => {\n    updateSchedulingLink({\n      after_buffer_time: value,\n    });\n  };\n\n  const updateLimitBookingTime = (value: number) => {\n    updateSchedulingLink({\n      max_booking_time: value,\n    });\n  };\n\n  // const {bufferBefore, bufferAfter, updateBufferBefore, updateBufferAfter, limitBookingTime, updateLimitBookingTime, limitBookingFrequency, updateLimitBookingFrequency} = useSchedulingLink()\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'缓冲时间及限制'} />\n      <div className=\"flex flex-row pt-4\">\n        <div className=\"flex flex-col\">\n          <label>约见前</label>\n          <div className=\"flex flex-row items-center mt-2 py-1 pr-2\">\n            <input\n              className=\"border-primary border-solid border-2 rounded px-2 mr-2 w-16 focus:outline-none\"\n              defaultValue={bufferBefore}\n              type=\"number\"\n              onChange={(e) => {\n                updateBufferBefore(parseInt(e.target.value));\n              }}\n            />\n            <span>分钟</span>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col ml-4\">\n          <label>约见后</label>\n          <div className=\"flex flex-row items-center mt-2 py-1 pr-2\">\n            <input\n              className=\"border-primary border-solid border-2 rounded px-2 mr-2 w-16 focus:outline-none\"\n              defaultValue={bufferAfter}\n              type=\"number\"\n              onChange={(e) => {\n                updateBufferAfter(parseInt(e.target.value));\n              }}\n            />\n            <span className=\"\">分钟</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex flex-row pt-6\">\n        <div className=\"gentle-flex mr-2\">\n          <Toggle initialChecked={true} onChange={() => {}} />\n        </div>\n        <label>限制多少天内可以预约</label>\n      </div>\n      <div className=\"flex flex-row pt-4\">\n        <input\n          className=\"border-primary border-solid border-2 rounded py-1 px-2 w-16 focus:outline-none\"\n          defaultValue={limitBookingTime / 24 / 60}\n          type=\"number\"\n          onChange={(e) => {\n            updateLimitBookingTime(parseInt(e.target.value) * 24 * 60);\n          }}\n        />\n        <span className=\"gentle-flex ml-2\">\n          <label>天</label>\n        </span>\n      </div>\n    </SettingSection>\n  );\n}\n\nconst ReminderSection = React.memo(() => {\n  const {emailReminders, updateSchedulingLink} = useSchedulingLink();\n\n  const updateEmailReminderQuantity = (id: string, value: number) => {\n    const clone = _.cloneDeep(emailReminders);\n    const reminder = clone.find((r) => r.id === id);\n    if (reminder) {\n      reminder.quantity = value;\n      updateSchedulingLink({\n        email_reminders: clone,\n      });\n    }\n  };\n\n  const updateEmailReminderUnit = (id: string, value: string) => {\n    const clone = _.cloneDeep(emailReminders);\n    const reminder = clone.find((r) => r.id === id);\n    if (reminder) {\n      reminder.units = value;\n      updateSchedulingLink({\n        email_reminders: clone,\n      });\n    }\n  };\n\n  const add = () => {\n    if (emailReminders) {\n      const clone = _.cloneDeep(emailReminders);\n      clone.push({\n        id: nanoid(),\n        quantity: 30,\n        units: 'min',\n      });\n      updateSchedulingLink({\n        email_reminders: clone,\n      });\n    }\n  };\n\n  const remove = (id: string) => {\n    if (emailReminders) {\n      updateSchedulingLink({\n        email_reminders: emailReminders.filter((r) => r.id !== id),\n      });\n    }\n  };\n\n  console.log('reminder', emailReminders);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'提醒'} />\n      <div>\n        {emailReminders &&\n          emailReminders.map(({quantity, units, id}) => {\n            return (\n              <div className=\"flex flex-row justify-between py-2\">\n                <div key={id} className=\"flex flex-row \">\n                  <input\n                    className=\"border-primary border-solid border-2 rounded py-1 px-2 w-16 focus:outline-none\"\n                    defaultValue={quantity}\n                    type=\"number\"\n                    onChange={(e) => {\n                      updateEmailReminderQuantity(id, parseInt(e.target.value));\n                    }}\n                  />\n\n                  <Select\n                    className=\"ml-2 w-32\"\n                    options={[\n                      {\n                        label: 'minutes',\n                        value: 'min',\n                      },\n                      {\n                        label: 'hours',\n                        value: 'hour',\n                      },\n                      {\n                        label: 'days',\n                        value: 'day',\n                      },\n                    ]}\n                    defaultValue={{\n                      label: 'minutes',\n                      value: 'min',\n                    }}\n                    components={{\n                      IndicatorSeparator: null,\n                    }}\n                    onChange={(option) => {\n                      if (option) {\n                        updateEmailReminderUnit(id, option.value);\n                      }\n                    }}\n                  />\n                </div>\n                <div className=\"gentle-flex\">\n                  <Button\n                    size={'small'}\n                    auto\n                    onClick={() => {\n                      remove(id);\n                    }}\n                  >\n                    删除\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n      <div className=\"w-24 pt-4\">\n        <Button onClick={add} size={'small'}>\n          添加\n        </Button>\n      </div>\n    </SettingSection>\n  );\n});\n\nexport default function SchedulingLinkSettings() {\n  let {id} = useParams();\n  return (\n    <div className=\"border-primary border-l border-solid w-full h-full\">\n      <div className=\"Header\">\n        <Link\n          to={`/links/${id}`}\n          className=\"hover:bg-gray-100 focus:outline-none text-gray-600 hover:text-black gentle-flex w-10 h-10  rounded-full\"\n        >\n          <X />\n        </Link>\n      </div>\n\n      <div className=\"w-full flex flex-col\">\n        {/*<CalendarBindingSection />*/}\n        <FieldSection />\n        <BufferLimitSection />\n        <ReminderSection />\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Calendar.tsx",["338","339","340","341","342","343"],"import React, {useState} from 'react';\nimport FullCalendar, {\n  DateSelectArg,\n  DayHeaderContentArg,\n  EventApi,\n  EventClickArg,\n  EventContentArg,\n} from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport dayjs, {Dayjs} from 'dayjs';\nimport {\n  complementIntervals,\n  createEventId,\n  eliminateIntervals,\n  INITIAL_EVENTS,\n} from './event-utils';\nimport _ from 'lodash';\nimport zhLocale from '@fullcalendar/core/locales/zh-cn';\nimport {useSchedulingLink} from '../hooks/SchedulingLinkProvider';\nimport {dayConvertToEn} from '../utils';\nimport {EventInput} from '@fullcalendar/common';\n\nrequire('dayjs/locale/zh-cn');\nvar isToday = require('dayjs/plugin/isToday');\n\ndayjs.extend(isToday);\ndayjs.locale('zh-cn');\n\ninterface CalendarProps {\n  start: string;\n  end: string;\n  availabilityPresetsIntervals: any[];\n  availabilityOverrides: any[];\n  updateAvailabilityOverrides: (value: any) => any;\n}\n\ninterface CalendarAvailabilityControlProps {\n  handleSelectAllow: () => void;\n  handleSelectBlock: () => void;\n}\nfunction CalendarAvailabilityControl(props: CalendarAvailabilityControlProps) {\n  const {handleSelectAllow, handleSelectBlock} = props;\n  return (\n    <div\n      className=\"relative pb-4 bottom-0 w-full flex justify-center\"\n      style={{top: '-120px'}}\n    >\n      <div className=\"relative transition-all transform rounded-lg shadow-floating bg-white z-10\">\n        <div className=\"flex p-1\">\n          <button\n            type=\"button\"\n            onClick={handleSelectAllow}\n            className=\"w-32 p-3 rounded-md flex flex-col items-center text-green-600 font-medium text-sm bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150\"\n          >\n            <div className=\"-ml-px pb-1 flex items-center justify-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                className=\"feather feather-plus-square\"\n              >\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line\n                  x1=\"12\"\n                  y1=\"8\"\n                  x2=\"12\"\n                  y2=\"16\"\n                  stroke=\"currentColor\"\n                ></line>\n                <line\n                  x1=\"8\"\n                  y1=\"12\"\n                  x2=\"16\"\n                  y2=\"12\"\n                  stroke=\"currentColor\"\n                ></line>\n              </svg>\n            </div>\n            <div>Allow</div>\n          </button>\n          <button\n            type=\"button\"\n            className=\"w-32 p-3 rounded-md flex flex-col items-center text-green-600 font-medium text-sm bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150\"\n          >\n            <div className=\"-ml-px pb-1 flex items-center justify-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                className=\"feather feather-plus-square\"\n              >\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\" stroke=\"#FFF\"></line>\n                <line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\" stroke=\"#FFF\"></line>\n              </svg>\n            </div>\n            <div>Force Allow</div>\n          </button>\n          <button\n            type=\"button\"\n            onClick={handleSelectBlock}\n            className=\"w-32 p-3 rounded-md flex flex-col items-center text-red-600 font-medium text-sm bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150\"\n          >\n            <div className=\"-ml-px pb-1 flex items-center justify-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                className=\"feather feather-x-square\"\n              >\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" stroke=\"#FFF\"></line>\n                <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" stroke=\"#FFF\"></line>\n              </svg>\n            </div>\n            <div>Block</div>\n          </button>\n        </div>\n        {/*  <button*/}\n        {/*    className=\"absolute flex items-center justify-center w-8 h-8 rounded-full shadow-floating bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150 border-2 border-white text-gray-500\"*/}\n        {/*    style={{right: '-12px; top: -12px'}}*/}\n        {/*  >*/}\n        {/*    <svg*/}\n        {/*      xmlns=\"http://www.w3.org/2000/svg\"*/}\n        {/*      width=\"16\"*/}\n        {/*      height=\"16\"*/}\n        {/*      viewBox=\"0 0 24 24\"*/}\n        {/*      fill=\"none\"*/}\n        {/*      stroke=\"currentColor\"*/}\n        {/*      stroke-width=\"2\"*/}\n        {/*      stroke-linecap=\"round\"*/}\n        {/*      stroke-linejoin=\"round\"*/}\n        {/*      className=\"feather feather-x\"*/}\n        {/*    >*/}\n        {/*      <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>*/}\n        {/*      <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>*/}\n        {/*    </svg>*/}\n        {/*  </button>*/}\n      </div>\n    </div>\n  );\n}\n\n/**\n * display events, presets & overrides\n *\n *\n * @param props\n * @constructor\n */\nfunction Calendar(props: CalendarProps) {\n  // read availability from scheduling link\n  // presets, id => value\n  const {\n    availabilityPresetsIntervals,\n    availabilityOverrides,\n    updateAvailabilityOverrides,\n  } = props;\n\n  const [selectInfo, setSelectInfo] = useState<DateSelectArg | null>(null);\n\n  const handleWeekendsToggle = () => {\n    // this.setState({\n    //   weekendsVisible: !weekendsVisible\n    // })\n  };\n\n  const handleSelectAllow = () => {\n    if (selectInfo) {\n      console.log('handleAllowSelect', selectInfo);\n      const copy = _.cloneDeep(availabilityOverrides);\n      copy.push({\n        startAt: selectInfo.startStr,\n        endAt: selectInfo.endStr,\n        type: 'allow',\n      });\n      updateAvailabilityOverrides(copy);\n    }\n  };\n\n  const handleSelectBlock = () => {\n    if (selectInfo) {\n      console.log('handleSelectBlock', selectInfo);\n      const copy = _.cloneDeep(availabilityOverrides);\n      copy.push({\n        startAt: selectInfo.startStr,\n        endAt: selectInfo.endStr,\n        type: 'block',\n      });\n      updateAvailabilityOverrides(copy);\n    }\n  };\n\n  const handleDateSelect = (selectInfo: DateSelectArg) => {\n    // let title = prompt('Please enter a new title for your event')\n    let title = 'new event';\n    let calendarApi = selectInfo.view.calendar;\n\n    // calendarApi.unselect() // clear date selection\n\n    console.log('select', selectInfo);\n\n    setSelectInfo(selectInfo);\n\n    // console.log('select', selectInfo.endStr, dayjs(selectInfo.end).subtract(15, 'minutes').toISOString())\n\n    // if (title) {\n    //   calendarApi.addEvent({\n    //     id: createEventId(),\n    //     title,\n    //     start: selectInfo.startStr,\n    //     end: selectInfo.endStr,\n    //     // end: dayjs(selectInfo.end).subtract(15, 'minutes').toISOString(),\n    //     allDay: selectInfo.allDay\n    //   })\n    // }\n  };\n\n  const handleEventClick = (clickInfo: EventClickArg) => {\n    // if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n    //     clickInfo.event.remove()\n    // }\n  };\n\n  const handleEvents = (events: EventApi[]) => {\n    // this.setState({\n    //   currentEvents: events\n    // })\n  };\n\n  const renderDayHeaderContent = (props: DayHeaderContentArg) => {\n    const date = dayjs(props.date);\n    return (\n      <div>\n        {\n          // @ts-ignore\n          date.isToday() ? (\n            <>\n              <div className=\"text-xs font-medium text-gray-600\">\n                {date.format('ddd')}\n              </div>\n              <div className=\"mb-2 flex justify-center\">\n                <div className=\"flex items-center justify-center w-10 h-10 rounded-full text-2xl bg-blue-500 text-white font-bold\">\n                  {date.format('D')}\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"text-xs font-medium text-gray-600\">\n                {date.format('ddd')}\n              </div>\n              <div className=\"mb-2 flex justify-center\">\n                <div className=\"flex items-center justify-center w-10 h-10 rounded-full text-2xl text-gray-700 font-medium\">\n                  {date.format('D')}\n                </div>\n              </div>\n            </>\n          )\n        }\n      </div>\n    );\n  };\n\n  /**\n   * availabilityOverrides\n   * availabilityPresetsIntervals\n   */\n  const getBackgroundEvents = (\n    arg: {\n      start: Date;\n      end: Date;\n      startStr: string;\n      endStr: string;\n      timeZone: string;\n    },\n    successCallback: (events: EventInput[]) => void,\n    failureCallback: (error: any) => any\n  ) => {\n    const startDate = dayjs(arg.start);\n    const endDate = dayjs(arg.end);\n\n    const allowOverrides = availabilityOverrides.filter(\n      (e: any) => e.type === 'allow'\n    );\n    const blockOverrides = availabilityOverrides.filter(\n      (e: any) => e.type === 'block'\n    );\n\n    const intervals: Dayjs[][] = [];\n    let date = startDate.clone();\n    while (!date.isSame(endDate)) {\n      const day = dayConvertToEn(date.format('dd').toLowerCase());\n      availabilityPresetsIntervals.forEach((settings) => {\n        if (settings.byday.findIndex((d: string) => d === day) > -1) {\n          let startTime = date.add(settings.startTime, 'minute');\n          let endTime = date.add(settings.endTime, 'minute');\n          intervals.push([startTime, endTime]);\n        }\n      });\n      date = date.add(1, 'day');\n    }\n\n    // overrides intervals\n    // push allow overrides\n    allowOverrides.forEach((override) => {\n      intervals.push([dayjs(override.startAt), dayjs(override.endAt)]);\n    });\n    const sortedIntervals = _.sortBy(intervals, (e) => e[0].valueOf());\n    const eliminatedIntervals = eliminateIntervals(sortedIntervals);\n\n    const complementedIntervals = complementIntervals(\n      startDate,\n      endDate,\n      eliminatedIntervals\n    );\n    // push block overrides\n    blockOverrides.forEach((override) => {\n      complementedIntervals.push([\n        dayjs(override.startAt),\n        dayjs(override.endAt),\n      ]);\n    });\n    complementedIntervals.push([startDate, dayjs()]);\n    const sortedIntervals2 = _.sortBy(complementedIntervals, (e) =>\n      e[0].valueOf()\n    );\n    const eliminatedIntervals2 = eliminateIntervals(sortedIntervals2);\n\n    successCallback(\n      eliminatedIntervals2.map((interval) => {\n        return {\n          id: createEventId(),\n          start: interval[0].toISOString(),\n          end: interval[1].toISOString(),\n          className: 'sc-unavailable',\n          display: 'background',\n        };\n      })\n    );\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"\">\n        <FullCalendar\n          height=\"1200px\"\n          contentHeight=\"900px\"\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          headerToolbar={{\n            left: 'title',\n            // center: '',\n            right: 'today prev,next',\n          }}\n          weekNumberCalculation=\"ISO\"\n          initialView=\"timeGridWeek\"\n          slotDuration=\"00:30:00\"\n          snapDuration=\"00:15:00\"\n          slotLabelInterval=\"01:00\"\n          slotMinTime=\"06:00:00\"\n          dayHeaderContent={renderDayHeaderContent}\n          editable={true}\n          selectable={true}\n          allDaySlot={false}\n          // dayMaxEvents={true}\n          weekends={true}\n          events={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n          eventSources={[\n            {\n              events: getBackgroundEvents,\n              display: 'background',\n            },\n          ]}\n          select={handleDateSelect}\n          eventContent={renderEventContent} // custom render function\n          // eventClick={this.handleEventClick}\n          // eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n          dateClick={function (info) {\n            // alert('clicked ' + info.dateStr);\n          }}\n          nowIndicator={true}\n          /* you can update a remote database when these fire:\n                    eventAdd={function(){}}\n                    eventChange={function(){}}\n                    eventRemove={function(){}}\n                    */\n          locale={zhLocale}\n        />\n      </div>\n\n      <CalendarAvailabilityControl\n        handleSelectAllow={handleSelectAllow}\n        handleSelectBlock={handleSelectBlock}\n      />\n    </div>\n  );\n}\n\nfunction renderEventContent(eventContent: EventContentArg) {\n  return (\n    <>\n      {/* <b>{eventContent.timeText}</b>\n      <i>{eventContent.event.title}</i> */}\n    </>\n  );\n}\n\nfunction CalendarWrapper() {\n  // read availability from scheduling link\n  // presets, id => value\n  const {\n    availabilityPresetsIntervals,\n    availabilityOverrides,\n    updateAvailabilityOverrides,\n  } = useSchedulingLink();\n  return (\n    <Calendar\n      start={''}\n      end={''}\n      availabilityOverrides={availabilityOverrides}\n      availabilityPresetsIntervals={availabilityPresetsIntervals}\n      updateAvailabilityOverrides={updateAvailabilityOverrides}\n    />\n  );\n}\n\nexport default CalendarWrapper;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/events/EventLocationSelect.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/book/TimeOption.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/SchedulingLinkProvider.tsx",["344","345"],"import React, {useContext, useEffect, useState} from 'react';\nimport useSWR, {mutate} from 'swr';\nimport {useAppData} from './AppDataProvider';\nimport {useLink} from '../api-hooks';\nimport * as API from '../api';\nimport _ from 'lodash';\n\nexport const SchedulingLinkContext = React.createContext<{\n  slug: string;\n  name: string;\n  description: string;\n  durations: string[];\n  location: string;\n  availability: any;\n  availabilityPresets: string[];\n  availabilityPresetsIntervals: any[];\n  availabilityOverrides: any[];\n  fields: any[];\n  bufferBefore: number;\n  bufferAfter: number;\n  limitBookingTime: number;\n  emailReminders: any[];\n  organizer: any;\n\n  updateSlug: (value: string) => Promise<any>;\n  updateName: (value: string) => Promise<any>;\n  updateDescription: (value: string) => Promise<any>;\n  updateDurations: (value: number[]) => Promise<any>;\n  updateLocation: (value: string) => Promise<any>;\n  updateAvailability: (value: any) => Promise<any>;\n  updateAvailabilityPresets: (value: string[] | null) => Promise<any>;\n  updateAvailabilityOverrides: (value: any) => Promise<any>;\n\n  updateSchedulingLink: (value: any) => Promise<any>;\n}>({\n  slug: '',\n  name: '',\n  description: '',\n  durations: [''],\n  location: '',\n  availability: {},\n  availabilityPresets: [],\n  availabilityPresetsIntervals: [],\n  availabilityOverrides: [],\n  fields: [],\n  bufferBefore: 0,\n  bufferAfter: 0,\n  limitBookingTime: 0,\n  emailReminders: [],\n  organizer: {},\n\n  updateSlug: (value: string) => Promise.resolve({}),\n  updateName: (value: string) => Promise.resolve({}),\n  updateDescription: (value: string) => Promise.resolve({}),\n  updateDurations: (value: number[]) => Promise.resolve({}),\n  updateLocation: (value: string) => Promise.resolve({}),\n  updateAvailability: (value: any) => Promise.resolve({}),\n  updateAvailabilityPresets: (value: string[] | null) => Promise.resolve({}),\n  updateAvailabilityOverrides: (value: any) => Promise.resolve({}),\n\n  updateSchedulingLink: (value: any) => Promise.resolve({}),\n});\n\nexport const useSchedulingLink = () => useContext(SchedulingLinkContext);\n\ntype Props = React.PropsWithChildren<{\n  linkId: string;\n}>;\n\nconst SchedulingLinkProvider = (props: Props) => {\n  const {data: link, isLoading, isError} = useLink(props.linkId);\n  const {settings, getAvailabilityPresetsById} = useAppData();\n  const [presetsIntervals, setPresetsIntervals] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (link && link.organizer && link.organizer.availability) {\n      setPresetsIntervals(\n        getAvailabilityPresetsById(link.organizer.availability.presets)\n      );\n    }\n  }, [settings, link]);\n\n  const [overrides, setOverrides] = useState<any[]>([\n    {\n      startAt: '2021-01-19T02:00:00Z',\n      endAt: '2021-01-19T07:00:00Z',\n      type: 'block',\n    },\n    {\n      startAt: '2021-01-18T02:00:00Z',\n      endAt: '2021-01-18T08:00:00Z',\n      type: 'block',\n    },\n    {\n      startAt: '2021-01-23T02:00:00Z',\n      endAt: '2021-01-23T08:00:00Z',\n      type: 'allow',\n    },\n  ]);\n\n  if (isLoading) return <div>Loading</div>;\n  if (isError) return <div>Error</div>;\n\n  const _update = (newValue: any) => {\n    return mutate(\n      `/api/scheduling_links/${props.linkId}`,\n      {data: {...link, ...newValue}},\n      false\n    );\n  };\n\n  const _revalidate = () => {\n    mutate(`/api/scheduling_links/${props.linkId}`);\n    mutate('/api/scheduling_links');\n  };\n\n  const updateSlug = async (value: string) => {\n    _update({url: value});\n    await API.updateSchedulingLink(link.id, {url: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateName = async (value: string) => {\n    _update({name: value});\n    await API.updateSchedulingLink(link.id, {name: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateDescription = async (value: string) => {\n    _update({description: value});\n    await API.updateSchedulingLink(link.id, {description: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateDurations = async (value: number[]) => {\n    _update({durations: value});\n    await API.updateSchedulingLink(link.id, {durations: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateLocation = async (value: string) => {\n    _update({location: value});\n    await API.updateSchedulingLink(link.id, {location: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateAvailability = (value: any) => {\n    _update({description: value});\n    // await API.updateSchedulingLinkDescription\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateAvailabilityPresets = async (value: string[] | null) => {\n    if (link.organizer) {\n      const clone = _.cloneDeep(link.organizer);\n      return updateSchedulingLink({\n        organizer: {\n          ...clone,\n          availability: {\n            ...clone.availability,\n            presets: value,\n          },\n        },\n      });\n    } else {\n      return updateSchedulingLink({\n        organizer: {\n          availability: {\n            presets: value,\n          },\n        },\n      });\n    }\n  };\n\n  const updateAvailabilityOverrides = (value: any) => {\n    setOverrides(value);\n    return Promise.resolve();\n  };\n\n  const updateSchedulingLink = async (updates: any) => {\n    _update(updates);\n    await API.updateSchedulingLink(link.id, updates);\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  return (\n    <SchedulingLinkContext.Provider\n      value={{\n        slug: link.url,\n        name: link.name,\n        description: link.description,\n        durations: link.durations,\n        location: link.location,\n        availability: link.organizer?.availability,\n        availabilityPresets: link.organizer?.availability?.presets,\n        availabilityPresetsIntervals: presetsIntervals,\n        availabilityOverrides: overrides,\n        fields: link.fields,\n        bufferBefore: link.before_buffer_time,\n        bufferAfter: link.after_buffer_time,\n        limitBookingTime: link.max_booking_time,\n        emailReminders: link.email_reminders,\n        organizer: {\n          id: '',\n          avatarUrl:\n            'https://secure.gravatar.com/avatar/fcb9bbfe7fa822090dce8a194ed9730d?s=256&d=404',\n          displayName: 'Yuanyuan Zhang',\n          availability: {\n            mode: 'ranked',\n            overrides: [],\n            presets: ['1ac33b81-c2cc-43be-90e5-2cd25685bfd8'],\n            recurringIntervals: [],\n          },\n        },\n\n        updateSlug,\n        updateName,\n        updateDescription,\n        updateDurations,\n        updateLocation,\n        updateAvailability,\n        updateAvailabilityPresets,\n        updateAvailabilityOverrides,\n\n        updateSchedulingLink,\n      }}\n    >\n      {props.children}\n    </SchedulingLinkContext.Provider>\n  );\n};\n\nexport default SchedulingLinkProvider;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkCard.tsx",["346","347","348","349","350"],"import React, {useEffect} from 'react';\n\nimport {\n  Card,\n  ICardTokens,\n  ICardSectionStyles,\n  ICardSectionTokens,\n} from '@fluentui/react-cards';\nimport {Link} from 'react-router-dom';\n\nexport default function SchedulingLinkCard(props: any) {\n  const {schedulingLink} = props;\n  const {id} = schedulingLink;\n\n  const footerCardSectionTokens: ICardSectionTokens = {\n    padding: '12px 0px 0px',\n  };\n  return (\n    <div>\n      <Link to={`/links/${id}`}>\n        <div className=\"h-32 group cursor-pointer rounded-lg p-4 border border-gray-200 hover:bg-light-blue-500 hover:border-transparent hover:shadow-lg\">\n          <dl className=\"grid sm:block lg:grid xl:block grid-cols-2 grid-rows-2 items-center\">\n            <div className=\"pb-5\">\n              <dt className=\"sr-only\">Title</dt>\n              <dd className=\"leading-6 font-medium text-black group-hover:text-white\">\n                {schedulingLink?.name}\n              </dd>\n            </div>\n            <div>{schedulingLink?.description}</div>\n          </dl>\n        </div>\n      </Link>\n    </div>\n  );\n}\n",["351","352"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/utils.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/const.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/AuthProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Register.tsx",["353","354","355"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Login.tsx",["356","357","358","359"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordReset.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/EmailVerification.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/RequestPasswordReset.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordResetRequested.tsx",[],{"ruleId":"360","severity":1,"message":"361","line":48,"column":1,"nodeType":"362","endLine":51,"endColumn":3},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","severity":1,"message":"368","line":6,"column":9,"nodeType":"369","messageId":"370","endLine":6,"endColumn":15},{"ruleId":"367","severity":1,"message":"371","line":1169,"column":9,"nodeType":"369","messageId":"370","endLine":1169,"endColumn":12},{"ruleId":"367","severity":1,"message":"372","line":1,"column":16,"nodeType":"369","messageId":"370","endLine":1,"endColumn":25},{"ruleId":"367","severity":1,"message":"373","line":2,"column":8,"nodeType":"369","messageId":"370","endLine":2,"endColumn":14},{"ruleId":"367","severity":1,"message":"374","line":4,"column":3,"nodeType":"369","messageId":"370","endLine":4,"endColumn":14},{"ruleId":"367","severity":1,"message":"375","line":8,"column":3,"nodeType":"369","messageId":"370","endLine":8,"endColumn":7},{"ruleId":"367","severity":1,"message":"376","line":10,"column":20,"nodeType":"369","messageId":"370","endLine":10,"endColumn":26},{"ruleId":"367","severity":1,"message":"372","line":1,"column":16,"nodeType":"369","messageId":"370","endLine":1,"endColumn":25},{"ruleId":"367","severity":1,"message":"377","line":1,"column":27,"nodeType":"369","messageId":"370","endLine":1,"endColumn":35},{"ruleId":"367","severity":1,"message":"374","line":3,"column":3,"nodeType":"369","messageId":"370","endLine":3,"endColumn":14},{"ruleId":"367","severity":1,"message":"378","line":4,"column":3,"nodeType":"369","messageId":"370","endLine":4,"endColumn":9},{"ruleId":"367","severity":1,"message":"379","line":5,"column":3,"nodeType":"369","messageId":"370","endLine":5,"endColumn":11},{"ruleId":"367","severity":1,"message":"380","line":6,"column":3,"nodeType":"369","messageId":"370","endLine":6,"endColumn":8},{"ruleId":"367","severity":1,"message":"381","line":8,"column":3,"nodeType":"369","messageId":"370","endLine":8,"endColumn":22},{"ruleId":"382","severity":1,"message":"383","line":16,"column":11,"nodeType":"384","endLine":16,"endColumn":94},{"ruleId":"382","severity":1,"message":"383","line":32,"column":13,"nodeType":"384","endLine":32,"endColumn":68},{"ruleId":"382","severity":1,"message":"383","line":33,"column":13,"nodeType":"384","endLine":33,"endColumn":68},{"ruleId":"382","severity":1,"message":"383","line":34,"column":13,"nodeType":"384","endLine":34,"endColumn":68},{"ruleId":"382","severity":1,"message":"383","line":35,"column":13,"nodeType":"384","endLine":35,"endColumn":68},{"ruleId":"382","severity":1,"message":"383","line":36,"column":13,"nodeType":"384","endLine":36,"endColumn":68},{"ruleId":"382","severity":1,"message":"383","line":256,"column":17,"nodeType":"384","endLine":256,"endColumn":76},{"ruleId":"382","severity":1,"message":"383","line":298,"column":17,"nodeType":"384","endLine":298,"endColumn":76},{"ruleId":"382","severity":1,"message":"383","line":339,"column":17,"nodeType":"384","endLine":339,"endColumn":76},{"ruleId":"382","severity":1,"message":"383","line":407,"column":11,"nodeType":"384","endLine":407,"endColumn":113},{"ruleId":"382","severity":1,"message":"383","line":434,"column":13,"nodeType":"384","endLine":434,"endColumn":42},{"ruleId":"382","severity":1,"message":"383","line":446,"column":13,"nodeType":"384","endLine":446,"endColumn":47},{"ruleId":"382","severity":1,"message":"383","line":458,"column":13,"nodeType":"384","endLine":458,"endColumn":47},{"ruleId":"382","severity":1,"message":"383","line":472,"column":13,"nodeType":"384","endLine":472,"endColumn":47},{"ruleId":"367","severity":1,"message":"372","line":1,"column":16,"nodeType":"369","messageId":"370","endLine":1,"endColumn":25},{"ruleId":"367","severity":1,"message":"377","line":1,"column":27,"nodeType":"369","messageId":"370","endLine":1,"endColumn":35},{"ruleId":"367","severity":1,"message":"385","line":3,"column":23,"nodeType":"369","messageId":"370","endLine":3,"endColumn":30},{"ruleId":"367","severity":1,"message":"386","line":1,"column":36,"nodeType":"369","messageId":"370","endLine":1,"endColumn":45},{"ruleId":"367","severity":1,"message":"387","line":7,"column":3,"nodeType":"369","messageId":"370","endLine":7,"endColumn":16},{"ruleId":"367","severity":1,"message":"388","line":17,"column":3,"nodeType":"369","messageId":"370","endLine":17,"endColumn":21},{"ruleId":"367","severity":1,"message":"389","line":18,"column":3,"nodeType":"369","messageId":"370","endLine":18,"endColumn":17},{"ruleId":"367","severity":1,"message":"390","line":22,"column":24,"nodeType":"369","messageId":"370","endLine":22,"endColumn":28},{"ruleId":"367","severity":1,"message":"391","line":25,"column":9,"nodeType":"369","messageId":"370","endLine":25,"endColumn":27},{"ruleId":"367","severity":1,"message":"392","line":25,"column":29,"nodeType":"369","messageId":"370","endLine":25,"endColumn":43},{"ruleId":"367","severity":1,"message":"393","line":27,"column":8,"nodeType":"369","messageId":"370","endLine":27,"endColumn":9},{"ruleId":"367","severity":1,"message":"394","line":104,"column":5,"nodeType":"369","messageId":"370","endLine":104,"endColumn":9},{"ruleId":"367","severity":1,"message":"395","line":105,"column":5,"nodeType":"369","messageId":"370","endLine":105,"endColumn":17},{"ruleId":"367","severity":1,"message":"396","line":108,"column":5,"nodeType":"369","messageId":"370","endLine":108,"endColumn":17},{"ruleId":"367","severity":1,"message":"397","line":110,"column":5,"nodeType":"369","messageId":"370","endLine":110,"endColumn":15},{"ruleId":"367","severity":1,"message":"398","line":304,"column":9,"nodeType":"369","messageId":"370","endLine":304,"endColumn":20},{"ruleId":"367","severity":1,"message":"399","line":9,"column":8,"nodeType":"369","messageId":"370","endLine":9,"endColumn":15},{"ruleId":"367","severity":1,"message":"400","line":19,"column":11,"nodeType":"369","messageId":"370","endLine":19,"endColumn":20},{"ruleId":"367","severity":1,"message":"401","line":21,"column":3,"nodeType":"369","messageId":"370","endLine":21,"endColumn":11},{"ruleId":"367","severity":1,"message":"402","line":214,"column":5,"nodeType":"369","messageId":"370","endLine":214,"endColumn":14},{"ruleId":"403","severity":1,"message":"404","line":276,"column":37,"nodeType":"405","messageId":"406","endLine":276,"endColumn":39},{"ruleId":"367","severity":1,"message":"407","line":425,"column":10,"nodeType":"369","messageId":"370","endLine":425,"endColumn":25},{"ruleId":"367","severity":1,"message":"408","line":2,"column":9,"nodeType":"369","messageId":"370","endLine":2,"endColumn":19},{"ruleId":"367","severity":1,"message":"374","line":2,"column":21,"nodeType":"369","messageId":"370","endLine":2,"endColumn":32},{"ruleId":"409","severity":1,"message":"410","line":9,"column":3,"nodeType":"411","messageId":"412","endLine":9,"endColumn":57,"fix":"413"},{"ruleId":"367","severity":1,"message":"414","line":12,"column":9,"nodeType":"369","messageId":"370","endLine":12,"endColumn":13},{"ruleId":"415","severity":1,"message":"416","line":187,"column":6,"nodeType":"417","endLine":187,"endColumn":8,"suggestions":"418"},{"ruleId":"415","severity":1,"message":"419","line":193,"column":6,"nodeType":"417","endLine":193,"endColumn":32,"suggestions":"420"},{"ruleId":"367","severity":1,"message":"421","line":4,"column":8,"nodeType":"369","messageId":"370","endLine":4,"endColumn":17},{"ruleId":"367","severity":1,"message":"389","line":15,"column":3,"nodeType":"369","messageId":"370","endLine":15,"endColumn":17},{"ruleId":"367","severity":1,"message":"422","line":18,"column":17,"nodeType":"369","messageId":"370","endLine":18,"endColumn":25},{"ruleId":"367","severity":1,"message":"423","line":18,"column":27,"nodeType":"369","messageId":"370","endLine":18,"endColumn":32},{"ruleId":"367","severity":1,"message":"424","line":28,"column":7,"nodeType":"369","messageId":"370","endLine":28,"endColumn":18},{"ruleId":"425","severity":1,"message":"426","line":142,"column":44,"nodeType":"405","messageId":"427","endLine":148,"endColumn":8},{"ruleId":"428","severity":1,"message":"429","line":183,"column":57,"nodeType":"430","messageId":"431","endLine":183,"endColumn":59},{"ruleId":"367","severity":1,"message":"391","line":6,"column":3,"nodeType":"369","messageId":"370","endLine":6,"endColumn":21},{"ruleId":"367","severity":1,"message":"432","line":10,"column":8,"nodeType":"369","messageId":"370","endLine":10,"endColumn":13},{"ruleId":"367","severity":1,"message":"433","line":224,"column":10,"nodeType":"369","messageId":"370","endLine":224,"endColumn":24},{"ruleId":"367","severity":1,"message":"434","line":225,"column":10,"nodeType":"369","messageId":"370","endLine":225,"endColumn":17},{"ruleId":"367","severity":1,"message":"435","line":225,"column":19,"nodeType":"369","messageId":"370","endLine":225,"endColumn":27},{"ruleId":"367","severity":1,"message":"436","line":225,"column":29,"nodeType":"369","messageId":"370","endLine":225,"endColumn":46},{"ruleId":"367","severity":1,"message":"437","line":225,"column":48,"nodeType":"369","messageId":"370","endLine":225,"endColumn":58},{"ruleId":"367","severity":1,"message":"438","line":227,"column":10,"nodeType":"369","messageId":"370","endLine":227,"endColumn":17},{"ruleId":"367","severity":1,"message":"439","line":227,"column":19,"nodeType":"369","messageId":"370","endLine":227,"endColumn":29},{"ruleId":"367","severity":1,"message":"435","line":231,"column":19,"nodeType":"369","messageId":"370","endLine":231,"endColumn":27},{"ruleId":"367","severity":1,"message":"436","line":231,"column":29,"nodeType":"369","messageId":"370","endLine":231,"endColumn":46},{"ruleId":"367","severity":1,"message":"437","line":231,"column":48,"nodeType":"369","messageId":"370","endLine":231,"endColumn":58},{"ruleId":"367","severity":1,"message":"438","line":233,"column":10,"nodeType":"369","messageId":"370","endLine":233,"endColumn":17},{"ruleId":"367","severity":1,"message":"439","line":233,"column":19,"nodeType":"369","messageId":"370","endLine":233,"endColumn":29},{"ruleId":"367","severity":1,"message":"435","line":244,"column":19,"nodeType":"369","messageId":"370","endLine":244,"endColumn":27},{"ruleId":"367","severity":1,"message":"437","line":244,"column":48,"nodeType":"369","messageId":"370","endLine":244,"endColumn":58},{"ruleId":"367","severity":1,"message":"434","line":263,"column":10,"nodeType":"369","messageId":"370","endLine":263,"endColumn":17},{"ruleId":"367","severity":1,"message":"435","line":263,"column":19,"nodeType":"369","messageId":"370","endLine":263,"endColumn":27},{"ruleId":"367","severity":1,"message":"436","line":263,"column":29,"nodeType":"369","messageId":"370","endLine":263,"endColumn":46},{"ruleId":"367","severity":1,"message":"437","line":263,"column":48,"nodeType":"369","messageId":"370","endLine":263,"endColumn":58},{"ruleId":"367","severity":1,"message":"440","line":20,"column":10,"nodeType":"369","messageId":"370","endLine":20,"endColumn":15},{"ruleId":"367","severity":1,"message":"441","line":21,"column":10,"nodeType":"369","messageId":"370","endLine":21,"endColumn":17},{"ruleId":"367","severity":1,"message":"442","line":25,"column":23,"nodeType":"369","messageId":"370","endLine":25,"endColumn":35},{"ruleId":"415","severity":1,"message":"443","line":129,"column":6,"nodeType":"417","endLine":129,"endColumn":8,"suggestions":"444"},{"ruleId":"367","severity":1,"message":"445","line":2,"column":9,"nodeType":"369","messageId":"370","endLine":2,"endColumn":16},{"ruleId":"367","severity":1,"message":"446","line":4,"column":3,"nodeType":"369","messageId":"370","endLine":4,"endColumn":15},{"ruleId":"367","severity":1,"message":"447","line":5,"column":3,"nodeType":"369","messageId":"370","endLine":5,"endColumn":10},{"ruleId":"367","severity":1,"message":"448","line":10,"column":9,"nodeType":"369","messageId":"370","endLine":10,"endColumn":26},{"ruleId":"367","severity":1,"message":"449","line":11,"column":16,"nodeType":"369","messageId":"370","endLine":11,"endColumn":21},{"ruleId":"415","severity":1,"message":"450","line":21,"column":6,"nodeType":"417","endLine":21,"endColumn":8,"suggestions":"451"},{"ruleId":"367","severity":1,"message":"452","line":5,"column":5,"nodeType":"369","messageId":"370","endLine":5,"endColumn":13},{"ruleId":"453","severity":1,"message":"454","line":10,"column":25,"nodeType":"430","messageId":"455","endLine":10,"endColumn":26},{"ruleId":"453","severity":1,"message":"454","line":11,"column":23,"nodeType":"430","messageId":"455","endLine":11,"endColumn":24},{"ruleId":"367","severity":1,"message":"372","line":1,"column":16,"nodeType":"369","messageId":"370","endLine":1,"endColumn":25},{"ruleId":"367","severity":1,"message":"456","line":3,"column":9,"nodeType":"369","messageId":"370","endLine":3,"endColumn":22},{"ruleId":"367","severity":1,"message":"457","line":4,"column":9,"nodeType":"369","messageId":"370","endLine":4,"endColumn":18},{"ruleId":"367","severity":1,"message":"414","line":5,"column":9,"nodeType":"369","messageId":"370","endLine":5,"endColumn":13},{"ruleId":"367","severity":1,"message":"458","line":7,"column":8,"nodeType":"369","messageId":"370","endLine":7,"endColumn":14},{"ruleId":"367","severity":1,"message":"459","line":8,"column":9,"nodeType":"369","messageId":"370","endLine":8,"endColumn":30},{"ruleId":"367","severity":1,"message":"460","line":16,"column":10,"nodeType":"369","messageId":"370","endLine":16,"endColumn":19},{"ruleId":"367","severity":1,"message":"461","line":18,"column":10,"nodeType":"369","messageId":"370","endLine":18,"endColumn":18},{"ruleId":"367","severity":1,"message":"462","line":18,"column":20,"nodeType":"369","messageId":"370","endLine":18,"endColumn":31},{"ruleId":"367","severity":1,"message":"463","line":46,"column":10,"nodeType":"369","messageId":"370","endLine":46,"endColumn":23},{"ruleId":"367","severity":1,"message":"372","line":1,"column":28,"nodeType":"369","messageId":"370","endLine":1,"endColumn":37},{"ruleId":"367","severity":1,"message":"464","line":3,"column":8,"nodeType":"369","messageId":"370","endLine":3,"endColumn":14},{"ruleId":"367","severity":1,"message":"465","line":123,"column":9,"nodeType":"369","messageId":"370","endLine":123,"endColumn":28},{"ruleId":"367","severity":1,"message":"466","line":131,"column":9,"nodeType":"369","messageId":"370","endLine":131,"endColumn":32},{"ruleId":"367","severity":1,"message":"467","line":180,"column":9,"nodeType":"369","messageId":"370","endLine":180,"endColumn":23},{"ruleId":"367","severity":1,"message":"468","line":3,"column":13,"nodeType":"369","messageId":"370","endLine":3,"endColumn":16},{"ruleId":"367","severity":1,"message":"469","line":26,"column":10,"nodeType":"369","messageId":"370","endLine":26,"endColumn":32},{"ruleId":"367","severity":1,"message":"470","line":182,"column":9,"nodeType":"369","messageId":"370","endLine":182,"endColumn":29},{"ruleId":"367","severity":1,"message":"471","line":216,"column":9,"nodeType":"369","messageId":"370","endLine":216,"endColumn":14},{"ruleId":"367","severity":1,"message":"398","line":217,"column":9,"nodeType":"369","messageId":"370","endLine":217,"endColumn":20},{"ruleId":"367","severity":1,"message":"472","line":239,"column":9,"nodeType":"369","messageId":"370","endLine":239,"endColumn":25},{"ruleId":"367","severity":1,"message":"473","line":245,"column":9,"nodeType":"369","messageId":"370","endLine":245,"endColumn":21},{"ruleId":"425","severity":1,"message":"426","line":314,"column":44,"nodeType":"405","messageId":"427","endLine":320,"endColumn":8},{"ruleId":"367","severity":1,"message":"464","line":2,"column":8,"nodeType":"369","messageId":"370","endLine":2,"endColumn":14},{"ruleId":"415","severity":1,"message":"474","line":81,"column":6,"nodeType":"417","endLine":81,"endColumn":22,"suggestions":"475"},{"ruleId":"367","severity":1,"message":"372","line":1,"column":16,"nodeType":"369","messageId":"370","endLine":1,"endColumn":25},{"ruleId":"367","severity":1,"message":"476","line":4,"column":3,"nodeType":"369","messageId":"370","endLine":4,"endColumn":7},{"ruleId":"367","severity":1,"message":"477","line":5,"column":3,"nodeType":"369","messageId":"370","endLine":5,"endColumn":14},{"ruleId":"367","severity":1,"message":"478","line":6,"column":3,"nodeType":"369","messageId":"370","endLine":6,"endColumn":21},{"ruleId":"367","severity":1,"message":"479","line":15,"column":9,"nodeType":"369","messageId":"370","endLine":15,"endColumn":52},{"ruleId":"363","replacedBy":"480"},{"ruleId":"365","replacedBy":"481"},{"ruleId":"367","severity":1,"message":"482","line":32,"column":7,"nodeType":"369","messageId":"370","endLine":32,"endColumn":15},{"ruleId":"367","severity":1,"message":"483","line":255,"column":20,"nodeType":"369","messageId":"370","endLine":255,"endColumn":31},{"ruleId":"367","severity":1,"message":"441","line":257,"column":10,"nodeType":"369","messageId":"370","endLine":257,"endColumn":17},{"ruleId":"367","severity":1,"message":"456","line":12,"column":3,"nodeType":"369","messageId":"370","endLine":12,"endColumn":16},{"ruleId":"367","severity":1,"message":"484","line":29,"column":7,"nodeType":"369","messageId":"370","endLine":29,"endColumn":12},{"ruleId":"367","severity":1,"message":"483","line":148,"column":20,"nodeType":"369","messageId":"370","endLine":148,"endColumn":31},{"ruleId":"367","severity":1,"message":"441","line":150,"column":10,"nodeType":"369","messageId":"370","endLine":150,"endColumn":17},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["485"],"no-negated-in-lhs",["486"],"@typescript-eslint/no-unused-vars","'nanoid' is defined but never used.","Identifier","unusedVar","'url' is assigned a value but never used.","'useEffect' is defined but never used.","'Header' is defined but never used.","'useLocation' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","'useState' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'Route' is defined but never used.","'RouteComponentProps' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useBook' is defined but never used.","'RefObject' is defined but never used.","'DateSelectArg' is defined but never used.","'eliminateIntervals' is defined but never used.","'INITIAL_EVENTS' is defined but never used.","'Text' is defined but never used.","'convertMinToHrsMin' is defined but never used.","'dayConvertToEn' is defined but never used.","'_' is defined but never used.","'user' is assigned a value but never used.","'timeSelected' is assigned a value but never used.","'setEventTime' is assigned a value but never used.","'setEventId' is assigned a value but never used.","'calendarApi' is assigned a value but never used.","'WithTip' is defined but never used.","'LinkPlain' is defined but never used.","'Textarea' is defined but never used.","'organizer' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CalendarSection' is defined but never used.","'useHistory' is defined but never used.","no-useless-rename","Import fetchDatetimeSpotsByRange unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"487","text":"488"},"'days' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'date', 'fetchEventTypeByUrl', 'fetchSchedule', 'fetchUserProfile', 'month', 'type', 'updateSelectedDate', 'updateSelectedMonth', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["489"],"React Hook useEffect has a missing dependency: 'handleDatetimeSpotsFetch'. Either include it or remove the dependency array.",["490"],"'TextField' is defined but never used.","'Checkbox' is defined but never used.","'Input' is defined but never used.","'sliceOfTime' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'date', 'date'.","unsafeRefs","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'dayjs' is defined but never used.","'LinkUrlSection' is defined but never used.","'profile' is assigned a value but never used.","'settings' is assigned a value but never used.","'updateDisplayName' is assigned a value but never used.","'updateSlug' is assigned a value but never used.","'editing' is assigned a value but never used.","'setEditing' is assigned a value but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'date', 'datetime', 'fetchEventTypeByUrl', 'fetchSchedule', 'fetchUserProfile', 'month', 'type', 'updateSelectedDate', 'updateSelectedMonth', 'updateSelectedTime', and 'user'. Either include them or remove the dependency array.",["491"],"'useAuth' is defined but never used.","'useIntervals' is defined but never used.","'useLink' is defined but never used.","'useSchedulingLink' is defined but never used.","'Dayjs' is defined but never used.","React Hook useEffect has missing dependencies: 'eventTypes', 'fetchEventTypes', 'fetchUserProfile', 'user', and 'userProfileBySlug'. Either include them or remove the dependency array.",["492"],"'todayStr' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'DefaultButton' is defined but never used.","'useEvents' is defined but never used.","'moment' is defined but never used.","'SearchBoxSmallExample' is defined but never used.","'EventCard' is defined but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","'NextEventCard' is defined but never used.","'useSWR' is defined but never used.","'_updateUserSettings' is assigned a value but never used.","'_revalidateUserSettings' is assigned a value but never used.","'removeSchedule' is assigned a value but never used.","'API' is defined but never used.","'CalendarBindingSection' is defined but never used.","'handleWeekendsToggle' is assigned a value but never used.","'title' is assigned a value but never used.","'handleEventClick' is assigned a value but never used.","'handleEvents' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAvailabilityPresetsById'. Either include it or remove the dependency array.",["493"],"'Card' is defined but never used.","'ICardTokens' is defined but never used.","'ICardSectionStyles' is defined but never used.","'footerCardSectionTokens' is assigned a value but never used.",["485"],["486"],"'Register' is defined but never used.","'setRedirect' is assigned a value but never used.","'Login' is defined but never used.","no-global-assign","no-unsafe-negation",[290,344],"fetchDatetimeSpotsByRange",{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},"Update the dependencies array to be: [date, fetchEventTypeByUrl, fetchSchedule, fetchUserProfile, month, type, updateSelectedDate, updateSelectedMonth, user]",{"range":"504","text":"505"},"Update the dependencies array to be: [eventType, handleDatetimeSpotsFetch, selectedMonth]",{"range":"506","text":"507"},"Update the dependencies array to be: [date, datetime, fetchEventTypeByUrl, fetchSchedule, fetchUserProfile, month, type, updateSelectedDate, updateSelectedMonth, updateSelectedTime, user]",{"range":"508","text":"509"},"Update the dependencies array to be: [eventTypes, fetchEventTypes, fetchUserProfile, user, userProfileBySlug]",{"range":"510","text":"511"},"Update the dependencies array to be: [settings, link, getAvailabilityPresetsById]",{"range":"512","text":"513"},[4869,4871],"[date, fetchEventTypeByUrl, fetchSchedule, fetchUserProfile, month, type, updateSelectedDate, updateSelectedMonth, user]",[5005,5031],"[eventType, handleDatetimeSpotsFetch, selectedMonth]",[3394,3396],"[date, datetime, fetchEventTypeByUrl, fetchSchedule, fetchUserProfile, month, type, updateSelectedDate, updateSelectedMonth, updateSelectedTime, user]",[487,489],"[eventTypes, fetchEventTypes, fetchUserProfile, user, userProfileBySlug]",[2610,2626],"[settings, link, getAvailabilityPresetsById]"]