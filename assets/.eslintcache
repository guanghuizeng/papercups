[{"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/index.tsx":"1","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/analytics.ts":"2","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/serviceWorker.ts":"3","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/App.tsx":"4","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/config.ts":"5","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/storage.ts":"6","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api.ts":"7","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Dashboard.tsx":"8","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/ScheduledEvent.tsx":"9","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingPage.tsx":"10","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/logger.tsx":"11","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinksBoard.tsx":"12","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLink.tsx":"13","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Availability.tsx":"14","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/AppSettings.tsx":"15","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingProvider.tsx":"16","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/event-utils.tsx":"17","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventProvider.tsx":"18","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/AppDataProvider.tsx":"19","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/utils.ts":"20","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/NavSidebar.tsx":"21","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api-hooks.tsx":"22","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/constants.ts":"23","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventsProvider.tsx":"24","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkSettings.tsx":"25","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Calendar.tsx":"26","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/SchedulingLinkProvider.tsx":"27","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkCard.tsx":"28","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/utils.ts":"29","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/const.ts":"30","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/AuthProvider.tsx":"31","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Register.tsx":"32","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Login.tsx":"33","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordReset.tsx":"34","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/EmailVerification.tsx":"35","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/RequestPasswordReset.tsx":"36","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordResetRequested.tsx":"37","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/landing/LandingPage.tsx":"38","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/data.ts":"39","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/ScheduledEvents.tsx":"40","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/common/EventLocationSelect.tsx":"41"},{"size":619,"mtime":1619930461052,"results":"42","hashOfConfig":"43"},{"size":1226,"mtime":1607220770491,"results":"44","hashOfConfig":"43"},{"size":5296,"mtime":1607220770508,"results":"45","hashOfConfig":"43"},{"size":2906,"mtime":1619935696103,"results":"46","hashOfConfig":"43"},{"size":898,"mtime":1608873579256,"results":"47","hashOfConfig":"43"},{"size":1088,"mtime":1607220770508,"results":"48","hashOfConfig":"43"},{"size":25085,"mtime":1618642704913,"results":"49","hashOfConfig":"43"},{"size":1750,"mtime":1619935587808,"results":"50","hashOfConfig":"43"},{"size":6972,"mtime":1612683381999,"results":"51","hashOfConfig":"43"},{"size":13358,"mtime":1619935587804,"results":"52","hashOfConfig":"43"},{"size":3579,"mtime":1619934884536,"results":"53","hashOfConfig":"43"},{"size":2082,"mtime":1618638652902,"results":"54","hashOfConfig":"43"},{"size":14787,"mtime":1619935745406,"results":"55","hashOfConfig":"43"},{"size":10130,"mtime":1612579037811,"results":"56","hashOfConfig":"43"},{"size":9975,"mtime":1616144136460,"results":"57","hashOfConfig":"43"},{"size":4566,"mtime":1619930461061,"results":"58","hashOfConfig":"43"},{"size":1720,"mtime":1612157529828,"results":"59","hashOfConfig":"43"},{"size":918,"mtime":1612683359398,"results":"60","hashOfConfig":"43"},{"size":5208,"mtime":1618800532868,"results":"61","hashOfConfig":"43"},{"size":4237,"mtime":1612269403083,"results":"62","hashOfConfig":"43"},{"size":1980,"mtime":1619930461058,"results":"63","hashOfConfig":"43"},{"size":3461,"mtime":1618646348207,"results":"64","hashOfConfig":"43"},{"size":1055,"mtime":1611641475088,"results":"65","hashOfConfig":"43"},{"size":647,"mtime":1612691633336,"results":"66","hashOfConfig":"43"},{"size":10782,"mtime":1612574312404,"results":"67","hashOfConfig":"43"},{"size":14222,"mtime":1612432013047,"results":"68","hashOfConfig":"43"},{"size":6835,"mtime":1618639108096,"results":"69","hashOfConfig":"43"},{"size":1071,"mtime":1612573105224,"results":"70","hashOfConfig":"43"},{"size":293,"mtime":1611664159522,"results":"71","hashOfConfig":"43"},{"size":122,"mtime":1618642705075,"results":"72","hashOfConfig":"43"},{"size":3603,"mtime":1619930384499,"results":"73","hashOfConfig":"43"},{"size":5768,"mtime":1619934979468,"results":"74","hashOfConfig":"43"},{"size":4123,"mtime":1619934631490,"results":"75","hashOfConfig":"43"},{"size":294,"mtime":1619934979399,"results":"76","hashOfConfig":"43"},{"size":957,"mtime":1619934979348,"results":"77","hashOfConfig":"43"},{"size":149,"mtime":1619934979481,"results":"78","hashOfConfig":"43"},{"size":163,"mtime":1619934979409,"results":"79","hashOfConfig":"43"},{"size":21821,"mtime":1619934631539,"results":"80","hashOfConfig":"43"},{"size":4018,"mtime":1619931561625,"results":"81","hashOfConfig":"43"},{"size":4168,"mtime":1619935587792,"results":"82","hashOfConfig":"43"},{"size":772,"mtime":1619935745403,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1wwb8a3",{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"86"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/index.tsx",[],["184","185"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/analytics.ts",["186"],"import * as Sentry from '@sentry/react';\nimport LogRocket from 'logrocket';\nimport posthog from 'posthog-js';\nimport {isDev} from './config';\n\nconst {\n  REACT_APP_SENTRY_DSN,\n  REACT_APP_LOGROCKET_ID,\n  REACT_APP_POSTHOG_TOKEN = 'cQo4wipp5ipWWXhTN8kTacBItgqo457yDRtzCMOr-Tw',\n  REACT_APP_POSTHOG_API_HOST = 'https://app.posthog.com',\n} = process.env;\n\nexport const isSentryEnabled = REACT_APP_SENTRY_DSN && !isDev;\nexport const isLogRocketEnabled = REACT_APP_LOGROCKET_ID && !isDev;\nexport const isPostHogEnabled = REACT_APP_POSTHOG_TOKEN && !isDev;\n\nexport const init = () => {\n  if (isSentryEnabled) {\n    Sentry.init({dsn: REACT_APP_SENTRY_DSN});\n  }\n\n  if (isLogRocketEnabled && REACT_APP_LOGROCKET_ID) {\n    LogRocket.init(REACT_APP_LOGROCKET_ID);\n  }\n\n  if (isPostHogEnabled) {\n    posthog.init(REACT_APP_POSTHOG_TOKEN, {\n      api_host: REACT_APP_POSTHOG_API_HOST,\n    });\n  }\n};\n\nexport const identify = (id: any, email: string) => {\n  if (isSentryEnabled) {\n    Sentry.setUser({id, email});\n  }\n\n  if (isLogRocketEnabled) {\n    LogRocket.identify(id, {email});\n  }\n\n  if (isPostHogEnabled) {\n    posthog.identify(id);\n    posthog.people && posthog.people.set({email});\n  }\n};\n\nexport default {\n  init,\n  identify,\n};\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/serviceWorker.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/App.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/config.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/storage.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api.ts",["187","188"],"import request from 'superagent';\nimport qs from 'query-string';\nimport {getAuthTokens} from './storage';\nimport {Conversation, User} from './types';\nimport * as queryString from 'query-string';\nimport {nanoid} from 'nanoid';\n\n// TODO: handle this on the server instead\nfunction now() {\n  const date = new Date();\n\n  return new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds()\n  );\n}\n\nexport type LoginParams = {\n  email: string;\n  password: string;\n};\n\nexport type RegisterParams = LoginParams & {\n  companyName?: string;\n  inviteToken?: string;\n  passwordConfirmation: string;\n};\n\nexport type ResetPasswordParams = {\n  password: string;\n  passwordConfirmation: string;\n};\n\nexport type WidgetSettingsParams = {\n  id?: string;\n  title: string;\n  subtitle: string;\n  color: string;\n  greeting?: string;\n  new_message_placeholder?: string;\n};\n\nexport type EventSubscriptionParams = {\n  webhook_url: string;\n};\n\nexport const getAccessToken = (): string | null => {\n  const tokens = getAuthTokens();\n\n  return (tokens && tokens.token) || null;\n};\n\nexport const getRefreshToken = (): string | null => {\n  const tokens = getAuthTokens();\n\n  return (tokens && tokens.renew_token) || null;\n};\n\nexport const me = async (token = getAccessToken()): Promise<User> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const login = async ({email, password}: LoginParams) => {\n  return request\n    .post(`/api/session`)\n    .send({user: {email, password}})\n    .then((res) => res.body.data);\n};\n\nexport const logout = async () => {\n  return request.delete(`/api/session`).then((res) => res.body);\n};\n\nexport const register = async ({\n  companyName,\n  inviteToken,\n  email,\n  password,\n  passwordConfirmation,\n}: RegisterParams) => {\n  return request\n    .post(`/api/registration`)\n    .send({\n      user: {\n        company_name: companyName,\n        invite_token: inviteToken,\n        email,\n        password,\n        password_confirmation: passwordConfirmation,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const renew = async (token = getRefreshToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/session/renew`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const verifyUserEmail = async (verificationToken: string) => {\n  return request\n    .post(`/api/verify_email`)\n    .send({token: verificationToken})\n    .then((res) => res.body.data);\n};\n\nexport const sendPasswordResetEmail = async (email: string) => {\n  return request\n    .post(`/api/reset_password`)\n    .send({email})\n    .then((res) => res.body.data);\n};\n\nexport const attemptPasswordReset = async (\n  passwordResetToken: string,\n  {password, passwordConfirmation}: ResetPasswordParams\n) => {\n  return request\n    .put(`/api/reset_password`)\n    .send({\n      password,\n      password_confirmation: passwordConfirmation,\n      token: passwordResetToken,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createNewCustomer = async (accountId: string) => {\n  return request\n    .post(`/api/customers`)\n    .send({\n      customer: {\n        account_id: accountId,\n        first_seen: now(),\n        last_seen: now(),\n      },\n    }) // TODO: send over some metadata?\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomers = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/customers`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomer = async (id: string, token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/customers/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateCustomer = async (\n  id: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/customers/${id}`)\n    .set('Authorization', token)\n    .send({\n      customer: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createNewConversation = async (\n  customerId: string,\n  params?: object,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations`)\n    .set('Authorization', token)\n    .send({\n      conversation: {\n        customer_id: customerId,\n        ...params,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchAccountInfo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/accounts/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateAccountInfo = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/accounts/me`)\n    .set('Authorization', token)\n    .send({\n      account: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserProfile = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/profile`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserProfile = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/profile`)\n    .set('Authorization', token)\n    .send({\n      user_profile: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserSettings = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get('/api/user_settings')\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserSettings = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put('/api/user_settings')\n    .set('Authorization', token)\n    .send({\n      user_settings: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchAllConversations = async (\n  token = getAccessToken()\n): Promise<Array<Conversation>> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchMyConversations = async (\n  userId: number,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({assignee_id: userId, status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchPriorityConversations = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({priority: 'priority', status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchClosedConversations = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({status: 'closed'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchConversation = async (\n  id: string,\n  token = getAccessToken()\n): Promise<Conversation> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const generateShareConversationToken = async (\n  conversationId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations/${conversationId}/share`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSharedConversation = async (\n  id: string,\n  token: string\n): Promise<Conversation> => {\n  if (!token) {\n    throw new Error('Access denied!');\n  }\n\n  return request\n    .get(`/api/conversations/shared`)\n    .query({token, conversation_id: id})\n    .then((res) => res.body.data);\n};\n\nexport const updateConversation = async (\n  conversationId: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .send(updates)\n    .then((res) => res.body.data);\n};\n\nexport const deleteConversation = async (\n  conversationId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createNewMessage = async (\n  conversationId: string,\n  message: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/messages`)\n    .set('Authorization', token)\n    .send({\n      message: {\n        conversation_id: conversationId,\n        sent_at: new Date().toISOString(),\n        ...message,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const countMessages = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/messages/count`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomerConversations = async (\n  customerId: string,\n  accountId: string\n) => {\n  return request\n    .get(`/api/conversations/customer`)\n    .query({customer_id: customerId, account_id: accountId})\n    .then((res) => res.body.data);\n};\n\nexport const generateUserInvitation = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/user_invitations`)\n    .send({user_invitation: {}})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSlackAuthorization = async (\n  type = 'reply',\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/slack/authorization`)\n    .query({type})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchGmailAuthorization = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/gmail/authorization`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport type EmailParams = {\n  recipient: string;\n  subject: string;\n  message: string;\n};\n\nexport const sendGmailNotification = async (\n  {recipient, subject, message}: EmailParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/gmail/send`)\n    .send({recipient, subject, message})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchEventSubscriptions = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/event_subscriptions`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const verifyWebhookUrl = async (\n  url: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/event_subscriptions/verify`)\n    .set('Authorization', token)\n    .send({url})\n    .then((res) => res.body.data);\n};\n\nexport const createEventSubscription = async (\n  params: EventSubscriptionParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/event_subscriptions`)\n    .set('Authorization', token)\n    .send({\n      event_subscription: params,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const updateEventSubscription = async (\n  id: string,\n  updates: EventSubscriptionParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/event_subscriptions/${id}`)\n    .set('Authorization', token)\n    .send({\n      event_subscription: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const deleteEventSubscription = async (\n  id: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/event_subscriptions/${id}`)\n    .set('Authorization', token);\n};\n\nexport const authorizeSlackIntegration = async (\n  code: string,\n  type: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/slack/oauth`)\n    .query({code, type})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const authorizeGmailIntegration = async (\n  code: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/gmail/oauth`)\n    .query({code})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateWidgetSettings = async (\n  widgetSettingsParams: WidgetSettingsParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/widget_settings`)\n    .send({widget_settings: widgetSettingsParams})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchDefaultPaymentMethod = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/payment_methods`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchBillingInfo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/billing`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createSubscriptionPlan = async (\n  plan: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/billing`)\n    .send({plan})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateSubscriptionPlan = async (\n  plan: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/billing`)\n    .send({plan})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createPaymentMethod = async (\n  paymentMethod: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/payment_methods`)\n    .send({payment_method: paymentMethod})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const disableAccountUser = async (\n  userId: number | string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/users/${userId}/disable`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const enableAccountUser = async (\n  userId: number | string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/users/${userId}/enable`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomerNotes = async (\n  customerId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/notes`)\n    .query({customer_id: customerId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createCustomerNote = async (\n  customerId: string,\n  body: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/notes`)\n    .set('Authorization', token)\n    .send({\n      note: {\n        body,\n        customer_id: customerId,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const deleteCustomerNote = async (\n  noteId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request.delete(`/api/notes/${noteId}`).set('Authorization', token);\n};\n\nexport const fetchAllTags = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/tags`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createTag = async (name: string, token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/tags`)\n    .send({tag: {name}})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const addConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations/${conversationId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/conversations/${conversationId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const addCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/customers/${customerId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/customers/${customerId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\ntype BrowserSessionFilters = {\n  sessionIds?: Array<string>;\n  customerId?: string;\n  isActive?: boolean;\n  limit?: number;\n};\n\nexport const fetchBrowserSessions = async (\n  {customerId, isActive, limit = 100, sessionIds = []}: BrowserSessionFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions`)\n    .query(\n      qs.stringify(\n        {\n          ids: sessionIds,\n          customer_id: customerId,\n          active: isActive,\n          limit,\n        },\n        {arrayFormat: 'bracket'}\n      )\n    )\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const countBrowserSessions = async (\n  {customerId, isActive}: BrowserSessionFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions/count`)\n    .query(\n      qs.stringify(\n        {\n          customer_id: customerId,\n          active: isActive,\n        },\n        {arrayFormat: 'bracket'}\n      )\n    )\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchBrowserSession = async (\n  id: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\ntype ReportingFilters = {\n  from_date?: string | null;\n  to_date?: string | null;\n};\n\nexport const fetchReportingData = async (\n  filters = {} as ReportingFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/reporting`)\n    .query(filters)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createSchedulingLink = async (\n  scheduling_link: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/scheduling_links`)\n    .send({scheduling_link})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateSchedulingLink = async (\n  eventTypeId: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/scheduling_links/${eventTypeId}`)\n    .set('Authorization', token)\n    .send({\n      scheduling_link: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createDemo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/demos`)\n    .send({\n      demo: {\n        name: 'type1',\n        count: 1,\n      },\n    })\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinks = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/scheduling_links/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinksBrief = async (user: string) => {\n  return request\n    .get(`/api/scheduling_links_brief/`)\n    .then((res) => res.body.data);\n};\n\nexport const createSchedule = async (\n  schedule: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/schedules/`)\n    .set('Authorization', token)\n    .send({\n      schedule,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedules = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/schedules/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchScheduleById = async (user: string, schedule_id: string) => {\n  return request\n    .get(`/api/schedules`)\n    .query({schedule_id})\n    .then((res) => res.body.data);\n};\n\nexport const updateSchedule = async (\n  id: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/schedules/${id}`)\n    .set('Authorization', token)\n    .send({\n      schedule: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserProfileBySlug = async (slug: string) => {\n  return request\n    .get(`/api/profile`)\n    .query({slug})\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinkByUrl = async (user: string, url: string) => {\n  return request\n    .get(`/api/event_type`)\n    .query({url})\n    .then((res) => res.body.data);\n};\n\nexport interface CreateEventParams {\n  user: string;\n  link: string;\n  event: {\n    displayName: string;\n    email: string;\n    startAt: string;\n    endAt: string;\n    fields: any;\n  };\n}\n\nexport const createEvent = async (params: CreateEventParams) => {\n  return request\n    .post(`/api/scheduled_events`)\n    .send(params)\n    .then((res) => res.body.data);\n};\n\nexport const createScheduledEvent = async (\n  scheduling_link_id: string,\n  start_time: string,\n  guest_name: string\n) => {\n  return request\n    .post(`/api/scheduled_events`)\n    .send({\n      event: {\n        scheduling_link_id,\n        start_time,\n        guest_name,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchDatetimeSpotsByRange = async (\n  event_type_id: string,\n  start_time: string,\n  end_time: string\n) => {\n  return request\n    .get(`/api/booking/scheduling_links/${event_type_id}/calendar/range`)\n    .query({\n      start_time,\n      end_time,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchScheduledEvents = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/scheduled_events/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchIntervals = async (\n  userSlug: string,\n  linkSlug: string,\n  from: string,\n  to: string\n) => {\n  const url = queryString.stringifyUrl({\n    url: `/api/links/${userSlug}/${linkSlug}/intervals`,\n    query: {\n      from,\n      to,\n    },\n  });\n  return request\n    .get(`/api/links/${userSlug}/${linkSlug}/intervals`)\n    .query({\n      from,\n      to,\n    })\n    .then((res) => res.body.data);\n};\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Dashboard.tsx",["189"],"import React, {useEffect} from 'react';\nimport {\n  Switch,\n  Redirect,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport ScheduledEvents from './ScheduledEvents';\nimport SchedulingLink from './SchedulingLink';\nimport AppDataProvider from '../hooks/AppDataProvider';\nimport {SchedulingLinksBoard} from './SchedulingLinksBoard';\nimport {AppSettings} from './AppSettings';\nimport {Availability} from './Availability';\nimport BookingPage from './booking/BookingPage';\n\nfunction Dashboard(props: RouteComponentProps) {\n  return (\n    <div\n      className=\"flex flex-col md:flex-row h-full w-screen\"\n      style={{\n        minHeight: '100vh',\n      }}\n    >\n      <div className=\"flex flex-row w-full\">\n        <Switch>\n          <Route exact path=\"/\" component={() => <Redirect to={'/links'} />} />\n          <Route exact path=\"/links\" component={SchedulingLinksBoard} />\n          <Route\n            path=\"/links/:id\"\n            component={() => (\n              <div className=\"w-full border-l border-gray-200 border-solid\">\n                <SchedulingLink />\n              </div>\n            )}\n          />\n          <Route path=\"/events\" component={ScheduledEvents} />\n          <Route path=\"/settings\" component={AppSettings} />\n          <Route path=\"/availabilities/:id/edit\" component={Availability} />\n          {/*<Route path=\"/apps\" component={() => <div>apps</div>} />*/}\n          <Route\n            path=\"/:userSlug/:schedulingLinkSlug\"\n            component={BookingPage}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nconst DashboardWrapper = (props: RouteComponentProps) => {\n  return (\n    <AppDataProvider>\n      <Dashboard {...props} />\n    </AppDataProvider>\n  );\n};\n\nexport default DashboardWrapper;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/ScheduledEvent.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingPage.tsx",["190","191","192","193","194","195","196"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/logger.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinksBoard.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLink.tsx",["197","198","199","200","201"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Availability.tsx",["202","203","204","205","206","207","208"],"import React from 'react';\nimport {useParams, Link} from 'react-router-dom';\nimport {useAppData} from '../hooks/AppDataProvider';\nimport TextField from './common/TextField';\nimport {listOfTime24, listOfTime24Options} from './constants';\nimport Select from 'react-select';\nimport FullCalendar, {DayHeaderContentArg} from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport {\n  complementIntervals,\n  createEventId,\n  eliminateIntervals,\n  INITIAL_EVENTS,\n} from './event-utils';\nimport zhLocale from '@fullcalendar/core/locales/zh-cn';\nimport {Button, Checkbox, Input} from '@geist-ui/react';\nimport dayjs, {Dayjs} from 'dayjs';\nimport produce, {Draft} from 'immer';\n\nimport {dayConvertToEn, dayConvertToZh} from '../utils';\nimport _ from 'lodash';\nimport {nanoid} from 'nanoid';\nimport {X} from '@geist-ui/react-icons';\nimport {EventInput} from '@fullcalendar/common';\n\nconst sliceOfTime = listOfTime24.slice(0, 24 * 4);\nconst timeOptions = listOfTime24Options;\n\nfunction AvailabilityByDay({\n  rule,\n  updateDayCheck,\n  updateStartTime,\n  updateEndTime,\n}: any) {\n  const dayState = ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su'].map((d) => {\n    return {\n      day: d,\n      checked: rule.byday.findIndex((day: string) => day === d) > -1,\n    };\n  });\n\n  return (\n    <div className={'flex flex-col'}>\n      <div className=\"flex flex-row py-2 px-4 \">\n        {dayState.map((state) => {\n          return (\n            <div key={state.day} className=\"cursor-pointer pl-4\">\n              <label className=\"cursor-pointer inline-flex flex-col\">\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={state.checked}\n                  onChange={(e) => {\n                    updateDayCheck(rule.id, state.day, e.target.checked);\n                  }}\n                />\n                {dayConvertToZh(state.day)}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"flex flex-row\">\n        <Select\n          className=\"w-28 mx-4\"\n          classNamePrefix=\"select\"\n          components={{\n            IndicatorSeparator: () => {\n              return null;\n            },\n          }}\n          name=\"color\"\n          defaultValue={timeOptions[(rule.startTime / 60) * 4]}\n          options={timeOptions}\n          onChange={(option) => {\n            if (option) {\n              updateStartTime(rule.id, option.value);\n            }\n          }}\n        />\n        <Select\n          className=\"w-28 mx-4\"\n          classNamePrefix=\"select\"\n          components={{\n            IndicatorSeparator: () => {\n              return null;\n            },\n          }}\n          name=\"color\"\n          defaultValue={timeOptions[(rule.endTime / 60) * 4]}\n          options={timeOptions}\n          onChange={(option) => {\n            if (option) {\n              updateEndTime(rule.id, option.value);\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function Availability() {\n  const {id} = useParams();\n\n  const {availabilityPresets, updateAvailabilityPreset} = useAppData();\n  const preset = availabilityPresets\n    ? availabilityPresets.find((p) => p.id === id)\n    : null;\n\n  const renderDayHeaderContent = (props: DayHeaderContentArg) => {\n    const date = dayjs(props.date);\n    return (\n      <div>\n        <div className=\"text-xs font-medium text-gray-600\">\n          {date.format('ddd')}\n        </div>\n      </div>\n    );\n  };\n\n  const getBackgroundEvents = (\n    arg: {\n      start: Date;\n      end: Date;\n      startStr: string;\n      endStr: string;\n      timeZone: string;\n    },\n    successCallback: (events: EventInput[]) => void,\n    failureCallback: (error: any) => any\n  ) => {\n    const startDate = dayjs(arg.start);\n    const endDate = dayjs(arg.end);\n    const availabilityPresetsIntervals: any = preset ? preset.rules : [];\n\n    const availableIntervals: Dayjs[][] = [];\n    let date = startDate.clone();\n    while (!date.isSame(endDate)) {\n      const day = dayConvertToEn(date.format('dd').toLowerCase());\n      availabilityPresetsIntervals.forEach((settings: any) => {\n        if (settings.byday.findIndex((d: string) => d === day) > -1) {\n          let startTime = date.add(settings.startTime, 'minute');\n          let endTime = date.add(settings.endTime, 'minute');\n          availableIntervals.push([startTime, endTime]);\n        }\n      });\n      date = date.add(1, 'day');\n    }\n    const sortedIntervals = _.sortBy(availableIntervals, (e) => e[0].valueOf());\n    const eliminatedIntervals = eliminateIntervals(sortedIntervals);\n    const complementedIntervals = complementIntervals(\n      startDate,\n      endDate,\n      eliminatedIntervals\n    );\n\n    successCallback(\n      complementedIntervals.map((interval) => {\n        return {\n          id: createEventId(),\n          start: interval[0].toISOString(),\n          end: interval[1].toISOString(),\n          className: 'sc-unavailable',\n          display: 'background',\n        };\n      })\n    );\n  };\n\n  /** update functions\n   *  1. name\n   *  2. rule: edit, add, remove\n   * */\n\n  const updateName = (value: string) => {\n    updateAvailabilityPreset(preset.id, {name: value});\n  };\n\n  const removeRule = (id: string) => {\n    updateAvailabilityPreset(preset.id, {\n      rules: preset.rules.filter((rule: any) => rule.id != id),\n    });\n  };\n\n  const addRule = () => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      draft.push({\n        id: nanoid(),\n        byday: ['mo', 'tu', 'we', 'th', 'fr'],\n        startTime: 540,\n        endTime: 1020,\n      });\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  const updateDayCheck = (ruleId: string, day: string, checked: boolean) => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      const rule = draft.find((rule: any) => rule.id === ruleId);\n      if (checked) {\n        rule.byday.push(day);\n      } else {\n        rule.byday = rule.byday.filter((byday: string) => byday !== day);\n      }\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  const updateStartTime = (ruleId: string, value: number) => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      const rule = draft.find((rule: any) => rule.id === ruleId);\n      rule.startTime = value;\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  const updateEndTime = (ruleId: string, value: number) => {\n    const rules = produce(preset.rules, (draft: Draft<any>) => {\n      const rule = draft.find((rule: any) => rule.id === ruleId);\n      rule.endTime = value;\n    });\n    updateAvailabilityPreset(preset.id, {rules});\n  };\n\n  console.log('avaialbility', preset);\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <div className=\"flex flex-row header-padding header-border header-h items-center\">\n        <Link\n          to={`/settings/links`}\n          className=\"gentle-flex focus:outline-none w-10 h-10 text-gray-400 hover:text-gray-700 hover:bg-gray-100 rounded-full\"\n        >\n          <X />\n        </Link>\n        <span className=\"pl-2\">时间管理</span>\n      </div>\n\n      <div className=\"flex flex-row w-full\">\n        <div className=\"flex flex-col w-112\">\n          <div className=\"px-4 pt-8\">\n            <textarea\n              className=\"-mx-2 px-2 py-2 rounded-lg text-2xl leading-6 font-bold border-transparent focus:outline-none focus:border-gray-300 focus:ring focus:ring-black focus:ring-opacity-50 text-gray-800 resize-none placeholder-gray-600\"\n              placeholder=\"未命名\"\n              spellCheck=\"false\"\n              style={{minHeight: '42px !important'}}\n              defaultValue={preset?.name}\n              rows={1}\n              onKeyPress={(e) => {\n                console.log(e.key);\n                if (e.key === 'Enter') {\n                  e.preventDefault();\n                }\n              }}\n              onChange={(e) => {\n                // console.log('Name change', e.target.value);\n                updateName(e.target.value);\n              }}\n            />\n          </div>\n\n          <div className=\"pt-4\">\n            {preset?.rules.map((rule: any) => {\n              return (\n                <div\n                  key={rule.id}\n                  className=\"flex flex-row py-2 pb-8 mb-4 border-b border-primary border-solid\"\n                >\n                  <AvailabilityByDay\n                    rule={rule}\n                    updateDayCheck={updateDayCheck}\n                    updateStartTime={updateStartTime}\n                    updateEndTime={updateEndTime}\n                  />\n                  <button\n                    className=\"w-8 h-8 relative text-gray-300 hover:text-black hover:bg-gray-100 rounded-full gentle-flex\"\n                    onClick={() => removeRule(rule.id)}\n                  >\n                    <X />\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"w-full mt-4\">\n            <Button className={'ml-4 mt-4'} onClick={addRule}>\n              添加\n            </Button>\n            <Button className={'ml-4 mt-4'}>显示我的日历</Button>\n          </div>\n        </div>\n\n        <div className=\"ml-4 demo-app-main w-full\">\n          <FullCalendar\n            contentHeight=\"1100px\"\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={false}\n            weekNumberCalculation=\"ISO\"\n            initialView=\"timeGridWeek\"\n            slotDuration=\"00:30:00\"\n            snapDuration=\"00:15:00\"\n            slotLabelInterval=\"01:00\"\n            slotMinTime=\"06:00:00\"\n            dayHeaderContent={renderDayHeaderContent}\n            allDaySlot={false}\n            weekends={true}\n            eventSources={[\n              {\n                events: getBackgroundEvents,\n                display: 'background',\n              },\n            ]}\n            nowIndicator={false}\n            locale={zhLocale}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/AppSettings.tsx",["209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228"],"import React, {useEffect, useState} from 'react';\nimport {Switch, Route, Link, useLocation, Redirect} from 'react-router-dom';\nimport {useAppData} from '../hooks/AppDataProvider';\nimport {Button, Input, Spacer, Text} from '@geist-ui/react';\nimport {\n  convertMinToHrsMin,\n  convertMinToHrsMinString,\n  dayConvertToZh,\n} from '../utils';\nimport dayjs from 'dayjs';\nimport NavSidebar from './NavSidebar';\n\nfunction SettingSection(props: any) {\n  return (\n    <div className=\"border-primary border-b border-solid py-8\">\n      <div className=\"mx-auto w-128\">{props.children}</div>\n    </div>\n  );\n}\n\ninterface SectionTitleProps extends React.PropsWithChildren<any> {\n  title: string;\n}\n\nfunction SectionTitle(props: SectionTitleProps) {\n  return <div className=\"text-xl\">{props.title}</div>;\n}\n\nfunction AvailabilitySection() {\n  const {availabilityPresets, createSchedule} = useAppData();\n\n  const format = (minutes: number) => {\n    if (minutes) return convertMinToHrsMinString(minutes);\n  };\n\n  const add = () => {\n    createSchedule();\n  };\n\n  console.log('availabilityPresets', availabilityPresets);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'时间管理'} />\n      <div className=\"border-primary border-b border-solid py-2\">\n        {availabilityPresets &&\n          availabilityPresets.map((preset) => {\n            return (\n              <div\n                key={preset.id}\n                className=\"border-primary border-t border-solid  py-6 flex flex-row justify-between\"\n              >\n                <div className=\"flex flex-col\">\n                  <Text h3 className=\"font-medium\">\n                    <Link\n                      to={`/availabilities/${preset.id}/edit`}\n                      className={'hover:underline'}\n                    >\n                      {preset.name}\n                    </Link>\n                  </Text>\n                  <div className=\"pt-2\">\n                    {preset.rules.map((rule: any) => {\n                      return (\n                        <div key={rule.id} className=\"grid grid-cols-2\">\n                          <div className=\"flex flex-row\">\n                            {rule.byday.map((byday: string) => {\n                              return (\n                                <span\n                                  key={byday}\n                                  className=\"mr-1 text-sm text-gray-600\"\n                                >\n                                  {dayConvertToZh(byday)}\n                                </span>\n                              );\n                            })}\n                          </div>\n                          <div className=\"text-sm text-gray-600 pl-4\">\n                            <label className=\"mx-1\">\n                              {format(rule.startTime)}\n                            </label>\n                            -\n                            <label className=\"mx-1\">\n                              {format(rule.endTime)}\n                            </label>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                <div className=\"mt-2 flex flex-row\">\n                  <Link\n                    to={`/availabilities/${preset.id}/edit`}\n                    // className=\"btn-draft\"\n                  >\n                    <Button size={'mini'}>编辑</Button>\n                  </Link>\n                  <Button size={'mini'} className=\"ml-4\">\n                    删除\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n      <Spacer y={1.5} />\n      <Button size={'small'} onClick={add}>\n        新建\n      </Button>\n    </SettingSection>\n  );\n}\n\nfunction LinksSettingsSection() {\n  return (\n    <div className=\"flex flex-col\">\n      <AvailabilitySection />\n      <SettingSection>\n        <SectionTitle title={'Buffer'} />\n        <div></div>\n      </SettingSection>\n      <SettingSection>\n        <SectionTitle title={'提醒'} />\n        <div></div>\n      </SettingSection>\n      <SettingSection>\n        <SectionTitle title={'品牌'} />\n        <div></div>\n      </SettingSection>\n    </div>\n  );\n}\n\nconst URL = 'http://localhost:3000';\n\nfunction SlugSection() {\n  const {profile, updateSlug} = useAppData();\n  const [slug, setSlug] = useState<string>('');\n\n  const [editing, setEditing] = useState(false);\n  useEffect(() => {\n    if (profile) {\n      setSlug(profile.slug);\n    }\n  }, [profile]);\n\n  console.log('slug', profile);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'链接地址'} />\n      <div className=\"pt-4 flex flex-row justify-between\">\n        {editing ? (\n          <Input\n            label={URL + '/@'}\n            initialValue={slug}\n            autoFocus={true}\n            onChange={(e) => {\n              setSlug(e.target.value);\n            }}\n          />\n        ) : (\n          <div className=\"my-auto\">{URL + '/@' + slug} </div>\n        )}\n        {editing ? (\n          <div className=\"flex flex-row\">\n            <div className=\"ml-1\">\n              <Button\n                size={'small'}\n                type={'success'}\n                auto\n                onClick={() => {\n                  updateSlug(slug);\n                  setEditing(false);\n                }}\n              >\n                保存\n              </Button>\n            </div>\n            <div className=\"ml-1\">\n              <Button\n                size={'small'}\n                auto\n                onClick={() => {\n                  setSlug(profile.slug);\n                  setEditing(false);\n                }}\n              >\n                取消\n              </Button>\n            </div>\n          </div>\n        ) : (\n          // <div className=\"flex flex-row\">\n          //   <div\n          //     className=\"btn-draft\"\n          //     onClick={() => {\n          //       updateSlug(slug);\n          //       setEditing(false);\n          //     }}\n          //   >\n          //     保存\n          //   </div>\n          //   <div\n          //     className=\"btn-draft\"\n          //     onClick={() => {\n          //       setSlug(settings.slug);\n          //       setEditing(false);\n          //     }}\n          //   >\n          //     取消\n          //   </div>\n          // </div>\n          <Button size={'small'} onClick={() => setEditing(true)}>\n            编辑\n          </Button>\n        )}\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction LinkUrlSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  const [editing, setEditing] = useState<boolean>(false);\n}\n\nfunction EmailSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  const [editing, setEditing] = useState<boolean>(false);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'邮件地址'} />\n      <div className=\"pt-4\">{profile?.email}</div>\n    </SettingSection>\n  );\n}\n\nfunction NameSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'姓名'} />\n      <div className=\"pt-4\">\n        <Input\n          className=\"focus:outline-none\"\n          initialValue={profile?.display_name}\n          onChange={(e) => {\n            updateDisplayName(e.target.value);\n          }}\n        />\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction ProfileSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  return (\n    <div className={'flex flex-col'}>\n      <NameSection />\n      <SlugSection />\n      <EmailSection />\n      <SettingSection>\n        <SectionTitle title={'密码'} />\n        <div className=\"pt-4\">\n          <div className=\"btn-draft\">重设密码</div>\n        </div>\n      </SettingSection>\n    </div>\n  );\n}\n\nexport function AppSettings() {\n  const {pathname} = useLocation();\n\n  return (\n    <div className=\"w-full flex flex-row\">\n      <NavSidebar />\n      <div className=\"w-full\">\n        <div className=\"Header bg-gray-100\">\n          <div className=\"gentle-flex py-1 w-24\">\n            <div className=\"font-bold\">设置</div>\n          </div>\n        </div>\n        <div className=\"border-primary border-b border-solid\">\n          <div className=\"mx-auto w-128\">\n            <div className={'flex flex-row'}>\n              {[\n                {\n                  url: '/settings/profile',\n                  name: '账号',\n                },\n                {\n                  url: '/settings/links',\n                  name: '链接',\n                },\n                {\n                  url: '/settings/teams',\n                  name: '团队',\n                },\n              ].map(({url, name}) => {\n                return (\n                  <Link to={url} key={url}>\n                    <div\n                      className={`${\n                        pathname === url ||\n                        pathname.startsWith(url) ||\n                        (pathname === '/' && url === '/links')\n                          ? 'border-primary border-b-4 border-pink-400 text-black'\n                          : 'opacity-75'\n                      } px-4 py-2`}\n                    >\n                      {name}\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        <Switch>\n          <Route\n            exact\n            path=\"/settings\"\n            component={() => <Redirect to={'/settings/profile'} />}\n          />\n          <Route exact path=\"/settings/profile\" component={ProfileSection} />\n          <Route\n            exact\n            path=\"/settings/links\"\n            component={LinksSettingsSection}\n          />\n          <Route\n            exact\n            path=\"/settings/teams\"\n            component={() => <div>teams</div>}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/booking/BookingProvider.tsx",["229","230","231","232","233"],"import React, {useContext, useEffect, useState} from 'react';\nimport {useAuth} from '../auth/AuthProvider';\nimport {\n  useIntervals,\n  useLink,\n  useSchedulingLinkBySlug,\n  useUserProfileBySlug,\n} from '../../api-hooks';\nimport * as API from '../../api';\nimport {useSchedulingLink} from '../../hooks/SchedulingLinkProvider';\nimport dayjs, {Dayjs} from 'dayjs';\nimport {useMap} from 'react-use';\n\ninterface EventTime {\n  start: Date;\n  end: Date;\n}\n\nconst BookingContext = React.createContext<{\n  userSlug: string;\n  schedulingLinkSlug: string;\n  user: any;\n  schedulingLink: any;\n\n  eventDrafted: boolean;\n  draftEvent: () => void;\n  calendarRef: any;\n\n  eventStartTime: Date | null;\n  setEventStartTime: (start: Date) => void;\n\n  timeSelected: EventTime | null;\n  eventId: string | null;\n  eventDuration: number;\n\n  setEventId: (id: string | null) => void;\n  setEventDuration: (value: number) => void;\n  setEventTime: (start: Date, end: Date) => void;\n\n  fetchIntervals: (start: Date, end: Date) => void;\n  submitScheduledEvent: () => Promise<any>;\n  cancelEventDrafted: () => Promise<any>;\n  getIntervals: (start: Date, end: Date) => Interval[];\n}>({\n  userSlug: '',\n  schedulingLinkSlug: '',\n  user: {},\n  schedulingLink: {},\n\n  eventDrafted: false,\n  draftEvent: () => {},\n  calendarRef: {},\n\n  eventStartTime: null,\n  setEventStartTime: (start: Date) => {},\n  timeSelected: null,\n  eventId: null,\n\n  eventDuration: 30,\n  setEventId: (id: string | null) => {},\n  setEventDuration: (value: number) => {},\n  setEventTime: (start: Date, end: Date) => {},\n\n  fetchIntervals: (start: Date, end: Date) => {},\n  submitScheduledEvent: () => Promise.resolve(),\n  cancelEventDrafted: () => Promise.resolve(),\n  getIntervals: (start: Date, end: Date) => [],\n});\n\nexport const useBooking = () => useContext(BookingContext);\n\ninterface BookingProviderProps {\n  userSlug: string;\n  schedulingLinkSlug: string;\n}\n\ninterface Interval {\n  startAt: string;\n  endAt: string;\n}\n\ninterface IntervalsCache {\n  [key: string]: Interval[];\n}\n\ntype Props = React.PropsWithChildren<BookingProviderProps>;\n\nfunction BookingProvider(props: Props) {\n  const {userSlug, schedulingLinkSlug} = props;\n  const {data: user} = useUserProfileBySlug(userSlug);\n  const {data: schedulingLink} = useSchedulingLinkBySlug(\n    userSlug,\n    schedulingLinkSlug\n  );\n  const [\n    intervalsCache,\n    {set: setIntervalsCache, get: getIntervalsCache},\n  ] = useMap<IntervalsCache>({});\n  const [timeSelected, setTimeSelected] = useState<EventTime | null>(null);\n  const [eventStartTime, setEventStartTime] = useState<Date | null>(null);\n  const [eventDuration, setEventDuration] = useState<number>(30);\n  const [eventId, setEventId] = useState<string | null>(null);\n\n  const [eventDrafted, setEventDrafted] = useState<boolean>(false);\n  const calendarRef = React.createRef<any>();\n\n  useEffect(() => {\n    if (schedulingLink) {\n      setEventDuration(schedulingLink.durations[0]);\n    }\n  }, [schedulingLink]);\n\n  const createScheduledEvent = async () => {\n    return Promise.resolve();\n  };\n\n  const setEventTime = (start: Date, end: Date) => {\n    setTimeSelected({start, end});\n  };\n\n  const cancelEventDrafted = () => {\n    setEventDrafted(false);\n    if (calendarRef.current) {\n      calendarRef.current.getApi().removeAllEvents();\n    }\n    return Promise.resolve();\n  };\n\n  const draftEvent = () => {\n    setEventDrafted(true);\n  };\n\n  const fetchIntervals = (start: Date, end: Date) => {\n    if (!Object.keys(intervalsCache).includes(start.toISOString())) {\n      API.fetchIntervals(\n        userSlug,\n        schedulingLinkSlug,\n        dayjs(start).format('YYYY-MM-DDTHH:mm:ssZ'),\n        dayjs(end).format('YYYY-MM-DDTHH:mm:ssZ')\n      ).then((data) => {\n        setIntervalsCache(start.toISOString(), data);\n      });\n    }\n  };\n\n  const getIntervals = (start: Date, end: Date) => {\n    fetchIntervals(start, end);\n    return getIntervalsCache(start.toISOString());\n  };\n\n  return (\n    <BookingContext.Provider\n      value={{\n        userSlug,\n        schedulingLinkSlug,\n        timeSelected,\n        eventStartTime,\n        eventDuration,\n\n        user,\n        schedulingLink,\n        submitScheduledEvent: createScheduledEvent,\n\n        eventId,\n        setEventId,\n\n        setEventTime,\n        setEventStartTime,\n        setEventDuration,\n\n        eventDrafted,\n        draftEvent,\n        cancelEventDrafted,\n        calendarRef,\n\n        fetchIntervals,\n        getIntervals,\n      }}\n    >\n      {props.children}\n    </BookingContext.Provider>\n  );\n}\n\nexport default BookingProvider;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/event-utils.tsx",["234","235","236"],"import {EventInput} from '@fullcalendar/react';\nimport {Dayjs} from 'dayjs';\n\nlet eventGuid = 0;\nlet todayStr = new Date().toISOString().replace(/T.*$/, ''); // YYYY-MM-DD of today\n\nexport const INITIAL_EVENTS: EventInput[] = [\n  {\n    id: createEventId(),\n    start: '2021-01-22' + 'T12:00:00',\n    end: '2021-01-22' + 'T14:00:00',\n  },\n];\n\nexport function createEventId() {\n  return String(eventGuid++);\n}\n\nexport function complementIntervals(\n  start: Dayjs,\n  end: Dayjs,\n  intervals: Dayjs[][]\n) {\n  const res: Dayjs[][] = [];\n  if (intervals.length === 0) {\n    res.push([start, end]);\n    return res;\n  }\n\n  if (start.isBefore(intervals[0][0])) {\n    res.push([start, intervals[0][0]]);\n  }\n\n  for (let index = 0; index < intervals.length - 1; index++) {\n    res.push([intervals[index][1], intervals[index + 1][0]]);\n  }\n\n  if (end.isAfter(intervals[intervals.length - 1][1])) {\n    res.push([intervals[intervals.length - 1][1], end]);\n  }\n  return res;\n}\n\nfunction max(a: Dayjs, b: Dayjs) {\n  return a.isAfter(b) ? a : b;\n}\n\nexport function eliminateIntervals(intervals: Dayjs[][]) {\n  const res: Dayjs[][] = [];\n  if (intervals.length === 0) {\n    return res;\n  }\n  let currentStart = intervals[0][0];\n  let currentEnd = intervals[0][1];\n  for (let index = 1; index < intervals.length; index++) {\n    const element = intervals[index];\n    if (currentEnd.isAfter(element[0]) || currentEnd.isSame(element[0])) {\n      currentEnd = max(element[1], currentEnd);\n    } else {\n      res.push([currentStart, currentEnd]);\n      // next\n      currentStart = element[0];\n      currentEnd = element[1];\n    }\n    if (index === intervals.length - 1) {\n      res.push([currentStart, currentEnd]);\n    }\n  }\n  return res;\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/AppDataProvider.tsx",["237","238","239","240","241"],"import React, {useContext, useEffect} from 'react';\nimport _ from 'lodash';\nimport useSWR, {mutate} from 'swr';\nimport * as API from '../api';\nimport {\n  useSchedules,\n  useSchedulingLinks,\n  useUserProfile,\n  useUserSettings,\n} from '../api-hooks';\nimport {useHistory} from 'react-router-dom';\nimport {nanoid} from 'nanoid';\n\n/**\n * App data\n *  availability presets\n *\n */\nexport const AppDataContext = React.createContext<{\n  profile: any;\n  settings: any;\n  schedulingLinks: any[];\n  availabilityPresets: any[];\n\n  createSchedulingLinkAndRedirect: () => Promise<any>;\n  createSchedule: () => Promise<any>;\n  updateDisplayName: (value: string) => Promise<any>;\n  updateSlug: (value: string) => Promise<any>;\n  updateAvailabilityPreset: (id: string, update: any) => Promise<any>;\n  getAvailabilityPresetsById: (presets: string[]) => any[];\n}>({\n  profile: {},\n  settings: {},\n  schedulingLinks: [],\n  availabilityPresets: [],\n\n  createSchedulingLinkAndRedirect: () => Promise.resolve(),\n  createSchedule: () => Promise.resolve(),\n  updateDisplayName: (value: string) => Promise.resolve(),\n  updateSlug: (value: string) => Promise.resolve(),\n  updateAvailabilityPreset: (value: string, update: any) => Promise.resolve(),\n  getAvailabilityPresetsById: (presets) => [],\n});\n\nexport const useAppData = () => useContext(AppDataContext);\n\ntype Props = React.PropsWithChildren<{}>;\n\n/**\n * App Data Provider\n *\n * app data context\n *  user info\n *  links\n *  events\n *  ...\n *\n *\n *\n * @param props\n * @constructor\n */\nconst AppDataProvider = (props: Props) => {\n  let history = useHistory();\n  const {data: profile} = useUserProfile();\n  const {data: settings} = useUserSettings();\n  const {data: schedulingLinks} = useSchedulingLinks();\n  const {data: schedules} = useSchedules();\n\n  const getAvailabilityPresetsById = (presets: string[]) => {\n    if (schedules && presets) {\n      return _.flatten(\n        schedules\n          .filter((schedule: any) => presets.includes(schedule.id))\n          .map((schedule: any) => schedule.rules)\n      );\n    }\n    return [];\n  };\n\n  const createSchedulingLinkAndRedirect = async () => {\n    return API.createSchedulingLink({\n      name: '未命名',\n      description: '',\n      durations: [30],\n      location: 'loc1',\n      url: nanoid(7),\n      color: 'red',\n      fields: [],\n      email_reminders: [\n        {\n          quantity: 1,\n          units: 'hours',\n        },\n      ],\n      organizer: {\n        availability: {\n          mode: 'ranked',\n          overrides: [],\n          presets: ['39f52432cfa64661', 'ed0eb79a82ba137e', 'ff9e7d4dd2f506c5'],\n          recurringIntervals: [],\n        },\n        avatarUrl:\n          'https://secure.gravatar.com/avatar/fcb9bbfe7fa822090dce8a194ed9730d?s=256&d=404',\n        calendarId: null,\n        displayName: 'Yuanyuan Zhang',\n      },\n    }).then((r) => {\n      console.log('Resp', r);\n      mutate(`/api/scheduling_links/`);\n      history.push(`/links/${r.id}`);\n      return r;\n    });\n  };\n\n  const _updateProfile = (newValue: any) => {\n    return mutate(`/api/profile/`, {data: {...profile, ...newValue}}, false);\n  };\n\n  const _revalidateProfile = () => {\n    mutate(`/api/profile/`);\n  };\n  const _updateUserSettings = (newValue: any) => {\n    return mutate(\n      `/api/user_settings/`,\n      {data: {...settings, ...newValue}},\n      false\n    );\n  };\n\n  const _revalidateUserSettings = () => {\n    mutate(`/api/user_settings/`);\n  };\n\n  const updateDisplayName = async (value: string) => {\n    _updateProfile({display_name: value});\n    await API.updateUserProfile({display_name: value});\n    _revalidateProfile();\n    return Promise.resolve();\n  };\n\n  const updateSlug = async (value: string) => {\n    _updateProfile({slug: value});\n    await API.updateUserProfile({slug: value});\n    _revalidateProfile();\n    return Promise.resolve();\n  };\n\n  const updateAvailabilityPreset = async (id: string, updates: any) => {\n    const clone = _.cloneDeep(schedules);\n    const targetIndex = clone.findIndex((schedule: any) => schedule.id === id);\n    clone[targetIndex] = {\n      ...clone[targetIndex],\n      ...updates,\n    };\n    mutate(`/api/schedules/`, {data: clone}, false);\n    await API.updateSchedule(id, updates);\n    mutate(`/api/schedules/`);\n  };\n\n  const createSchedule = async () => {\n    const schedule = {\n      name: '未命名',\n      timezone: 'Asia / Shanghai',\n      rules: [\n        {\n          id: nanoid(),\n          byday: ['mo', 'tu', 'we', 'th', 'fr'],\n          endTime: 1020,\n          startTime: 540,\n        },\n      ],\n    };\n    schedules.push(schedule);\n    mutate(`/api/schedules/`, {data: schedules}, false);\n    await API.createSchedule(schedule);\n    mutate(`/api/schedules/`);\n  };\n\n  const removeSchedule = async () => {};\n\n  return (\n    <AppDataContext.Provider\n      value={{\n        profile,\n        settings,\n        schedulingLinks,\n\n        availabilityPresets: schedules,\n        updateAvailabilityPreset,\n\n        createSchedulingLinkAndRedirect,\n        createSchedule,\n        getAvailabilityPresetsById,\n        updateDisplayName,\n        updateSlug,\n      }}\n    >\n      {props.children}\n    </AppDataContext.Provider>\n  );\n};\n\nexport default AppDataProvider;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/utils.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/NavSidebar.tsx",["242"],"import React from 'react';\nimport {Link, useLocation} from 'react-router-dom';\nimport * as API from '../api';\nimport {useAuth} from './auth/AuthProvider';\nimport {USERNAME} from '../const';\n\nexport default function NavSidebar() {\n  const auth = useAuth();\n  const {pathname} = useLocation();\n  return (\n    <div className=\"w-full md:w-64 border-r-2 border-solid border-gray-100 pt-5\">\n      <div className=\"flex flex-col\">\n        <div className=\"pt-4 pb-4 pl-4\">\n          <div>曾光晖</div>\n          <div className=\"text-sm text-blue-500\">localhost/@{USERNAME}</div>\n        </div>\n        <div>\n          {[\n            {\n              icon: () => <i className=\"fas fa-link mr-2\" />,\n              url: '/links',\n              name: '链接',\n            },\n            {\n              icon: () => <i className=\"fas fa-calendar-check mr-2\" />,\n              url: '/events',\n              name: '日程',\n            },\n            {\n              icon: () => <i className=\"fas fa-cog mr-2\" />,\n              url: '/settings',\n              name: '设置',\n            },\n            // {url: '/availability', name: '时间管理'},\n            // {url: '/workflows', name: '工作流'},\n          ].map(({icon, url, name}) => {\n            return (\n              <Link to={url} key={url}>\n                <div\n                  className={`${\n                    pathname === url ||\n                    pathname.startsWith(url) ||\n                    (pathname === '/' && url === '/links')\n                      ? 'bg-gray-200 text-black'\n                      : 'opacity-75'\n                  } pl-4 py-2`}\n                >\n                  {icon && icon()}\n                  {name}\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n\n      <div\n        className=\"cursor-pointer hover:bg-gray-200 mt-20\"\n        onClick={() => {\n          auth.logout();\n        }}\n      >\n        Logout\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api-hooks.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/constants.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventsProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkSettings.tsx",["243"],"import React from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport _ from 'lodash';\nimport {useSchedulingLink} from '../hooks/SchedulingLinkProvider';\nimport Select from 'react-select';\nimport {nanoid} from 'nanoid';\nimport {X} from '@geist-ui/react-icons';\nimport {Button, Input, Toggle} from '@geist-ui/react';\n\nfunction SettingSection(props: any) {\n  return (\n    <div className=\"border-primary border-b border-solid py-8\">\n      <div className=\"mx-auto w-128\">{props.children}</div>\n    </div>\n  );\n}\n\ninterface SectionTitleProps extends React.PropsWithChildren<any> {\n  title: string;\n}\n\nfunction SectionTitle(props: SectionTitleProps) {\n  return <div className=\"text-xl py-2\">{props.title}</div>;\n}\n\nfunction CalendarBindingSection() {\n  // const {calendars} = useAppData()\n  // const {calendar} = useSchedulingLink()\n\n  return (\n    <SettingSection>\n      <h2>日历</h2>\n      <div>新日程将同步到选择的日历</div>\n    </SettingSection>\n  );\n}\n\ninterface SchedulingLinkFieldConfiguration {\n  label: string;\n  required: boolean;\n  type: string;\n}\n\ninterface SchedulingLinkField extends SchedulingLinkFieldConfiguration {\n  id: string;\n}\n\nfunction FieldSection() {\n  const {fields, updateSchedulingLink} = useSchedulingLink();\n\n  const updateLabel = (id: string, value: string) => {\n    const clone: SchedulingLinkField[] = _.cloneDeep(fields);\n    const field = clone.find((field) => field.id === id);\n    if (field) {\n      field.label = value;\n      updateSchedulingLink({\n        fields: clone,\n      });\n    }\n  };\n\n  const updateRequired = (id: string, value: boolean) => {\n    const clone: SchedulingLinkField[] = _.cloneDeep(fields);\n    const field = clone.find((field) => field.id === id);\n    if (field) {\n      field.required = value;\n      updateSchedulingLink({\n        fields: clone,\n      });\n    }\n  };\n\n  const addField = () => {\n    const clone: SchedulingLinkField[] = _.cloneDeep(fields);\n    clone.push({\n      id: 'f' + String(_.random(100)),\n      label: 'new question',\n      required: false,\n      type: 'long_text',\n    });\n    updateSchedulingLink({\n      fields: clone,\n    });\n  };\n\n  const removeField = (id: string) => {\n    if (fields) {\n      updateSchedulingLink({\n        fields: fields.filter((field) => field.id !== id),\n      });\n    }\n  };\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'问题'} />\n      <div className=\"flex flex-col\">\n        {fields ? (\n          fields.map((field) => {\n            return (\n              <div\n                key={field.id}\n                className=\"flex flex-row py-2 justify-between \"\n              >\n                <Input\n                  size=\"large\"\n                  // className=\"border-primary border-solid border-2 rounded\"\n                  initialValue={field.label}\n                  onChange={(e) => {\n                    updateLabel(field.id, e.target.value);\n                  }}\n                />\n                <div className=\"flex flex-row\">\n                  <div className=\"mx-1\">\n                    <Button\n                      size={'small'}\n                      auto\n                      onClick={() => {\n                        updateRequired(field.id, !field.required);\n                      }}\n                    >\n                      {field.required ? '必填' : '可选'}\n                    </Button>\n                  </div>\n                  <div className=\"mx-1\">\n                    <Button\n                      size={'small'}\n                      auto\n                      onClick={() => {\n                        removeField(field.id);\n                      }}\n                    >\n                      删除\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        ) : (\n          <div>template</div>\n        )}\n        <div className=\"w-24 pt-4\">\n          <Button onClick={addField} size={'small'}>\n            添加\n          </Button>\n        </div>\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction BufferLimitSection() {\n  const {\n    bufferBefore,\n    bufferAfter,\n    limitBookingTime,\n    updateSchedulingLink,\n  } = useSchedulingLink();\n\n  const updateBufferBefore = (value: number) => {\n    updateSchedulingLink({\n      before_buffer_time: value,\n    });\n  };\n\n  const updateBufferAfter = (value: number) => {\n    updateSchedulingLink({\n      after_buffer_time: value,\n    });\n  };\n\n  const updateLimitBookingTime = (value: number) => {\n    updateSchedulingLink({\n      max_booking_time: value,\n    });\n  };\n\n  // const {bufferBefore, bufferAfter, updateBufferBefore, updateBufferAfter, limitBookingTime, updateLimitBookingTime, limitBookingFrequency, updateLimitBookingFrequency} = useSchedulingLink()\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'缓冲时间及限制'} />\n      <div className=\"flex flex-row pt-4\">\n        <div className=\"flex flex-col\">\n          <label>约见前</label>\n          <div className=\"flex flex-row items-center mt-2 py-1 pr-2\">\n            <input\n              className=\"border-primary border-solid border-2 rounded px-2 mr-2 w-16 focus:outline-none\"\n              defaultValue={bufferBefore}\n              type=\"number\"\n              onChange={(e) => {\n                updateBufferBefore(parseInt(e.target.value));\n              }}\n            />\n            <span>分钟</span>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col ml-4\">\n          <label>约见后</label>\n          <div className=\"flex flex-row items-center mt-2 py-1 pr-2\">\n            <input\n              className=\"border-primary border-solid border-2 rounded px-2 mr-2 w-16 focus:outline-none\"\n              defaultValue={bufferAfter}\n              type=\"number\"\n              onChange={(e) => {\n                updateBufferAfter(parseInt(e.target.value));\n              }}\n            />\n            <span className=\"\">分钟</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex flex-row pt-6\">\n        <div className=\"gentle-flex mr-2\">\n          <Toggle initialChecked={true} onChange={() => {}} />\n        </div>\n        <label>限制多少天内可以预约</label>\n      </div>\n      <div className=\"flex flex-row pt-4\">\n        <input\n          className=\"border-primary border-solid border-2 rounded py-1 px-2 w-16 focus:outline-none\"\n          defaultValue={limitBookingTime / 24 / 60}\n          type=\"number\"\n          onChange={(e) => {\n            updateLimitBookingTime(parseInt(e.target.value) * 24 * 60);\n          }}\n        />\n        <span className=\"gentle-flex ml-2\">\n          <label>天</label>\n        </span>\n      </div>\n    </SettingSection>\n  );\n}\n\nconst ReminderSection = React.memo(() => {\n  const {emailReminders, updateSchedulingLink} = useSchedulingLink();\n\n  const updateEmailReminderQuantity = (id: string, value: number) => {\n    const clone = _.cloneDeep(emailReminders);\n    const reminder = clone.find((r) => r.id === id);\n    if (reminder) {\n      reminder.quantity = value;\n      updateSchedulingLink({\n        email_reminders: clone,\n      });\n    }\n  };\n\n  const updateEmailReminderUnit = (id: string, value: string) => {\n    const clone = _.cloneDeep(emailReminders);\n    const reminder = clone.find((r) => r.id === id);\n    if (reminder) {\n      reminder.units = value;\n      updateSchedulingLink({\n        email_reminders: clone,\n      });\n    }\n  };\n\n  const add = () => {\n    if (emailReminders) {\n      const clone = _.cloneDeep(emailReminders);\n      clone.push({\n        id: nanoid(),\n        quantity: 30,\n        units: 'min',\n      });\n      updateSchedulingLink({\n        email_reminders: clone,\n      });\n    }\n  };\n\n  const remove = (id: string) => {\n    if (emailReminders) {\n      updateSchedulingLink({\n        email_reminders: emailReminders.filter((r) => r.id !== id),\n      });\n    }\n  };\n\n  console.log('reminder', emailReminders);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'提醒'} />\n      <div>\n        {emailReminders &&\n          emailReminders.map(({quantity, units, id}) => {\n            return (\n              <div className=\"flex flex-row justify-between py-2\">\n                <div key={id} className=\"flex flex-row \">\n                  <input\n                    className=\"border-primary border-solid border-2 rounded py-1 px-2 w-16 focus:outline-none\"\n                    defaultValue={quantity}\n                    type=\"number\"\n                    onChange={(e) => {\n                      updateEmailReminderQuantity(id, parseInt(e.target.value));\n                    }}\n                  />\n\n                  <Select\n                    className=\"ml-2 w-32\"\n                    options={[\n                      {\n                        label: 'minutes',\n                        value: 'min',\n                      },\n                      {\n                        label: 'hours',\n                        value: 'hour',\n                      },\n                      {\n                        label: 'days',\n                        value: 'day',\n                      },\n                    ]}\n                    defaultValue={{\n                      label: 'minutes',\n                      value: 'min',\n                    }}\n                    components={{\n                      IndicatorSeparator: null,\n                    }}\n                    onChange={(option) => {\n                      if (option) {\n                        updateEmailReminderUnit(id, option.value);\n                      }\n                    }}\n                  />\n                </div>\n                <div className=\"gentle-flex\">\n                  <Button\n                    size={'small'}\n                    auto\n                    onClick={() => {\n                      remove(id);\n                    }}\n                  >\n                    删除\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n      <div className=\"w-24 pt-4\">\n        <Button onClick={add} size={'small'}>\n          添加\n        </Button>\n      </div>\n    </SettingSection>\n  );\n});\n\nexport default function SchedulingLinkSettings() {\n  let {id} = useParams();\n  return (\n    <div className=\"border-primary border-l border-solid w-full h-full\">\n      <div className=\"Header\">\n        <Link\n          to={`/links/${id}`}\n          className=\"hover:bg-gray-100 focus:outline-none text-gray-600 hover:text-black gentle-flex w-10 h-10  rounded-full\"\n        >\n          <X />\n        </Link>\n      </div>\n\n      <div className=\"w-full flex flex-col\">\n        {/*<CalendarBindingSection />*/}\n        <FieldSection />\n        <BufferLimitSection />\n        <ReminderSection />\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/Calendar.tsx",["244","245","246","247","248","249"],"import React, {useState} from 'react';\nimport FullCalendar, {\n  DateSelectArg,\n  DayHeaderContentArg,\n  EventApi,\n  EventClickArg,\n  EventContentArg,\n} from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport dayjs, {Dayjs} from 'dayjs';\nimport {\n  complementIntervals,\n  createEventId,\n  eliminateIntervals,\n  INITIAL_EVENTS,\n} from './event-utils';\nimport _ from 'lodash';\nimport zhLocale from '@fullcalendar/core/locales/zh-cn';\nimport {useSchedulingLink} from '../hooks/SchedulingLinkProvider';\nimport {dayConvertToEn} from '../utils';\nimport {EventInput} from '@fullcalendar/common';\n\nrequire('dayjs/locale/zh-cn');\nvar isToday = require('dayjs/plugin/isToday');\n\ndayjs.extend(isToday);\ndayjs.locale('zh-cn');\n\ninterface CalendarProps {\n  start: string;\n  end: string;\n  availabilityPresetsIntervals: any[];\n  availabilityOverrides: any[];\n  updateAvailabilityOverrides: (value: any) => any;\n}\n\ninterface CalendarAvailabilityControlProps {\n  handleSelectAllow: () => void;\n  handleSelectBlock: () => void;\n}\nfunction CalendarAvailabilityControl(props: CalendarAvailabilityControlProps) {\n  const {handleSelectAllow, handleSelectBlock} = props;\n  return (\n    <div\n      className=\"relative pb-4 bottom-0 w-full flex justify-center\"\n      style={{top: '-120px'}}\n    >\n      <div className=\"relative transition-all transform rounded-lg shadow-floating bg-white z-10\">\n        <div className=\"flex p-1\">\n          <button\n            type=\"button\"\n            onClick={handleSelectAllow}\n            className=\"w-32 p-3 rounded-md flex flex-col items-center text-green-600 font-medium text-sm bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150\"\n          >\n            <div className=\"-ml-px pb-1 flex items-center justify-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                className=\"feather feather-plus-square\"\n              >\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line\n                  x1=\"12\"\n                  y1=\"8\"\n                  x2=\"12\"\n                  y2=\"16\"\n                  stroke=\"currentColor\"\n                ></line>\n                <line\n                  x1=\"8\"\n                  y1=\"12\"\n                  x2=\"16\"\n                  y2=\"12\"\n                  stroke=\"currentColor\"\n                ></line>\n              </svg>\n            </div>\n            <div>Allow</div>\n          </button>\n          <button\n            type=\"button\"\n            className=\"w-32 p-3 rounded-md flex flex-col items-center text-green-600 font-medium text-sm bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150\"\n          >\n            <div className=\"-ml-px pb-1 flex items-center justify-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                className=\"feather feather-plus-square\"\n              >\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\" stroke=\"#FFF\"></line>\n                <line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\" stroke=\"#FFF\"></line>\n              </svg>\n            </div>\n            <div>Force Allow</div>\n          </button>\n          <button\n            type=\"button\"\n            onClick={handleSelectBlock}\n            className=\"w-32 p-3 rounded-md flex flex-col items-center text-red-600 font-medium text-sm bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150\"\n          >\n            <div className=\"-ml-px pb-1 flex items-center justify-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                className=\"feather feather-x-square\"\n              >\n                <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" stroke=\"#FFF\"></line>\n                <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" stroke=\"#FFF\"></line>\n              </svg>\n            </div>\n            <div>Block</div>\n          </button>\n        </div>\n        {/*  <button*/}\n        {/*    className=\"absolute flex items-center justify-center w-8 h-8 rounded-full shadow-floating bg-white hover:bg-gray-100 active:bg-gray-200 transition ease-in-out duration-150 border-2 border-white text-gray-500\"*/}\n        {/*    style={{right: '-12px; top: -12px'}}*/}\n        {/*  >*/}\n        {/*    <svg*/}\n        {/*      xmlns=\"http://www.w3.org/2000/svg\"*/}\n        {/*      width=\"16\"*/}\n        {/*      height=\"16\"*/}\n        {/*      viewBox=\"0 0 24 24\"*/}\n        {/*      fill=\"none\"*/}\n        {/*      stroke=\"currentColor\"*/}\n        {/*      stroke-width=\"2\"*/}\n        {/*      stroke-linecap=\"round\"*/}\n        {/*      stroke-linejoin=\"round\"*/}\n        {/*      className=\"feather feather-x\"*/}\n        {/*    >*/}\n        {/*      <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>*/}\n        {/*      <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>*/}\n        {/*    </svg>*/}\n        {/*  </button>*/}\n      </div>\n    </div>\n  );\n}\n\n/**\n * display events, presets & overrides\n *\n *\n * @param props\n * @constructor\n */\nfunction Calendar(props: CalendarProps) {\n  // read availability from scheduling link\n  // presets, id => value\n  const {\n    availabilityPresetsIntervals,\n    availabilityOverrides,\n    updateAvailabilityOverrides,\n  } = props;\n\n  const [selectInfo, setSelectInfo] = useState<DateSelectArg | null>(null);\n\n  const handleWeekendsToggle = () => {\n    // this.setState({\n    //   weekendsVisible: !weekendsVisible\n    // })\n  };\n\n  const handleSelectAllow = () => {\n    if (selectInfo) {\n      console.log('handleAllowSelect', selectInfo);\n      const copy = _.cloneDeep(availabilityOverrides);\n      copy.push({\n        startAt: selectInfo.startStr,\n        endAt: selectInfo.endStr,\n        type: 'allow',\n      });\n      updateAvailabilityOverrides(copy);\n    }\n  };\n\n  const handleSelectBlock = () => {\n    if (selectInfo) {\n      console.log('handleSelectBlock', selectInfo);\n      const copy = _.cloneDeep(availabilityOverrides);\n      copy.push({\n        startAt: selectInfo.startStr,\n        endAt: selectInfo.endStr,\n        type: 'block',\n      });\n      updateAvailabilityOverrides(copy);\n    }\n  };\n\n  const handleDateSelect = (selectInfo: DateSelectArg) => {\n    // let title = prompt('Please enter a new title for your event')\n    let title = 'new event';\n    let calendarApi = selectInfo.view.calendar;\n\n    // calendarApi.unselect() // clear date selection\n\n    console.log('select', selectInfo);\n\n    setSelectInfo(selectInfo);\n\n    // console.log('select', selectInfo.endStr, dayjs(selectInfo.end).subtract(15, 'minutes').toISOString())\n\n    // if (title) {\n    //   calendarApi.addEvent({\n    //     id: createEventId(),\n    //     title,\n    //     start: selectInfo.startStr,\n    //     end: selectInfo.endStr,\n    //     // end: dayjs(selectInfo.end).subtract(15, 'minutes').toISOString(),\n    //     allDay: selectInfo.allDay\n    //   })\n    // }\n  };\n\n  const handleEventClick = (clickInfo: EventClickArg) => {\n    // if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n    //     clickInfo.event.remove()\n    // }\n  };\n\n  const handleEvents = (events: EventApi[]) => {\n    // this.setState({\n    //   currentEvents: events\n    // })\n  };\n\n  const renderDayHeaderContent = (props: DayHeaderContentArg) => {\n    const date = dayjs(props.date);\n    return (\n      <div>\n        {\n          // @ts-ignore\n          date.isToday() ? (\n            <>\n              <div className=\"text-xs font-medium text-gray-600\">\n                {date.format('ddd')}\n              </div>\n              <div className=\"mb-2 flex justify-center\">\n                <div className=\"flex items-center justify-center w-10 h-10 rounded-full text-2xl bg-blue-500 text-white font-bold\">\n                  {date.format('D')}\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"text-xs font-medium text-gray-600\">\n                {date.format('ddd')}\n              </div>\n              <div className=\"mb-2 flex justify-center\">\n                <div className=\"flex items-center justify-center w-10 h-10 rounded-full text-2xl text-gray-700 font-medium\">\n                  {date.format('D')}\n                </div>\n              </div>\n            </>\n          )\n        }\n      </div>\n    );\n  };\n\n  /**\n   * availabilityOverrides\n   * availabilityPresetsIntervals\n   */\n  const getBackgroundEvents = (\n    arg: {\n      start: Date;\n      end: Date;\n      startStr: string;\n      endStr: string;\n      timeZone: string;\n    },\n    successCallback: (events: EventInput[]) => void,\n    failureCallback: (error: any) => any\n  ) => {\n    const startDate = dayjs(arg.start);\n    const endDate = dayjs(arg.end);\n\n    const allowOverrides = availabilityOverrides.filter(\n      (e: any) => e.type === 'allow'\n    );\n    const blockOverrides = availabilityOverrides.filter(\n      (e: any) => e.type === 'block'\n    );\n\n    const intervals: Dayjs[][] = [];\n    let date = startDate.clone();\n    while (!date.isSame(endDate)) {\n      const day = dayConvertToEn(date.format('dd').toLowerCase());\n      availabilityPresetsIntervals.forEach((settings) => {\n        if (settings.byday.findIndex((d: string) => d === day) > -1) {\n          let startTime = date.add(settings.startTime, 'minute');\n          let endTime = date.add(settings.endTime, 'minute');\n          intervals.push([startTime, endTime]);\n        }\n      });\n      date = date.add(1, 'day');\n    }\n\n    // overrides intervals\n    // push allow overrides\n    allowOverrides.forEach((override) => {\n      intervals.push([dayjs(override.startAt), dayjs(override.endAt)]);\n    });\n    const sortedIntervals = _.sortBy(intervals, (e) => e[0].valueOf());\n    const eliminatedIntervals = eliminateIntervals(sortedIntervals);\n\n    const complementedIntervals = complementIntervals(\n      startDate,\n      endDate,\n      eliminatedIntervals\n    );\n    // push block overrides\n    blockOverrides.forEach((override) => {\n      complementedIntervals.push([\n        dayjs(override.startAt),\n        dayjs(override.endAt),\n      ]);\n    });\n    complementedIntervals.push([startDate, dayjs()]);\n    const sortedIntervals2 = _.sortBy(complementedIntervals, (e) =>\n      e[0].valueOf()\n    );\n    const eliminatedIntervals2 = eliminateIntervals(sortedIntervals2);\n\n    successCallback(\n      eliminatedIntervals2.map((interval) => {\n        return {\n          id: createEventId(),\n          start: interval[0].toISOString(),\n          end: interval[1].toISOString(),\n          className: 'sc-unavailable',\n          display: 'background',\n        };\n      })\n    );\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"\">\n        <FullCalendar\n          height=\"1200px\"\n          contentHeight=\"900px\"\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          headerToolbar={{\n            left: 'title',\n            // center: '',\n            right: 'today prev,next',\n          }}\n          weekNumberCalculation=\"ISO\"\n          initialView=\"timeGridWeek\"\n          slotDuration=\"00:30:00\"\n          snapDuration=\"00:15:00\"\n          slotLabelInterval=\"01:00\"\n          slotMinTime=\"06:00:00\"\n          dayHeaderContent={renderDayHeaderContent}\n          editable={true}\n          selectable={true}\n          allDaySlot={false}\n          // dayMaxEvents={true}\n          weekends={true}\n          events={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n          eventSources={[\n            {\n              events: getBackgroundEvents,\n              display: 'background',\n            },\n          ]}\n          select={handleDateSelect}\n          eventContent={renderEventContent} // custom render function\n          // eventClick={this.handleEventClick}\n          // eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n          dateClick={function (info) {\n            // alert('clicked ' + info.dateStr);\n          }}\n          nowIndicator={true}\n          /* you can update a remote database when these fire:\n                    eventAdd={function(){}}\n                    eventChange={function(){}}\n                    eventRemove={function(){}}\n                    */\n          locale={zhLocale}\n        />\n      </div>\n\n      <CalendarAvailabilityControl\n        handleSelectAllow={handleSelectAllow}\n        handleSelectBlock={handleSelectBlock}\n      />\n    </div>\n  );\n}\n\nfunction renderEventContent(eventContent: EventContentArg) {\n  return (\n    <>\n      {/* <b>{eventContent.timeText}</b>\n      <i>{eventContent.event.title}</i> */}\n    </>\n  );\n}\n\nfunction CalendarWrapper() {\n  // read availability from scheduling link\n  // presets, id => value\n  const {\n    availabilityPresetsIntervals,\n    availabilityOverrides,\n    updateAvailabilityOverrides,\n  } = useSchedulingLink();\n  return (\n    <Calendar\n      start={''}\n      end={''}\n      availabilityOverrides={availabilityOverrides}\n      availabilityPresetsIntervals={availabilityPresetsIntervals}\n      updateAvailabilityOverrides={updateAvailabilityOverrides}\n    />\n  );\n}\n\nexport default CalendarWrapper;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/SchedulingLinkProvider.tsx",["250","251"],"import React, {useContext, useEffect, useState} from 'react';\nimport useSWR, {mutate} from 'swr';\nimport {useAppData} from './AppDataProvider';\nimport {useLink} from '../api-hooks';\nimport * as API from '../api';\nimport _ from 'lodash';\n\nexport const SchedulingLinkContext = React.createContext<{\n  slug: string;\n  name: string;\n  description: string;\n  durations: string[];\n  location: string;\n  availability: any;\n  availabilityPresets: string[];\n  availabilityPresetsIntervals: any[];\n  availabilityOverrides: any[];\n  fields: any[];\n  bufferBefore: number;\n  bufferAfter: number;\n  limitBookingTime: number;\n  emailReminders: any[];\n  organizer: any;\n\n  updateSlug: (value: string) => Promise<any>;\n  updateName: (value: string) => Promise<any>;\n  updateDescription: (value: string) => Promise<any>;\n  updateDurations: (value: number[]) => Promise<any>;\n  updateLocation: (value: string) => Promise<any>;\n  updateAvailability: (value: any) => Promise<any>;\n  updateAvailabilityPresets: (value: string[] | null) => Promise<any>;\n  updateAvailabilityOverrides: (value: any) => Promise<any>;\n\n  updateSchedulingLink: (value: any) => Promise<any>;\n}>({\n  slug: '',\n  name: '',\n  description: '',\n  durations: [''],\n  location: '',\n  availability: {},\n  availabilityPresets: [],\n  availabilityPresetsIntervals: [],\n  availabilityOverrides: [],\n  fields: [],\n  bufferBefore: 0,\n  bufferAfter: 0,\n  limitBookingTime: 0,\n  emailReminders: [],\n  organizer: {},\n\n  updateSlug: (value: string) => Promise.resolve({}),\n  updateName: (value: string) => Promise.resolve({}),\n  updateDescription: (value: string) => Promise.resolve({}),\n  updateDurations: (value: number[]) => Promise.resolve({}),\n  updateLocation: (value: string) => Promise.resolve({}),\n  updateAvailability: (value: any) => Promise.resolve({}),\n  updateAvailabilityPresets: (value: string[] | null) => Promise.resolve({}),\n  updateAvailabilityOverrides: (value: any) => Promise.resolve({}),\n\n  updateSchedulingLink: (value: any) => Promise.resolve({}),\n});\n\nexport const useSchedulingLink = () => useContext(SchedulingLinkContext);\n\ntype Props = React.PropsWithChildren<{\n  linkId: string;\n}>;\n\nconst SchedulingLinkProvider = (props: Props) => {\n  const {data: link, isLoading, isError} = useLink(props.linkId);\n  const {settings, getAvailabilityPresetsById} = useAppData();\n  const [presetsIntervals, setPresetsIntervals] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (link && link.organizer && link.organizer.availability) {\n      setPresetsIntervals(\n        getAvailabilityPresetsById(link.organizer.availability.presets)\n      );\n    }\n  }, [settings, link]);\n\n  const [overrides, setOverrides] = useState<any[]>([\n    {\n      startAt: '2021-01-19T02:00:00Z',\n      endAt: '2021-01-19T07:00:00Z',\n      type: 'block',\n    },\n    {\n      startAt: '2021-01-18T02:00:00Z',\n      endAt: '2021-01-18T08:00:00Z',\n      type: 'block',\n    },\n    {\n      startAt: '2021-01-23T02:00:00Z',\n      endAt: '2021-01-23T08:00:00Z',\n      type: 'allow',\n    },\n  ]);\n\n  if (isLoading) return <div>Loading</div>;\n  if (isError) return <div>Error</div>;\n\n  const _update = (newValue: any) => {\n    return mutate(\n      `/api/scheduling_links/${props.linkId}`,\n      {data: {...link, ...newValue}},\n      false\n    );\n  };\n\n  const _revalidate = () => {\n    mutate(`/api/scheduling_links/${props.linkId}`);\n    mutate('/api/scheduling_links');\n  };\n\n  const updateSlug = async (value: string) => {\n    _update({url: value});\n    await API.updateSchedulingLink(link.id, {url: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateName = async (value: string) => {\n    _update({name: value});\n    await API.updateSchedulingLink(link.id, {name: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateDescription = async (value: string) => {\n    _update({description: value});\n    await API.updateSchedulingLink(link.id, {description: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateDurations = async (value: number[]) => {\n    _update({durations: value});\n    await API.updateSchedulingLink(link.id, {durations: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateLocation = async (value: string) => {\n    _update({location: value});\n    await API.updateSchedulingLink(link.id, {location: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateAvailability = (value: any) => {\n    _update({description: value});\n    // await API.updateSchedulingLinkDescription\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateAvailabilityPresets = async (value: string[] | null) => {\n    if (link.organizer) {\n      const clone = _.cloneDeep(link.organizer);\n      return updateSchedulingLink({\n        organizer: {\n          ...clone,\n          availability: {\n            ...clone.availability,\n            presets: value,\n          },\n        },\n      });\n    } else {\n      return updateSchedulingLink({\n        organizer: {\n          availability: {\n            presets: value,\n          },\n        },\n      });\n    }\n  };\n\n  const updateAvailabilityOverrides = (value: any) => {\n    setOverrides(value);\n    return Promise.resolve();\n  };\n\n  const updateSchedulingLink = async (updates: any) => {\n    _update(updates);\n    await API.updateSchedulingLink(link.id, updates);\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  return (\n    <SchedulingLinkContext.Provider\n      value={{\n        slug: link.url,\n        name: link.name,\n        description: link.description,\n        durations: link.durations,\n        location: link.location,\n        availability: link.organizer?.availability,\n        availabilityPresets: link.organizer?.availability?.presets,\n        availabilityPresetsIntervals: presetsIntervals,\n        availabilityOverrides: overrides,\n        fields: link.fields,\n        bufferBefore: link.before_buffer_time,\n        bufferAfter: link.after_buffer_time,\n        limitBookingTime: link.max_booking_time,\n        emailReminders: link.email_reminders,\n        organizer: {\n          id: '',\n          avatarUrl:\n            'https://secure.gravatar.com/avatar/fcb9bbfe7fa822090dce8a194ed9730d?s=256&d=404',\n          displayName: 'Yuanyuan Zhang',\n          availability: {\n            mode: 'ranked',\n            overrides: [],\n            presets: ['1ac33b81-c2cc-43be-90e5-2cd25685bfd8'],\n            recurringIntervals: [],\n          },\n        },\n\n        updateSlug,\n        updateName,\n        updateDescription,\n        updateDurations,\n        updateLocation,\n        updateAvailability,\n        updateAvailabilityPresets,\n        updateAvailabilityOverrides,\n\n        updateSchedulingLink,\n      }}\n    >\n      {props.children}\n    </SchedulingLinkContext.Provider>\n  );\n};\n\nexport default SchedulingLinkProvider;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/SchedulingLinkCard.tsx",["252","253","254","255","256"],"import React, {useEffect} from 'react';\n\nimport {\n  Card,\n  ICardTokens,\n  ICardSectionStyles,\n  ICardSectionTokens,\n} from '@fluentui/react-cards';\nimport {Link} from 'react-router-dom';\n\nexport default function SchedulingLinkCard(props: any) {\n  const {schedulingLink} = props;\n  const {id} = schedulingLink;\n\n  const footerCardSectionTokens: ICardSectionTokens = {\n    padding: '12px 0px 0px',\n  };\n  return (\n    <div>\n      <Link to={`/links/${id}`}>\n        <div className=\"h-32 group cursor-pointer rounded-lg p-4 border border-gray-200 hover:bg-light-blue-500 hover:border-transparent hover:shadow-lg\">\n          <dl className=\"grid sm:block lg:grid xl:block grid-cols-2 grid-rows-2 items-center\">\n            <div className=\"pb-5\">\n              <dt className=\"sr-only\">Title</dt>\n              <dd className=\"leading-6 font-medium text-black group-hover:text-white\">\n                {schedulingLink?.name}\n              </dd>\n            </div>\n            <div>{schedulingLink?.description}</div>\n          </dl>\n        </div>\n      </Link>\n    </div>\n  );\n}\n",["257","258"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/utils.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/const.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/AuthProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Register.tsx",["259","260"],"import React, {useEffect, useState} from 'react';\nimport {RouteComponentProps, Link} from 'react-router-dom';\nimport {useAuth} from './AuthProvider';\nimport logger from '../../logger';\nimport {\n  ITextFieldStyles,\n  Label,\n  MessageBar,\n  MessageBarType,\n  PrimaryButton,\n  TextField,\n} from '@fluentui/react';\n\n\nconst Register2 = (props: any) => {\n  const [email, setEmail] = useState<string | undefined>(undefined);\n  const [password, setPassword] = useState<string | undefined>(undefined);\n  const [passwordConfirmation, setPasswordConfirmation] = useState();\n  const [submitted, setSubmitted] = useState<boolean>(false);\n  const [redirect, setRedirect] = useState('/');\n  const [error, setError] = useState<any>(null);\n  const [loading, setLoading] = useState<boolean | null>(null);\n\n  useEffect(() => {}, []);\n\n  const handleChangeEmail = (e: any) => {\n    setEmail(e.target.value);\n    setError(null);\n    setLoading(null);\n  };\n\n  const handleChangePassword = (e: any) => {\n    setPassword(e.target.value);\n    setError(null);\n    setLoading(null);\n  };\n\n  const handleChangePasswordConfirmation = (e: any) => {\n    setPasswordConfirmation(e.target.value);\n  };\n\n  const getValidationError = () => {\n    if (!email) {\n      return 'Email is required';\n    } else if (!password) {\n      return 'Password is required';\n    } else if (password.length < 8) {\n      return 'Password must be at least 8 characters';\n    } else if (password !== passwordConfirmation) {\n      return 'Password confirmation does not match';\n    } else {\n      return null;\n    }\n  };\n  const handleInputBlur = () => {\n    if (!submitted) {\n      return;\n    }\n\n    setError(getValidationError());\n  };\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n\n    const error = getValidationError();\n\n    if (error) {\n      setError(error);\n      setSubmitted(false);\n      return;\n    }\n\n    setLoading(true);\n    setSubmitted(true);\n    setError(null);\n\n    props\n      .onSubmit({\n        companyName: 'x',\n        // inviteToken: '',\n        email,\n        password,\n        passwordConfirmation,\n      })\n      .then(() => props.history.push(redirect))\n      .catch((err: any) => {\n        logger.error('Error!', err);\n        // TODO: provide more granular error messages?\n        const error =\n          err.response?.body?.error?.message || 'Invalid credentials';\n\n        setError(error);\n        setLoading(false);\n      });\n  };\n  const textFieldStyles: Partial<ITextFieldStyles> = {\n    field: {height: 50, fontSize: '1rem', color: 'black', padding: '12px 16px'},\n    fieldGroup: {height: 52, border: '1px black solid'},\n    revealButton: {height: 50},\n  };\n\n  return (\n    <div className=\"h-screen gentle-flex\">\n      <div\n        className=\"border-true-gray-200 border-2 border-solid flex flex-col rounded\"\n        style={{\n          width: '464px',\n          // height: '554px',\n        }}\n      >\n        <div\n          className=\"w-full\"\n          style={{\n            padding: '64px',\n          }}\n        >\n          <div\n            className=\"font-medium\"\n            style={{fontSize: '36px', marginBottom: '24px'}}\n          >\n            Sign up\n          </div>\n          <form onSubmit={handleSubmit}>\n            <div style={{paddingBottom: '24px'}}>\n              <Label>Email</Label>\n              <TextField\n                type=\"email\"\n                styles={textFieldStyles}\n                onChange={handleChangeEmail}\n                value={email}\n                id={'email'}\n                onBlur={handleInputBlur}\n              />\n            </div>\n            <div style={{paddingBottom: '24px'}}>\n              <Label>Password</Label>\n              <TextField\n                id=\"password\"\n                type=\"password\"\n                styles={textFieldStyles}\n                onChange={handleChangePassword}\n                value={password}\n                canRevealPassword\n                onBlur={handleInputBlur}\n              />\n            </div>\n            <div style={{paddingBottom: '24px'}}>\n              <Label>Confirm Password</Label>\n              <TextField\n                id=\"confirm_password\"\n                type=\"password\"\n                styles={textFieldStyles}\n                onChange={handleChangePasswordConfirmation}\n                value={passwordConfirmation}\n                canRevealPassword\n                onBlur={handleInputBlur}\n              />\n            </div>\n\n            <PrimaryButton\n              className=\"login-button\"\n              text=\"Submit\"\n              type=\"submit\"\n            />\n\n            {error && (\n              <MessageBar\n                messageBarType={MessageBarType.error}\n                isMultiline={false}\n                // onDismiss={p.resetChoice}\n                dismissButtonAriaLabel=\"Close\"\n                className=\"mt-5\"\n              >\n                {error}\n              </MessageBar>\n            )}\n          </form>\n\n          {/*<DefaultButton text=\"使用微信登录\"/>*/}\n          {/*<DefaultButton text=\"使用飞书登录\"/>*/}\n        </div>\n        <div\n          className=\"\"\n          style={{\n            paddingRight: '64px',\n            paddingLeft: '64px',\n            paddingBottom: '64px',\n          }}\n        >\n          <Link to=\"/login\">\n            <span\n              className=\"border-b-2 border-solid\"\n              style={{\n                color: '#2251ff',\n                borderColor: '#2251ff',\n              }}\n            >\n              登录已有账号\n            </span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst RegisterPage = (props: RouteComponentProps) => {\n  const auth = useAuth();\n\n  return <Register2 {...props} onSubmit={auth.register} />;\n};\n\nexport default RegisterPage;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/Login.tsx",["261","262","263","264"],"import React, {useEffect, useState} from 'react';\nimport {RouteComponentProps, Link} from 'react-router-dom';\nimport {Box, Flex} from 'theme-ui';\nimport qs from 'query-string';\nimport {\n  TextField,\n  Label,\n  ITextFieldStyles,\n  PrimaryButton,\n  MessageBar,\n  MessageBarType,\n  DefaultButton,\n} from '@fluentui/react';\nimport {Button, Input, Text, Title} from '../../components/common';\nimport {useAuth} from './AuthProvider';\nimport logger from '../../logger';\n\ntype Props = RouteComponentProps & {\n  onSubmit: (params: any) => Promise<void>;\n};\ntype State = {\n  loading: boolean;\n  email: string;\n  password: string;\n  error: any;\n  redirect: string;\n};\n\nclass Login extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    email: '',\n    password: '',\n    error: null,\n    redirect: '/',\n  };\n\n  componentDidMount() {\n    const {redirect = '/'} = qs.parse(this.props.location.search);\n\n    this.setState({redirect: String(redirect)});\n  }\n\n  handleChangeEmail = (e: any) => {\n    this.setState({email: e.target.value});\n  };\n\n  handleChangePassword = (e: any) => {\n    this.setState({password: e.target.value});\n  };\n\n  handleSubmit = (e: any) => {\n    e.preventDefault();\n\n    this.setState({loading: true, error: null});\n    const {email, password, redirect} = this.state;\n\n    // TODO: handle login through API\n    this.props\n      .onSubmit({email, password})\n      .then(() => this.props.history.push(redirect))\n      .catch((err) => {\n        logger.error('Error!', err);\n        const error =\n          err.response?.body?.error?.message || 'Invalid credentials';\n\n        this.setState({error, loading: false});\n      });\n  };\n\n  render() {\n    const {location} = this.props;\n    const {loading, email, password, error} = this.state;\n\n    return (\n      <Flex\n        px={[2, 5]}\n        py={5}\n        sx={{\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <Box sx={{width: '100%', maxWidth: 320}}>\n          <Title level={1}>Welcome back</Title>\n\n          <form onSubmit={this.handleSubmit}>\n            <Box mb={2}>\n              <label htmlFor=\"email\">Email</label>\n              <Input\n                id=\"email\"\n                size=\"large\"\n                type=\"email\"\n                autoComplete=\"username\"\n                value={email}\n                onChange={this.handleChangeEmail}\n              />\n            </Box>\n\n            <Box mb={2}>\n              <label htmlFor=\"password\">Password</label>\n              <Input\n                id=\"password\"\n                size=\"large\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={this.handleChangePassword}\n              />\n            </Box>\n\n            <Box mt={3}>\n              <Button\n                block\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={loading}\n              >\n                Log in\n              </Button>\n            </Box>\n\n            {error && (\n              <Box mt={2}>\n                <Text type=\"danger\">{error}</Text>\n              </Box>\n            )}\n\n            <Box mt={error ? 3 : 4}>\n              Don't have an account?{' '}\n              <Link to={`/register${location.search}`}>Sign up!</Link>\n            </Box>\n            <Box my={3}>\n              <Link to=\"/reset-password\">Forgot your password?</Link>\n            </Box>\n          </form>\n        </Box>\n      </Flex>\n    );\n  }\n}\n\nconst Login2 = (props: any) => {\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [redirect, setRedirect] = useState('/');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState<boolean | null>(null);\n\n  useEffect(() => {}, []);\n\n  const handleChangeEmail = (e: any) => {\n    setEmail(e.target.value);\n    setError(null);\n    setLoading(null);\n  };\n\n  const handleChangePassword = (e: any) => {\n    setPassword(e.target.value);\n    setError(null);\n    setLoading(null);\n  };\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n\n    setError(null);\n    setLoading(null);\n\n    // TODO: handle login through API\n    props\n      .onSubmit({email, password})\n      .then(() => props.history.push(redirect))\n      .catch((err: any) => {\n        logger.error('Error!', err);\n        const error =\n          err.response?.body?.error?.message || 'Invalid credentials';\n        setError(error);\n        setLoading(false);\n      });\n  };\n\n  const textFieldStyles: Partial<ITextFieldStyles> = {\n    field: {height: 50, fontSize: '1rem', color: 'black', padding: '12px 16px'},\n    fieldGroup: {height: 52, border: '1px black solid'},\n    revealButton: {height: 50},\n  };\n\n  return (\n    <div className=\"h-screen gentle-flex\">\n      <div\n        className=\"border-true-gray-200 border-2 border-solid flex flex-col rounded\"\n        style={{\n          width: '464px',\n          // height: '554px',\n        }}\n      >\n        <div\n          className=\"w-full\"\n          style={{\n            padding: '64px',\n          }}\n        >\n          <div\n            className=\"font-medium\"\n            style={{fontSize: '36px', marginBottom: '24px'}}\n          >\n            Sign in\n          </div>\n          <form onSubmit={handleSubmit}>\n            <div style={{paddingBottom: '24px'}}>\n              <Label>Email</Label>\n              <TextField\n                type=\"email\"\n                styles={textFieldStyles}\n                onChange={handleChangeEmail}\n                value={email}\n                id={'email'}\n              />\n            </div>\n            <div style={{paddingBottom: '24px'}}>\n              <Label>Password</Label>\n              <TextField\n                id=\"password\"\n                type=\"password\"\n                styles={textFieldStyles}\n                onChange={handleChangePassword}\n                value={password}\n                canRevealPassword\n              />\n            </div>\n            <PrimaryButton\n              className=\"login-button\"\n              text=\"Submit\"\n              type=\"submit\"\n            />\n\n            {error && (\n              <MessageBar\n                messageBarType={MessageBarType.error}\n                isMultiline={false}\n                // onDismiss={p.resetChoice}\n                dismissButtonAriaLabel=\"Close\"\n                className=\"mt-5\"\n              >\n                {error}\n              </MessageBar>\n            )}\n          </form>\n\n          {/*<DefaultButton text=\"使用微信登录\"/>*/}\n          {/*<DefaultButton text=\"使用飞书登录\"/>*/}\n        </div>\n        <div\n          className=\"\"\n          style={{\n            paddingRight: '64px',\n            paddingLeft: '64px',\n            paddingBottom: '64px',\n          }}\n        >\n          <Link to=\"/register\">\n            <span\n              className=\"border-b-2 border-solid\"\n              style={{\n                color: '#2251ff',\n                borderColor: '#2251ff',\n              }}\n            >\n              注册账号\n            </span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst LoginPage = (props: RouteComponentProps) => {\n  const auth = useAuth();\n\n  return <Login2 {...props} onSubmit={auth.login} />;\n};\n\nexport default LoginPage;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordReset.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/EmailVerification.tsx",["265"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/RequestPasswordReset.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/auth/PasswordResetRequested.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/landing/LandingPage.tsx",["266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286"],"import React, {useEffect, useState} from 'react';\nimport {\n  useLocation,\n  Switch,\n  Redirect,\n  Route,\n  Link,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nexport default function LandingPage() {\n  return (\n    <div className=\"flex flex-col\">\n      <header className=\"text-gray-600 body-font\">\n        <div className=\"container mx-auto flex flex-wrap p-5 flex-col md:flex-row items-center\">\n          <a className=\"flex title-font font-medium items-center text-gray-900 mb-4 md:mb-0\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              className=\"w-10 h-10 text-white p-2 bg-blue-500 rounded-full\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\" />\n            </svg>\n            <span className=\"ml-3 text-xl\">有期</span>\n          </a>\n          <nav className=\"md:ml-auto flex flex-wrap items-center text-base justify-center\">\n            <a className=\"mr-5 hover:text-gray-900 cursor-pointer\">产品</a>\n            <a className=\"mr-5 hover:text-gray-900 cursor-pointer\">价格</a>\n            <a className=\"mr-5 hover:text-gray-900 cursor-pointer\">集成</a>\n            <a className=\"mr-5 hover:text-gray-900 cursor-pointer\">解决方案</a>\n            <a className=\"mr-5 hover:text-gray-900 cursor-pointer\">团队版</a>\n          </nav>\n          <Link to=\"/login\">\n            <span className=\"mr-5 inline-flex items-center  border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0 cursor-pointer\">\n              登录\n            </span>\n          </Link>\n          <Link to=\"/register\">\n            <span className=\"inline-flex items-center bg-blue-500 border-0 py-1 px-3 focus:outline-none hover:bg-blue-600 rounded text-white mt-4 md:mt-0 cursor-pointer\">\n              注册\n            </span>\n          </Link>\n        </div>\n      </header>\n      <section className=\"text-gray-600 body-font\">\n        <div className=\"container mx-auto flex px-5 py-24 md:flex-row flex-col items-center\">\n          <div className=\"lg:flex-grow md:w-1/2 lg:pr-24 md:pr-16 flex flex-col md:items-start md:text-left mb-16 md:mb-0 items-center text-center\">\n            <h1 className=\"title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900\">\n              简单高效安排会面\n            </h1>\n            <p className=\"mb-8 leading-relaxed\">让您的时间井井有条</p>\n            <div className=\"flex justify-center\">\n              <Link to=\"/register\">\n                <span className=\"inline-flex text-white bg-blue-500 border-0 py-2 px-6 focus:outline-none hover:bg-blue-600 rounded text-lg\">\n                  开始免费使用\n                </span>\n              </Link>\n              {/* <button\n                        class=\"ml-4 inline-flex text-gray-700 bg-gray-100 border-0 py-2 px-6 focus:outline-none hover:bg-gray-200 rounded text-lg\">Button</button>\n                    */}\n            </div>\n          </div>\n          <div className=\"lg:max-w-lg lg:w-full md:w-1/2 w-5/6\">\n            <img\n              className=\"object-cover object-center rounded\"\n              alt=\"hero\"\n              src=\"https://dummyimage.com/720x600\"\n            />\n          </div>\n        </div>\n      </section>\n      <section className=\"text-gray-600 body-font\">\n        <div className=\"container px-5 py-24 mx-auto flex flex-wrap\">\n          <div className=\"flex flex-wrap w-full\">\n            <div className=\"lg:w-2/5 md:w-1/2 md:pr-10 md:py-6\">\n              <div className=\"flex relative pb-12\">\n                <div className=\"h-full w-10 absolute inset-0 flex items-center justify-center\">\n                  <div className=\"h-full w-1 bg-gray-200 pointer-events-none\" />\n                </div>\n                <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-blue-500 inline-flex items-center justify-center text-white relative z-10\">\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-5 h-5\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\" />\n                  </svg>\n                </div>\n                <div className=\"flex-grow pl-4\">\n                  <h2 className=\"font-medium title-font text-sm text-gray-900 mb-1 tracking-wider\">\n                    STEP 1\n                  </h2>\n                  <p className=\"leading-relaxed\">\n                    VHS cornhole pop-up, try-hard 8-bit iceland helvetica.\n                    Kinfolk bespoke try-hard cliche palo santo offal.\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex relative pb-12\">\n                <div className=\"h-full w-10 absolute inset-0 flex items-center justify-center\">\n                  <div className=\"h-full w-1 bg-gray-200 pointer-events-none\" />\n                </div>\n                <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-blue-500 inline-flex items-center justify-center text-white relative z-10\">\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-5 h-5\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\" />\n                  </svg>\n                </div>\n                <div className=\"flex-grow pl-4\">\n                  <h2 className=\"font-medium title-font text-sm text-gray-900 mb-1 tracking-wider\">\n                    STEP 2\n                  </h2>\n                  <p className=\"leading-relaxed\">\n                    Vice migas literally kitsch +1 pok pok. Truffaut hot chicken\n                    slow-carb health goth, vape typewriter.\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex relative pb-12\">\n                <div className=\"h-full w-10 absolute inset-0 flex items-center justify-center\">\n                  <div className=\"h-full w-1 bg-gray-200 pointer-events-none\" />\n                </div>\n                <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-blue-500 inline-flex items-center justify-center text-white relative z-10\">\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-5 h-5\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <circle cx={12} cy={5} r={3} />\n                    <path d=\"M12 22V8M5 12H2a10 10 0 0020 0h-3\" />\n                  </svg>\n                </div>\n                <div className=\"flex-grow pl-4\">\n                  <h2 className=\"font-medium title-font text-sm text-gray-900 mb-1 tracking-wider\">\n                    STEP 3\n                  </h2>\n                  <p className=\"leading-relaxed\">\n                    Coloring book nar whal glossier master cleanse umami. Salvia\n                    +1 master cleanse blog taiyaki.\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex relative pb-12\">\n                <div className=\"h-full w-10 absolute inset-0 flex items-center justify-center\">\n                  <div className=\"h-full w-1 bg-gray-200 pointer-events-none\" />\n                </div>\n                <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-blue-500 inline-flex items-center justify-center text-white relative z-10\">\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-5 h-5\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2\" />\n                    <circle cx={12} cy={7} r={4} />\n                  </svg>\n                </div>\n                <div className=\"flex-grow pl-4\">\n                  <h2 className=\"font-medium title-font text-sm text-gray-900 mb-1 tracking-wider\">\n                    STEP 4\n                  </h2>\n                  <p className=\"leading-relaxed\">\n                    VHS cornhole pop-up, try-hard 8-bit iceland helvetica.\n                    Kinfolk bespoke try-hard cliche palo santo offal.\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex relative\">\n                <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-blue-500 inline-flex items-center justify-center text-white relative z-10\">\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-5 h-5\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M22 11.08V12a10 10 0 11-5.93-9.14\" />\n                    <path d=\"M22 4L12 14.01l-3-3\" />\n                  </svg>\n                </div>\n                <div className=\"flex-grow pl-4\">\n                  <h2 className=\"font-medium title-font text-sm text-gray-900 mb-1 tracking-wider\">\n                    FINISH\n                  </h2>\n                  <p className=\"leading-relaxed\">\n                    Pitchfork ugh tattooed scenester echo park gastropub\n                    whatever cold-pressed retro.\n                  </p>\n                </div>\n              </div>\n            </div>\n            <img\n              className=\"lg:w-3/5 md:w-1/2 object-cover object-center rounded-lg md:mt-0 mt-12\"\n              src=\"https://dummyimage.com/1200x500\"\n              alt=\"step\"\n            />\n          </div>\n        </div>\n      </section>\n      <section className=\"text-gray-600 body-font\">\n        <div className=\"container px-5 py-24 mx-auto\">\n          <h1 className=\"sm:text-3xl text-2xl font-medium title-font text-center text-gray-900 mb-20\">\n            Raw Denim Heirloom Man Braid <br className=\"hidden sm:block\" />\n            Selfies Wayfarers\n          </h1>\n          <div className=\"flex flex-wrap sm:-m-4 -mx-4 -mb-10 -mt-4 md:space-y-0 space-y-6\">\n            <div className=\"p-4 md:w-1/3 flex\">\n              <div className=\"w-12 h-12 inline-flex items-center justify-center rounded-full bg-blue-100 text-blue-500 mb-4 flex-shrink-0\">\n                <svg\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  className=\"w-6 h-6\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\" />\n                </svg>\n              </div>\n              <div className=\"flex-grow pl-6\">\n                <h2 className=\"text-gray-900 text-lg title-font font-medium mb-2\">\n                  Shooting Stars\n                </h2>\n                <p className=\"leading-relaxed text-base\">\n                  Blue bottle crucifix vinyl post-ironic four dollar toast vegan\n                  taxidermy. Gastropub indxgo juice poutine, ramps microdosing\n                  banh mi pug VHS try-hard ugh iceland kickstarter tumblr\n                  live-edge tilde.\n                </p>\n                <a className=\"mt-3 text-blue-500 inline-flex items-center\">\n                  Learn More\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-4 h-4 ml-2\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M5 12h14M12 5l7 7-7 7\" />\n                  </svg>\n                </a>\n              </div>\n            </div>\n            <div className=\"p-4 md:w-1/3 flex\">\n              <div className=\"w-12 h-12 inline-flex items-center justify-center rounded-full bg-blue-100 text-blue-500 mb-4 flex-shrink-0\">\n                <svg\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  className=\"w-6 h-6\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <circle cx={6} cy={6} r={3} />\n                  <circle cx={6} cy={18} r={3} />\n                  <path d=\"M20 4L8.12 15.88M14.47 14.48L20 20M8.12 8.12L12 12\" />\n                </svg>\n              </div>\n              <div className=\"flex-grow pl-6\">\n                <h2 className=\"text-gray-900 text-lg title-font font-medium mb-2\">\n                  The Catalyzer\n                </h2>\n                <p className=\"leading-relaxed text-base\">\n                  Blue bottle crucifix vinyl post-ironic four dollar toast vegan\n                  taxidermy. Gastropub indxgo juice poutine, ramps microdosing\n                  banh mi pug VHS try-hard ugh iceland kickstarter tumblr\n                  live-edge tilde.\n                </p>\n                <a className=\"mt-3 text-blue-500 inline-flex items-center\">\n                  Learn More\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-4 h-4 ml-2\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M5 12h14M12 5l7 7-7 7\" />\n                  </svg>\n                </a>\n              </div>\n            </div>\n            <div className=\"p-4 md:w-1/3 flex\">\n              <div className=\"w-12 h-12 inline-flex items-center justify-center rounded-full bg-blue-100 text-blue-500 mb-4 flex-shrink-0\">\n                <svg\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  className=\"w-6 h-6\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path d=\"M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2\" />\n                  <circle cx={12} cy={7} r={4} />\n                </svg>\n              </div>\n              <div className=\"flex-grow pl-6\">\n                <h2 className=\"text-gray-900 text-lg title-font font-medium mb-2\">\n                  Neptune\n                </h2>\n                <p className=\"leading-relaxed text-base\">\n                  Blue bottle crucifix vinyl post-ironic four dollar toast vegan\n                  taxidermy. Gastropub indxgo juice poutine, ramps microdosing\n                  banh mi pug VHS try-hard ugh iceland kickstarter tumblr\n                  live-edge tilde.\n                </p>\n                <a className=\"mt-3 text-blue-500 inline-flex items-center\">\n                  Learn More\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    className=\"w-4 h-4 ml-2\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path d=\"M5 12h14M12 5l7 7-7 7\" />\n                  </svg>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"text-gray-600 body-font\">\n        <div className=\"container px-5 py-24 mx-auto\">\n          <div className=\"flex flex-col text-center w-full mb-12\">\n            <h1 className=\"sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900\">\n              Master Cleanse Reliac Heirloom\n            </h1>\n            <p className=\"lg:w-2/3 mx-auto leading-relaxed text-base\">\n              Whatever cardigan tote bag tumblr hexagon brooklyn asymmetrical\n              gentrify, subway tile poke farm-to-table. Franzen you probably\n              haven't heard of them man bun deep.\n            </p>\n          </div>\n          <div className=\"flex lg:w-2/3 w-full sm:flex-row flex-col mx-auto px-8 sm:space-x-4 sm:space-y-0 space-y-4 sm:px-0 items-end\">\n            <div className=\"relative flex-grow w-full\">\n              <label\n                htmlFor=\"full-name\"\n                className=\"leading-7 text-sm text-gray-600\"\n              >\n                Full Name\n              </label>\n              <input\n                type=\"text\"\n                id=\"full-name\"\n                name=\"full-name\"\n                className=\"w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-transparent focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out\"\n              />\n            </div>\n            <div className=\"relative flex-grow w-full\">\n              <label\n                htmlFor=\"email\"\n                className=\"leading-7 text-sm text-gray-600\"\n              >\n                Email\n              </label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                className=\"w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-blue-500 focus:bg-transparent focus:ring-2 focus:ring-blue-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out\"\n              />\n            </div>\n            <button className=\"text-white bg-blue-500 border-0 py-2 px-8 focus:outline-none hover:bg-blue-600 rounded text-lg\">\n              Button\n            </button>\n          </div>\n        </div>\n      </section>\n      <footer className=\"text-gray-600 body-font\">\n        <div className=\"container px-5 py-8 mx-auto flex items-center sm:flex-row flex-col\">\n          <a className=\"flex title-font font-medium items-center md:justify-start justify-center text-gray-900\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              className=\"w-10 h-10 text-white p-2 bg-blue-500 rounded-full\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\" />\n            </svg>\n            <span className=\"ml-3 text-xl\">tailblocks</span>\n          </a>\n          <p className=\"text-sm text-gray-500 sm:ml-4 sm:pl-4 sm:border-l-2 sm:border-gray-200 sm:py-2 sm:mt-0 mt-4\">\n            © 2020 tailblocks —\n            <a\n              href=\"https://twitter.com/knyttneve\"\n              className=\"text-gray-600 ml-1\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              @knyttneve\n            </a>\n          </p>\n          <span className=\"inline-flex sm:ml-auto sm:mt-0 mt-4 justify-center sm:justify-start\">\n            <a className=\"text-gray-500\">\n              <svg\n                fill=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                className=\"w-5 h-5\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path d=\"M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z\" />\n              </svg>\n            </a>\n            <a className=\"ml-3 text-gray-500\">\n              <svg\n                fill=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                className=\"w-5 h-5\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path d=\"M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z\" />\n              </svg>\n            </a>\n            <a className=\"ml-3 text-gray-500\">\n              <svg\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                className=\"w-5 h-5\"\n                viewBox=\"0 0 24 24\"\n              >\n                <rect width={20} height={20} x={2} y={2} rx={5} ry={5} />\n                <path d=\"M16 11.37A4 4 0 1112.63 8 4 4 0 0116 11.37zm1.5-4.87h.01\" />\n              </svg>\n            </a>\n            <a className=\"ml-3 text-gray-500\">\n              <svg\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={0}\n                className=\"w-5 h-5\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  stroke=\"none\"\n                  d=\"M16 8a6 6 0 016 6v7h-4v-7a2 2 0 00-2-2 2 2 0 00-2 2v7h-4v-7a6 6 0 016-6zM2 9h4v12H2z\"\n                />\n                <circle cx={4} cy={4} r={2} stroke=\"none\" />\n              </svg>\n            </a>\n          </span>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/data.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/ScheduledEvents.tsx",["287","288"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components-new/common/EventLocationSelect.tsx",[],{"ruleId":"289","replacedBy":"290"},{"ruleId":"291","replacedBy":"292"},{"ruleId":"293","severity":1,"message":"294","line":48,"column":1,"nodeType":"295","endLine":51,"endColumn":3},{"ruleId":"296","severity":1,"message":"297","line":6,"column":9,"nodeType":"298","messageId":"299","endLine":6,"endColumn":15},{"ruleId":"296","severity":1,"message":"300","line":1169,"column":9,"nodeType":"298","messageId":"299","endLine":1169,"endColumn":12},{"ruleId":"296","severity":1,"message":"301","line":1,"column":16,"nodeType":"298","messageId":"299","endLine":1,"endColumn":25},{"ruleId":"296","severity":1,"message":"302","line":1,"column":36,"nodeType":"298","messageId":"299","endLine":1,"endColumn":45},{"ruleId":"296","severity":1,"message":"303","line":19,"column":24,"nodeType":"298","messageId":"299","endLine":19,"endColumn":28},{"ruleId":"296","severity":1,"message":"304","line":99,"column":5,"nodeType":"298","messageId":"299","endLine":99,"endColumn":9},{"ruleId":"296","severity":1,"message":"305","line":100,"column":5,"nodeType":"298","messageId":"299","endLine":100,"endColumn":17},{"ruleId":"296","severity":1,"message":"306","line":103,"column":5,"nodeType":"298","messageId":"299","endLine":103,"endColumn":17},{"ruleId":"296","severity":1,"message":"307","line":105,"column":5,"nodeType":"298","messageId":"299","endLine":105,"endColumn":15},{"ruleId":"296","severity":1,"message":"308","line":299,"column":9,"nodeType":"298","messageId":"299","endLine":299,"endColumn":20},{"ruleId":"296","severity":1,"message":"309","line":18,"column":11,"nodeType":"298","messageId":"299","endLine":18,"endColumn":20},{"ruleId":"296","severity":1,"message":"310","line":20,"column":3,"nodeType":"298","messageId":"299","endLine":20,"endColumn":11},{"ruleId":"296","severity":1,"message":"311","line":213,"column":5,"nodeType":"298","messageId":"299","endLine":213,"endColumn":14},{"ruleId":"312","severity":1,"message":"313","line":275,"column":37,"nodeType":"314","messageId":"315","endLine":275,"endColumn":39},{"ruleId":"296","severity":1,"message":"316","line":424,"column":10,"nodeType":"298","messageId":"299","endLine":424,"endColumn":25},{"ruleId":"296","severity":1,"message":"317","line":4,"column":8,"nodeType":"298","messageId":"299","endLine":4,"endColumn":17},{"ruleId":"296","severity":1,"message":"318","line":15,"column":3,"nodeType":"298","messageId":"299","endLine":15,"endColumn":17},{"ruleId":"296","severity":1,"message":"319","line":18,"column":17,"nodeType":"298","messageId":"299","endLine":18,"endColumn":25},{"ruleId":"296","severity":1,"message":"320","line":18,"column":27,"nodeType":"298","messageId":"299","endLine":18,"endColumn":32},{"ruleId":"296","severity":1,"message":"321","line":28,"column":7,"nodeType":"298","messageId":"299","endLine":28,"endColumn":18},{"ruleId":"322","severity":1,"message":"323","line":142,"column":44,"nodeType":"314","messageId":"324","endLine":148,"endColumn":8},{"ruleId":"325","severity":1,"message":"326","line":183,"column":57,"nodeType":"327","messageId":"328","endLine":183,"endColumn":59},{"ruleId":"296","severity":1,"message":"329","line":6,"column":3,"nodeType":"298","messageId":"299","endLine":6,"endColumn":21},{"ruleId":"296","severity":1,"message":"330","line":10,"column":8,"nodeType":"298","messageId":"299","endLine":10,"endColumn":13},{"ruleId":"296","severity":1,"message":"331","line":224,"column":10,"nodeType":"298","messageId":"299","endLine":224,"endColumn":24},{"ruleId":"296","severity":1,"message":"332","line":225,"column":10,"nodeType":"298","messageId":"299","endLine":225,"endColumn":17},{"ruleId":"296","severity":1,"message":"333","line":225,"column":19,"nodeType":"298","messageId":"299","endLine":225,"endColumn":27},{"ruleId":"296","severity":1,"message":"334","line":225,"column":29,"nodeType":"298","messageId":"299","endLine":225,"endColumn":46},{"ruleId":"296","severity":1,"message":"335","line":225,"column":48,"nodeType":"298","messageId":"299","endLine":225,"endColumn":58},{"ruleId":"296","severity":1,"message":"336","line":227,"column":10,"nodeType":"298","messageId":"299","endLine":227,"endColumn":17},{"ruleId":"296","severity":1,"message":"337","line":227,"column":19,"nodeType":"298","messageId":"299","endLine":227,"endColumn":29},{"ruleId":"296","severity":1,"message":"333","line":231,"column":19,"nodeType":"298","messageId":"299","endLine":231,"endColumn":27},{"ruleId":"296","severity":1,"message":"334","line":231,"column":29,"nodeType":"298","messageId":"299","endLine":231,"endColumn":46},{"ruleId":"296","severity":1,"message":"335","line":231,"column":48,"nodeType":"298","messageId":"299","endLine":231,"endColumn":58},{"ruleId":"296","severity":1,"message":"336","line":233,"column":10,"nodeType":"298","messageId":"299","endLine":233,"endColumn":17},{"ruleId":"296","severity":1,"message":"337","line":233,"column":19,"nodeType":"298","messageId":"299","endLine":233,"endColumn":29},{"ruleId":"296","severity":1,"message":"333","line":244,"column":19,"nodeType":"298","messageId":"299","endLine":244,"endColumn":27},{"ruleId":"296","severity":1,"message":"335","line":244,"column":48,"nodeType":"298","messageId":"299","endLine":244,"endColumn":58},{"ruleId":"296","severity":1,"message":"332","line":263,"column":10,"nodeType":"298","messageId":"299","endLine":263,"endColumn":17},{"ruleId":"296","severity":1,"message":"333","line":263,"column":19,"nodeType":"298","messageId":"299","endLine":263,"endColumn":27},{"ruleId":"296","severity":1,"message":"334","line":263,"column":29,"nodeType":"298","messageId":"299","endLine":263,"endColumn":46},{"ruleId":"296","severity":1,"message":"335","line":263,"column":48,"nodeType":"298","messageId":"299","endLine":263,"endColumn":58},{"ruleId":"296","severity":1,"message":"338","line":2,"column":9,"nodeType":"298","messageId":"299","endLine":2,"endColumn":16},{"ruleId":"296","severity":1,"message":"339","line":4,"column":3,"nodeType":"298","messageId":"299","endLine":4,"endColumn":15},{"ruleId":"296","severity":1,"message":"340","line":5,"column":3,"nodeType":"298","messageId":"299","endLine":5,"endColumn":10},{"ruleId":"296","severity":1,"message":"341","line":10,"column":9,"nodeType":"298","messageId":"299","endLine":10,"endColumn":26},{"ruleId":"296","severity":1,"message":"342","line":11,"column":16,"nodeType":"298","messageId":"299","endLine":11,"endColumn":21},{"ruleId":"296","severity":1,"message":"343","line":5,"column":5,"nodeType":"298","messageId":"299","endLine":5,"endColumn":13},{"ruleId":"344","severity":1,"message":"345","line":10,"column":25,"nodeType":"327","messageId":"346","endLine":10,"endColumn":26},{"ruleId":"344","severity":1,"message":"345","line":11,"column":23,"nodeType":"327","messageId":"346","endLine":11,"endColumn":24},{"ruleId":"296","severity":1,"message":"301","line":1,"column":28,"nodeType":"298","messageId":"299","endLine":1,"endColumn":37},{"ruleId":"296","severity":1,"message":"347","line":3,"column":8,"nodeType":"298","messageId":"299","endLine":3,"endColumn":14},{"ruleId":"296","severity":1,"message":"348","line":123,"column":9,"nodeType":"298","messageId":"299","endLine":123,"endColumn":28},{"ruleId":"296","severity":1,"message":"349","line":131,"column":9,"nodeType":"298","messageId":"299","endLine":131,"endColumn":32},{"ruleId":"296","severity":1,"message":"350","line":180,"column":9,"nodeType":"298","messageId":"299","endLine":180,"endColumn":23},{"ruleId":"296","severity":1,"message":"351","line":3,"column":13,"nodeType":"298","messageId":"299","endLine":3,"endColumn":16},{"ruleId":"296","severity":1,"message":"352","line":26,"column":10,"nodeType":"298","messageId":"299","endLine":26,"endColumn":32},{"ruleId":"296","severity":1,"message":"353","line":182,"column":9,"nodeType":"298","messageId":"299","endLine":182,"endColumn":29},{"ruleId":"296","severity":1,"message":"354","line":216,"column":9,"nodeType":"298","messageId":"299","endLine":216,"endColumn":14},{"ruleId":"296","severity":1,"message":"308","line":217,"column":9,"nodeType":"298","messageId":"299","endLine":217,"endColumn":20},{"ruleId":"296","severity":1,"message":"355","line":239,"column":9,"nodeType":"298","messageId":"299","endLine":239,"endColumn":25},{"ruleId":"296","severity":1,"message":"356","line":245,"column":9,"nodeType":"298","messageId":"299","endLine":245,"endColumn":21},{"ruleId":"322","severity":1,"message":"323","line":314,"column":44,"nodeType":"314","messageId":"324","endLine":320,"endColumn":8},{"ruleId":"296","severity":1,"message":"347","line":2,"column":8,"nodeType":"298","messageId":"299","endLine":2,"endColumn":14},{"ruleId":"357","severity":1,"message":"358","line":81,"column":6,"nodeType":"359","endLine":81,"endColumn":22,"suggestions":"360"},{"ruleId":"296","severity":1,"message":"301","line":1,"column":16,"nodeType":"298","messageId":"299","endLine":1,"endColumn":25},{"ruleId":"296","severity":1,"message":"361","line":4,"column":3,"nodeType":"298","messageId":"299","endLine":4,"endColumn":7},{"ruleId":"296","severity":1,"message":"362","line":5,"column":3,"nodeType":"298","messageId":"299","endLine":5,"endColumn":14},{"ruleId":"296","severity":1,"message":"363","line":6,"column":3,"nodeType":"298","messageId":"299","endLine":6,"endColumn":21},{"ruleId":"296","severity":1,"message":"364","line":15,"column":9,"nodeType":"298","messageId":"299","endLine":15,"endColumn":52},{"ruleId":"289","replacedBy":"365"},{"ruleId":"291","replacedBy":"366"},{"ruleId":"296","severity":1,"message":"367","line":20,"column":20,"nodeType":"298","messageId":"299","endLine":20,"endColumn":31},{"ruleId":"296","severity":1,"message":"368","line":22,"column":10,"nodeType":"298","messageId":"299","endLine":22,"endColumn":17},{"ruleId":"296","severity":1,"message":"369","line":12,"column":3,"nodeType":"298","messageId":"299","endLine":12,"endColumn":16},{"ruleId":"296","severity":1,"message":"370","line":29,"column":7,"nodeType":"298","messageId":"299","endLine":29,"endColumn":12},{"ruleId":"296","severity":1,"message":"367","line":148,"column":20,"nodeType":"298","messageId":"299","endLine":148,"endColumn":31},{"ruleId":"296","severity":1,"message":"368","line":150,"column":10,"nodeType":"298","messageId":"299","endLine":150,"endColumn":17},{"ruleId":"296","severity":1,"message":"371","line":11,"column":10,"nodeType":"298","messageId":"299","endLine":11,"endColumn":20},{"ruleId":"296","severity":1,"message":"301","line":1,"column":16,"nodeType":"298","messageId":"299","endLine":1,"endColumn":25},{"ruleId":"296","severity":1,"message":"372","line":1,"column":27,"nodeType":"298","messageId":"299","endLine":1,"endColumn":35},{"ruleId":"296","severity":1,"message":"373","line":3,"column":3,"nodeType":"298","messageId":"299","endLine":3,"endColumn":14},{"ruleId":"296","severity":1,"message":"374","line":4,"column":3,"nodeType":"298","messageId":"299","endLine":4,"endColumn":9},{"ruleId":"296","severity":1,"message":"375","line":5,"column":3,"nodeType":"298","messageId":"299","endLine":5,"endColumn":11},{"ruleId":"296","severity":1,"message":"376","line":6,"column":3,"nodeType":"298","messageId":"299","endLine":6,"endColumn":8},{"ruleId":"296","severity":1,"message":"377","line":8,"column":3,"nodeType":"298","messageId":"299","endLine":8,"endColumn":22},{"ruleId":"378","severity":1,"message":"379","line":16,"column":11,"nodeType":"380","endLine":16,"endColumn":94},{"ruleId":"378","severity":1,"message":"379","line":32,"column":13,"nodeType":"380","endLine":32,"endColumn":68},{"ruleId":"378","severity":1,"message":"379","line":33,"column":13,"nodeType":"380","endLine":33,"endColumn":68},{"ruleId":"378","severity":1,"message":"379","line":34,"column":13,"nodeType":"380","endLine":34,"endColumn":68},{"ruleId":"378","severity":1,"message":"379","line":35,"column":13,"nodeType":"380","endLine":35,"endColumn":68},{"ruleId":"378","severity":1,"message":"379","line":36,"column":13,"nodeType":"380","endLine":36,"endColumn":68},{"ruleId":"378","severity":1,"message":"379","line":256,"column":17,"nodeType":"380","endLine":256,"endColumn":76},{"ruleId":"378","severity":1,"message":"379","line":298,"column":17,"nodeType":"380","endLine":298,"endColumn":76},{"ruleId":"378","severity":1,"message":"379","line":339,"column":17,"nodeType":"380","endLine":339,"endColumn":76},{"ruleId":"378","severity":1,"message":"379","line":407,"column":11,"nodeType":"380","endLine":407,"endColumn":113},{"ruleId":"378","severity":1,"message":"379","line":434,"column":13,"nodeType":"380","endLine":434,"endColumn":42},{"ruleId":"378","severity":1,"message":"379","line":446,"column":13,"nodeType":"380","endLine":446,"endColumn":47},{"ruleId":"378","severity":1,"message":"379","line":458,"column":13,"nodeType":"380","endLine":458,"endColumn":47},{"ruleId":"378","severity":1,"message":"379","line":472,"column":13,"nodeType":"380","endLine":472,"endColumn":47},{"ruleId":"296","severity":1,"message":"301","line":1,"column":16,"nodeType":"298","messageId":"299","endLine":1,"endColumn":25},{"ruleId":"296","severity":1,"message":"372","line":1,"column":27,"nodeType":"298","messageId":"299","endLine":1,"endColumn":35},"no-native-reassign",["381"],"no-negated-in-lhs",["382"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'nanoid' is defined but never used.","Identifier","unusedVar","'url' is assigned a value but never used.","'useEffect' is defined but never used.","'RefObject' is defined but never used.","'Text' is defined but never used.","'user' is assigned a value but never used.","'timeSelected' is assigned a value but never used.","'setEventTime' is assigned a value but never used.","'setEventId' is assigned a value but never used.","'calendarApi' is assigned a value but never used.","'LinkPlain' is defined but never used.","'Textarea' is defined but never used.","'organizer' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CalendarSection' is defined but never used.","'TextField' is defined but never used.","'INITIAL_EVENTS' is defined but never used.","'Checkbox' is defined but never used.","'Input' is defined but never used.","'sliceOfTime' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'date', 'date'.","unsafeRefs","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'convertMinToHrsMin' is defined but never used.","'dayjs' is defined but never used.","'LinkUrlSection' is defined but never used.","'profile' is assigned a value but never used.","'settings' is assigned a value but never used.","'updateDisplayName' is assigned a value but never used.","'updateSlug' is assigned a value but never used.","'editing' is assigned a value but never used.","'setEditing' is assigned a value but never used.","'useAuth' is defined but never used.","'useIntervals' is defined but never used.","'useLink' is defined but never used.","'useSchedulingLink' is defined but never used.","'Dayjs' is defined but never used.","'todayStr' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useSWR' is defined but never used.","'_updateUserSettings' is assigned a value but never used.","'_revalidateUserSettings' is assigned a value but never used.","'removeSchedule' is assigned a value but never used.","'API' is defined but never used.","'CalendarBindingSection' is defined but never used.","'handleWeekendsToggle' is assigned a value but never used.","'title' is assigned a value but never used.","'handleEventClick' is assigned a value but never used.","'handleEvents' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAvailabilityPresetsById'. Either include it or remove the dependency array.","ArrayExpression",["383"],"'Card' is defined but never used.","'ICardTokens' is defined but never used.","'ICardSectionStyles' is defined but never used.","'footerCardSectionTokens' is assigned a value but never used.",["381"],["382"],"'setRedirect' is assigned a value but never used.","'loading' is assigned a value but never used.","'DefaultButton' is defined but never used.","'Login' is defined but never used.","'isVerified' is assigned a value but never used.","'useState' is defined but never used.","'useLocation' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'Route' is defined but never used.","'RouteComponentProps' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"384","fix":"385"},"Update the dependencies array to be: [settings, link, getAvailabilityPresetsById]",{"range":"386","text":"387"},[2610,2626],"[settings, link, getAvailabilityPresetsById]"]