[{"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/index.tsx":"1","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/analytics.ts":"2","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/serviceWorker.ts":"3","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/App.tsx":"4","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/config.ts":"5","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/storage.ts":"6","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api.ts":"7","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/logger.tsx":"8","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventProvider.tsx":"9","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/AppDataProvider.tsx":"10","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/utils.ts":"11","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api-hooks.tsx":"12","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventsProvider.tsx":"13","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/SchedulingLinkProvider.tsx":"14","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/utils.ts":"15","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/const.ts":"16","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/AuthProvider.tsx":"17","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/Login.tsx":"18","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/Register.tsx":"19","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/PasswordReset.tsx":"20","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/EmailVerification.tsx":"21","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/RequestPasswordReset.tsx":"22","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/PasswordResetRequested.tsx":"23","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/Dashboard.tsx":"24","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/booking/BookingPage.tsx":"25","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/landing/LandingPage.tsx":"26","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/data.ts":"27","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/AppSettings.tsx":"28","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/event-utils.tsx":"29","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/booking/BookingProvider.tsx":"30","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/constants.ts":"31","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common/EventLocationSelect.tsx":"32","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/events/ScheduledEvent.tsx":"33","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/events/ScheduledEvents.tsx":"34","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/links/SchedulingLinksBoard.tsx":"35","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/links/SchedulingLink.tsx":"36","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/availability/Availability.tsx":"37","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common/NavSidebar.tsx":"38","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/links/SchedulingLinkSettings.tsx":"39","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common/Calendar.tsx":"40"},{"size":615,"mtime":1619935863517,"results":"41","hashOfConfig":"42"},{"size":1226,"mtime":1607220770491,"results":"43","hashOfConfig":"42"},{"size":5296,"mtime":1607220770508,"results":"44","hashOfConfig":"42"},{"size":2869,"mtime":1619936298570,"results":"45","hashOfConfig":"42"},{"size":898,"mtime":1608873579256,"results":"46","hashOfConfig":"42"},{"size":1088,"mtime":1607220770508,"results":"47","hashOfConfig":"42"},{"size":25085,"mtime":1618642704913,"results":"48","hashOfConfig":"42"},{"size":3579,"mtime":1619934884536,"results":"49","hashOfConfig":"42"},{"size":918,"mtime":1612683359398,"results":"50","hashOfConfig":"42"},{"size":5208,"mtime":1618800532868,"results":"51","hashOfConfig":"42"},{"size":4237,"mtime":1612269403083,"results":"52","hashOfConfig":"42"},{"size":3461,"mtime":1618646348207,"results":"53","hashOfConfig":"42"},{"size":647,"mtime":1612691633336,"results":"54","hashOfConfig":"42"},{"size":6835,"mtime":1618639108096,"results":"55","hashOfConfig":"42"},{"size":293,"mtime":1611664159522,"results":"56","hashOfConfig":"42"},{"size":122,"mtime":1618642705075,"results":"57","hashOfConfig":"42"},{"size":3603,"mtime":1619930384499,"results":"58","hashOfConfig":"42"},{"size":4123,"mtime":1619934631490,"results":"59","hashOfConfig":"42"},{"size":5768,"mtime":1619934979468,"results":"60","hashOfConfig":"42"},{"size":294,"mtime":1619934979399,"results":"61","hashOfConfig":"42"},{"size":957,"mtime":1619934979348,"results":"62","hashOfConfig":"42"},{"size":149,"mtime":1619934979481,"results":"63","hashOfConfig":"42"},{"size":163,"mtime":1619934979409,"results":"64","hashOfConfig":"42"},{"size":1771,"mtime":1619936298557,"results":"65","hashOfConfig":"42"},{"size":13344,"mtime":1619935781645,"results":"66","hashOfConfig":"42"},{"size":21821,"mtime":1619934631539,"results":"67","hashOfConfig":"42"},{"size":4018,"mtime":1619931561625,"results":"68","hashOfConfig":"42"},{"size":9982,"mtime":1619936298567,"results":"69","hashOfConfig":"42"},{"size":1720,"mtime":1612157529828,"results":"70","hashOfConfig":"42"},{"size":4566,"mtime":1619930461061,"results":"71","hashOfConfig":"42"},{"size":1055,"mtime":1611641475088,"results":"72","hashOfConfig":"42"},{"size":772,"mtime":1619935745403,"results":"73","hashOfConfig":"42"},{"size":6975,"mtime":1619936298528,"results":"74","hashOfConfig":"42"},{"size":4179,"mtime":1619936298532,"results":"75","hashOfConfig":"42"},{"size":2093,"mtime":1619936298539,"results":"76","hashOfConfig":"42"},{"size":14802,"mtime":1619936298536,"results":"77","hashOfConfig":"42"},{"size":10076,"mtime":1619936298561,"results":"78","hashOfConfig":"42"},{"size":1953,"mtime":1619936298553,"results":"79","hashOfConfig":"42"},{"size":10785,"mtime":1619936298543,"results":"80","hashOfConfig":"42"},{"size":14229,"mtime":1619936298548,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wwb8a3",{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"87"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"87"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"87"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"87"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"87"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/index.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/analytics.ts",["169"],"import * as Sentry from '@sentry/react';\nimport LogRocket from 'logrocket';\nimport posthog from 'posthog-js';\nimport {isDev} from './config';\n\nconst {\n  REACT_APP_SENTRY_DSN,\n  REACT_APP_LOGROCKET_ID,\n  REACT_APP_POSTHOG_TOKEN = 'cQo4wipp5ipWWXhTN8kTacBItgqo457yDRtzCMOr-Tw',\n  REACT_APP_POSTHOG_API_HOST = 'https://app.posthog.com',\n} = process.env;\n\nexport const isSentryEnabled = REACT_APP_SENTRY_DSN && !isDev;\nexport const isLogRocketEnabled = REACT_APP_LOGROCKET_ID && !isDev;\nexport const isPostHogEnabled = REACT_APP_POSTHOG_TOKEN && !isDev;\n\nexport const init = () => {\n  if (isSentryEnabled) {\n    Sentry.init({dsn: REACT_APP_SENTRY_DSN});\n  }\n\n  if (isLogRocketEnabled && REACT_APP_LOGROCKET_ID) {\n    LogRocket.init(REACT_APP_LOGROCKET_ID);\n  }\n\n  if (isPostHogEnabled) {\n    posthog.init(REACT_APP_POSTHOG_TOKEN, {\n      api_host: REACT_APP_POSTHOG_API_HOST,\n    });\n  }\n};\n\nexport const identify = (id: any, email: string) => {\n  if (isSentryEnabled) {\n    Sentry.setUser({id, email});\n  }\n\n  if (isLogRocketEnabled) {\n    LogRocket.identify(id, {email});\n  }\n\n  if (isPostHogEnabled) {\n    posthog.identify(id);\n    posthog.people && posthog.people.set({email});\n  }\n};\n\nexport default {\n  init,\n  identify,\n};\n",["170","171"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/serviceWorker.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/App.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/config.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/storage.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api.ts",["172","173"],"import request from 'superagent';\nimport qs from 'query-string';\nimport {getAuthTokens} from './storage';\nimport {Conversation, User} from './types';\nimport * as queryString from 'query-string';\nimport {nanoid} from 'nanoid';\n\n// TODO: handle this on the server instead\nfunction now() {\n  const date = new Date();\n\n  return new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds()\n  );\n}\n\nexport type LoginParams = {\n  email: string;\n  password: string;\n};\n\nexport type RegisterParams = LoginParams & {\n  companyName?: string;\n  inviteToken?: string;\n  passwordConfirmation: string;\n};\n\nexport type ResetPasswordParams = {\n  password: string;\n  passwordConfirmation: string;\n};\n\nexport type WidgetSettingsParams = {\n  id?: string;\n  title: string;\n  subtitle: string;\n  color: string;\n  greeting?: string;\n  new_message_placeholder?: string;\n};\n\nexport type EventSubscriptionParams = {\n  webhook_url: string;\n};\n\nexport const getAccessToken = (): string | null => {\n  const tokens = getAuthTokens();\n\n  return (tokens && tokens.token) || null;\n};\n\nexport const getRefreshToken = (): string | null => {\n  const tokens = getAuthTokens();\n\n  return (tokens && tokens.renew_token) || null;\n};\n\nexport const me = async (token = getAccessToken()): Promise<User> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const login = async ({email, password}: LoginParams) => {\n  return request\n    .post(`/api/session`)\n    .send({user: {email, password}})\n    .then((res) => res.body.data);\n};\n\nexport const logout = async () => {\n  return request.delete(`/api/session`).then((res) => res.body);\n};\n\nexport const register = async ({\n  companyName,\n  inviteToken,\n  email,\n  password,\n  passwordConfirmation,\n}: RegisterParams) => {\n  return request\n    .post(`/api/registration`)\n    .send({\n      user: {\n        company_name: companyName,\n        invite_token: inviteToken,\n        email,\n        password,\n        password_confirmation: passwordConfirmation,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const renew = async (token = getRefreshToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/session/renew`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const verifyUserEmail = async (verificationToken: string) => {\n  return request\n    .post(`/api/verify_email`)\n    .send({token: verificationToken})\n    .then((res) => res.body.data);\n};\n\nexport const sendPasswordResetEmail = async (email: string) => {\n  return request\n    .post(`/api/reset_password`)\n    .send({email})\n    .then((res) => res.body.data);\n};\n\nexport const attemptPasswordReset = async (\n  passwordResetToken: string,\n  {password, passwordConfirmation}: ResetPasswordParams\n) => {\n  return request\n    .put(`/api/reset_password`)\n    .send({\n      password,\n      password_confirmation: passwordConfirmation,\n      token: passwordResetToken,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createNewCustomer = async (accountId: string) => {\n  return request\n    .post(`/api/customers`)\n    .send({\n      customer: {\n        account_id: accountId,\n        first_seen: now(),\n        last_seen: now(),\n      },\n    }) // TODO: send over some metadata?\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomers = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/customers`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomer = async (id: string, token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/customers/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateCustomer = async (\n  id: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/customers/${id}`)\n    .set('Authorization', token)\n    .send({\n      customer: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createNewConversation = async (\n  customerId: string,\n  params?: object,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations`)\n    .set('Authorization', token)\n    .send({\n      conversation: {\n        customer_id: customerId,\n        ...params,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchAccountInfo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/accounts/me`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateAccountInfo = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/accounts/me`)\n    .set('Authorization', token)\n    .send({\n      account: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserProfile = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/profile`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserProfile = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/profile`)\n    .set('Authorization', token)\n    .send({\n      user_profile: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserSettings = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get('/api/user_settings')\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateUserSettings = async (\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put('/api/user_settings')\n    .set('Authorization', token)\n    .send({\n      user_settings: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchAllConversations = async (\n  token = getAccessToken()\n): Promise<Array<Conversation>> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchMyConversations = async (\n  userId: number,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({assignee_id: userId, status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchPriorityConversations = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({priority: 'priority', status: 'open'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchClosedConversations = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations`)\n    .query({status: 'closed'})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchConversation = async (\n  id: string,\n  token = getAccessToken()\n): Promise<Conversation> => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/conversations/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const generateShareConversationToken = async (\n  conversationId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations/${conversationId}/share`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSharedConversation = async (\n  id: string,\n  token: string\n): Promise<Conversation> => {\n  if (!token) {\n    throw new Error('Access denied!');\n  }\n\n  return request\n    .get(`/api/conversations/shared`)\n    .query({token, conversation_id: id})\n    .then((res) => res.body.data);\n};\n\nexport const updateConversation = async (\n  conversationId: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .send(updates)\n    .then((res) => res.body.data);\n};\n\nexport const deleteConversation = async (\n  conversationId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/conversations/${conversationId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createNewMessage = async (\n  conversationId: string,\n  message: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/messages`)\n    .set('Authorization', token)\n    .send({\n      message: {\n        conversation_id: conversationId,\n        sent_at: new Date().toISOString(),\n        ...message,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const countMessages = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/messages/count`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomerConversations = async (\n  customerId: string,\n  accountId: string\n) => {\n  return request\n    .get(`/api/conversations/customer`)\n    .query({customer_id: customerId, account_id: accountId})\n    .then((res) => res.body.data);\n};\n\nexport const generateUserInvitation = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/user_invitations`)\n    .send({user_invitation: {}})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSlackAuthorization = async (\n  type = 'reply',\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/slack/authorization`)\n    .query({type})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchGmailAuthorization = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/gmail/authorization`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport type EmailParams = {\n  recipient: string;\n  subject: string;\n  message: string;\n};\n\nexport const sendGmailNotification = async (\n  {recipient, subject, message}: EmailParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/gmail/send`)\n    .send({recipient, subject, message})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchEventSubscriptions = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/event_subscriptions`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const verifyWebhookUrl = async (\n  url: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/event_subscriptions/verify`)\n    .set('Authorization', token)\n    .send({url})\n    .then((res) => res.body.data);\n};\n\nexport const createEventSubscription = async (\n  params: EventSubscriptionParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/event_subscriptions`)\n    .set('Authorization', token)\n    .send({\n      event_subscription: params,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const updateEventSubscription = async (\n  id: string,\n  updates: EventSubscriptionParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/event_subscriptions/${id}`)\n    .set('Authorization', token)\n    .send({\n      event_subscription: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const deleteEventSubscription = async (\n  id: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/event_subscriptions/${id}`)\n    .set('Authorization', token);\n};\n\nexport const authorizeSlackIntegration = async (\n  code: string,\n  type: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/slack/oauth`)\n    .query({code, type})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const authorizeGmailIntegration = async (\n  code: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/gmail/oauth`)\n    .query({code})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateWidgetSettings = async (\n  widgetSettingsParams: WidgetSettingsParams,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/widget_settings`)\n    .send({widget_settings: widgetSettingsParams})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchDefaultPaymentMethod = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/payment_methods`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchBillingInfo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/billing`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createSubscriptionPlan = async (\n  plan: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/billing`)\n    .send({plan})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateSubscriptionPlan = async (\n  plan: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/billing`)\n    .send({plan})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createPaymentMethod = async (\n  paymentMethod: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/payment_methods`)\n    .send({payment_method: paymentMethod})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const disableAccountUser = async (\n  userId: number | string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/users/${userId}/disable`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const enableAccountUser = async (\n  userId: number | string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/users/${userId}/enable`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchCustomerNotes = async (\n  customerId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/notes`)\n    .query({customer_id: customerId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createCustomerNote = async (\n  customerId: string,\n  body: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/notes`)\n    .set('Authorization', token)\n    .send({\n      note: {\n        body,\n        customer_id: customerId,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const deleteCustomerNote = async (\n  noteId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request.delete(`/api/notes/${noteId}`).set('Authorization', token);\n};\n\nexport const fetchAllTags = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/tags`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createTag = async (name: string, token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/tags`)\n    .send({tag: {name}})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const addConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/conversations/${conversationId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeConversationTag = async (\n  conversationId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/conversations/${conversationId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const addCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/customers/${customerId}/tags`)\n    .send({tag_id: tagId})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const removeCustomerTag = async (\n  customerId: string,\n  tagId: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .delete(`/api/customers/${customerId}/tags/${tagId}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\ntype BrowserSessionFilters = {\n  sessionIds?: Array<string>;\n  customerId?: string;\n  isActive?: boolean;\n  limit?: number;\n};\n\nexport const fetchBrowserSessions = async (\n  {customerId, isActive, limit = 100, sessionIds = []}: BrowserSessionFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions`)\n    .query(\n      qs.stringify(\n        {\n          ids: sessionIds,\n          customer_id: customerId,\n          active: isActive,\n          limit,\n        },\n        {arrayFormat: 'bracket'}\n      )\n    )\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const countBrowserSessions = async (\n  {customerId, isActive}: BrowserSessionFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions/count`)\n    .query(\n      qs.stringify(\n        {\n          customer_id: customerId,\n          active: isActive,\n        },\n        {arrayFormat: 'bracket'}\n      )\n    )\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchBrowserSession = async (\n  id: string,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/browser_sessions/${id}`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\ntype ReportingFilters = {\n  from_date?: string | null;\n  to_date?: string | null;\n};\n\nexport const fetchReportingData = async (\n  filters = {} as ReportingFilters,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/reporting`)\n    .query(filters)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const createSchedulingLink = async (\n  scheduling_link: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/scheduling_links`)\n    .send({scheduling_link})\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const updateSchedulingLink = async (\n  eventTypeId: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/scheduling_links/${eventTypeId}`)\n    .set('Authorization', token)\n    .send({\n      scheduling_link: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const createDemo = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/demos`)\n    .send({\n      demo: {\n        name: 'type1',\n        count: 1,\n      },\n    })\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinks = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/scheduling_links/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinksBrief = async (user: string) => {\n  return request\n    .get(`/api/scheduling_links_brief/`)\n    .then((res) => res.body.data);\n};\n\nexport const createSchedule = async (\n  schedule: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .post(`/api/schedules/`)\n    .set('Authorization', token)\n    .send({\n      schedule,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedules = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/schedules/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchScheduleById = async (user: string, schedule_id: string) => {\n  return request\n    .get(`/api/schedules`)\n    .query({schedule_id})\n    .then((res) => res.body.data);\n};\n\nexport const updateSchedule = async (\n  id: string,\n  updates: any,\n  token = getAccessToken()\n) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .put(`/api/schedules/${id}`)\n    .set('Authorization', token)\n    .send({\n      schedule: updates,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchUserProfileBySlug = async (slug: string) => {\n  return request\n    .get(`/api/profile`)\n    .query({slug})\n    .then((res) => res.body.data);\n};\n\nexport const fetchSchedulingLinkByUrl = async (user: string, url: string) => {\n  return request\n    .get(`/api/event_type`)\n    .query({url})\n    .then((res) => res.body.data);\n};\n\nexport interface CreateEventParams {\n  user: string;\n  link: string;\n  event: {\n    displayName: string;\n    email: string;\n    startAt: string;\n    endAt: string;\n    fields: any;\n  };\n}\n\nexport const createEvent = async (params: CreateEventParams) => {\n  return request\n    .post(`/api/scheduled_events`)\n    .send(params)\n    .then((res) => res.body.data);\n};\n\nexport const createScheduledEvent = async (\n  scheduling_link_id: string,\n  start_time: string,\n  guest_name: string\n) => {\n  return request\n    .post(`/api/scheduled_events`)\n    .send({\n      event: {\n        scheduling_link_id,\n        start_time,\n        guest_name,\n      },\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchDatetimeSpotsByRange = async (\n  event_type_id: string,\n  start_time: string,\n  end_time: string\n) => {\n  return request\n    .get(`/api/booking/scheduling_links/${event_type_id}/calendar/range`)\n    .query({\n      start_time,\n      end_time,\n    })\n    .then((res) => res.body.data);\n};\n\nexport const fetchScheduledEvents = async (token = getAccessToken()) => {\n  if (!token) {\n    throw new Error('Invalid token!');\n  }\n\n  return request\n    .get(`/api/scheduled_events/`)\n    .set('Authorization', token)\n    .then((res) => res.body.data);\n};\n\nexport const fetchIntervals = async (\n  userSlug: string,\n  linkSlug: string,\n  from: string,\n  to: string\n) => {\n  const url = queryString.stringifyUrl({\n    url: `/api/links/${userSlug}/${linkSlug}/intervals`,\n    query: {\n      from,\n      to,\n    },\n  });\n  return request\n    .get(`/api/links/${userSlug}/${linkSlug}/intervals`)\n    .query({\n      from,\n      to,\n    })\n    .then((res) => res.body.data);\n};\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/logger.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/AppDataProvider.tsx",["174","175","176","177","178"],"import React, {useContext, useEffect} from 'react';\nimport _ from 'lodash';\nimport useSWR, {mutate} from 'swr';\nimport * as API from '../api';\nimport {\n  useSchedules,\n  useSchedulingLinks,\n  useUserProfile,\n  useUserSettings,\n} from '../api-hooks';\nimport {useHistory} from 'react-router-dom';\nimport {nanoid} from 'nanoid';\n\n/**\n * App data\n *  availability presets\n *\n */\nexport const AppDataContext = React.createContext<{\n  profile: any;\n  settings: any;\n  schedulingLinks: any[];\n  availabilityPresets: any[];\n\n  createSchedulingLinkAndRedirect: () => Promise<any>;\n  createSchedule: () => Promise<any>;\n  updateDisplayName: (value: string) => Promise<any>;\n  updateSlug: (value: string) => Promise<any>;\n  updateAvailabilityPreset: (id: string, update: any) => Promise<any>;\n  getAvailabilityPresetsById: (presets: string[]) => any[];\n}>({\n  profile: {},\n  settings: {},\n  schedulingLinks: [],\n  availabilityPresets: [],\n\n  createSchedulingLinkAndRedirect: () => Promise.resolve(),\n  createSchedule: () => Promise.resolve(),\n  updateDisplayName: (value: string) => Promise.resolve(),\n  updateSlug: (value: string) => Promise.resolve(),\n  updateAvailabilityPreset: (value: string, update: any) => Promise.resolve(),\n  getAvailabilityPresetsById: (presets) => [],\n});\n\nexport const useAppData = () => useContext(AppDataContext);\n\ntype Props = React.PropsWithChildren<{}>;\n\n/**\n * App Data Provider\n *\n * app data context\n *  user info\n *  links\n *  events\n *  ...\n *\n *\n *\n * @param props\n * @constructor\n */\nconst AppDataProvider = (props: Props) => {\n  let history = useHistory();\n  const {data: profile} = useUserProfile();\n  const {data: settings} = useUserSettings();\n  const {data: schedulingLinks} = useSchedulingLinks();\n  const {data: schedules} = useSchedules();\n\n  const getAvailabilityPresetsById = (presets: string[]) => {\n    if (schedules && presets) {\n      return _.flatten(\n        schedules\n          .filter((schedule: any) => presets.includes(schedule.id))\n          .map((schedule: any) => schedule.rules)\n      );\n    }\n    return [];\n  };\n\n  const createSchedulingLinkAndRedirect = async () => {\n    return API.createSchedulingLink({\n      name: '未命名',\n      description: '',\n      durations: [30],\n      location: 'loc1',\n      url: nanoid(7),\n      color: 'red',\n      fields: [],\n      email_reminders: [\n        {\n          quantity: 1,\n          units: 'hours',\n        },\n      ],\n      organizer: {\n        availability: {\n          mode: 'ranked',\n          overrides: [],\n          presets: ['39f52432cfa64661', 'ed0eb79a82ba137e', 'ff9e7d4dd2f506c5'],\n          recurringIntervals: [],\n        },\n        avatarUrl:\n          'https://secure.gravatar.com/avatar/fcb9bbfe7fa822090dce8a194ed9730d?s=256&d=404',\n        calendarId: null,\n        displayName: 'Yuanyuan Zhang',\n      },\n    }).then((r) => {\n      console.log('Resp', r);\n      mutate(`/api/scheduling_links/`);\n      history.push(`/links/${r.id}`);\n      return r;\n    });\n  };\n\n  const _updateProfile = (newValue: any) => {\n    return mutate(`/api/profile/`, {data: {...profile, ...newValue}}, false);\n  };\n\n  const _revalidateProfile = () => {\n    mutate(`/api/profile/`);\n  };\n  const _updateUserSettings = (newValue: any) => {\n    return mutate(\n      `/api/user_settings/`,\n      {data: {...settings, ...newValue}},\n      false\n    );\n  };\n\n  const _revalidateUserSettings = () => {\n    mutate(`/api/user_settings/`);\n  };\n\n  const updateDisplayName = async (value: string) => {\n    _updateProfile({display_name: value});\n    await API.updateUserProfile({display_name: value});\n    _revalidateProfile();\n    return Promise.resolve();\n  };\n\n  const updateSlug = async (value: string) => {\n    _updateProfile({slug: value});\n    await API.updateUserProfile({slug: value});\n    _revalidateProfile();\n    return Promise.resolve();\n  };\n\n  const updateAvailabilityPreset = async (id: string, updates: any) => {\n    const clone = _.cloneDeep(schedules);\n    const targetIndex = clone.findIndex((schedule: any) => schedule.id === id);\n    clone[targetIndex] = {\n      ...clone[targetIndex],\n      ...updates,\n    };\n    mutate(`/api/schedules/`, {data: clone}, false);\n    await API.updateSchedule(id, updates);\n    mutate(`/api/schedules/`);\n  };\n\n  const createSchedule = async () => {\n    const schedule = {\n      name: '未命名',\n      timezone: 'Asia / Shanghai',\n      rules: [\n        {\n          id: nanoid(),\n          byday: ['mo', 'tu', 'we', 'th', 'fr'],\n          endTime: 1020,\n          startTime: 540,\n        },\n      ],\n    };\n    schedules.push(schedule);\n    mutate(`/api/schedules/`, {data: schedules}, false);\n    await API.createSchedule(schedule);\n    mutate(`/api/schedules/`);\n  };\n\n  const removeSchedule = async () => {};\n\n  return (\n    <AppDataContext.Provider\n      value={{\n        profile,\n        settings,\n        schedulingLinks,\n\n        availabilityPresets: schedules,\n        updateAvailabilityPreset,\n\n        createSchedulingLinkAndRedirect,\n        createSchedule,\n        getAvailabilityPresetsById,\n        updateDisplayName,\n        updateSlug,\n      }}\n    >\n      {props.children}\n    </AppDataContext.Provider>\n  );\n};\n\nexport default AppDataProvider;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/utils.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/api-hooks.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/ScheduledEventsProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/SchedulingLinkProvider.tsx",["179","180"],"import React, {useContext, useEffect, useState} from 'react';\nimport useSWR, {mutate} from 'swr';\nimport {useAppData} from './AppDataProvider';\nimport {useLink} from '../api-hooks';\nimport * as API from '../api';\nimport _ from 'lodash';\n\nexport const SchedulingLinkContext = React.createContext<{\n  slug: string;\n  name: string;\n  description: string;\n  durations: string[];\n  location: string;\n  availability: any;\n  availabilityPresets: string[];\n  availabilityPresetsIntervals: any[];\n  availabilityOverrides: any[];\n  fields: any[];\n  bufferBefore: number;\n  bufferAfter: number;\n  limitBookingTime: number;\n  emailReminders: any[];\n  organizer: any;\n\n  updateSlug: (value: string) => Promise<any>;\n  updateName: (value: string) => Promise<any>;\n  updateDescription: (value: string) => Promise<any>;\n  updateDurations: (value: number[]) => Promise<any>;\n  updateLocation: (value: string) => Promise<any>;\n  updateAvailability: (value: any) => Promise<any>;\n  updateAvailabilityPresets: (value: string[] | null) => Promise<any>;\n  updateAvailabilityOverrides: (value: any) => Promise<any>;\n\n  updateSchedulingLink: (value: any) => Promise<any>;\n}>({\n  slug: '',\n  name: '',\n  description: '',\n  durations: [''],\n  location: '',\n  availability: {},\n  availabilityPresets: [],\n  availabilityPresetsIntervals: [],\n  availabilityOverrides: [],\n  fields: [],\n  bufferBefore: 0,\n  bufferAfter: 0,\n  limitBookingTime: 0,\n  emailReminders: [],\n  organizer: {},\n\n  updateSlug: (value: string) => Promise.resolve({}),\n  updateName: (value: string) => Promise.resolve({}),\n  updateDescription: (value: string) => Promise.resolve({}),\n  updateDurations: (value: number[]) => Promise.resolve({}),\n  updateLocation: (value: string) => Promise.resolve({}),\n  updateAvailability: (value: any) => Promise.resolve({}),\n  updateAvailabilityPresets: (value: string[] | null) => Promise.resolve({}),\n  updateAvailabilityOverrides: (value: any) => Promise.resolve({}),\n\n  updateSchedulingLink: (value: any) => Promise.resolve({}),\n});\n\nexport const useSchedulingLink = () => useContext(SchedulingLinkContext);\n\ntype Props = React.PropsWithChildren<{\n  linkId: string;\n}>;\n\nconst SchedulingLinkProvider = (props: Props) => {\n  const {data: link, isLoading, isError} = useLink(props.linkId);\n  const {settings, getAvailabilityPresetsById} = useAppData();\n  const [presetsIntervals, setPresetsIntervals] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (link && link.organizer && link.organizer.availability) {\n      setPresetsIntervals(\n        getAvailabilityPresetsById(link.organizer.availability.presets)\n      );\n    }\n  }, [settings, link]);\n\n  const [overrides, setOverrides] = useState<any[]>([\n    {\n      startAt: '2021-01-19T02:00:00Z',\n      endAt: '2021-01-19T07:00:00Z',\n      type: 'block',\n    },\n    {\n      startAt: '2021-01-18T02:00:00Z',\n      endAt: '2021-01-18T08:00:00Z',\n      type: 'block',\n    },\n    {\n      startAt: '2021-01-23T02:00:00Z',\n      endAt: '2021-01-23T08:00:00Z',\n      type: 'allow',\n    },\n  ]);\n\n  if (isLoading) return <div>Loading</div>;\n  if (isError) return <div>Error</div>;\n\n  const _update = (newValue: any) => {\n    return mutate(\n      `/api/scheduling_links/${props.linkId}`,\n      {data: {...link, ...newValue}},\n      false\n    );\n  };\n\n  const _revalidate = () => {\n    mutate(`/api/scheduling_links/${props.linkId}`);\n    mutate('/api/scheduling_links');\n  };\n\n  const updateSlug = async (value: string) => {\n    _update({url: value});\n    await API.updateSchedulingLink(link.id, {url: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateName = async (value: string) => {\n    _update({name: value});\n    await API.updateSchedulingLink(link.id, {name: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateDescription = async (value: string) => {\n    _update({description: value});\n    await API.updateSchedulingLink(link.id, {description: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateDurations = async (value: number[]) => {\n    _update({durations: value});\n    await API.updateSchedulingLink(link.id, {durations: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateLocation = async (value: string) => {\n    _update({location: value});\n    await API.updateSchedulingLink(link.id, {location: value});\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateAvailability = (value: any) => {\n    _update({description: value});\n    // await API.updateSchedulingLinkDescription\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  const updateAvailabilityPresets = async (value: string[] | null) => {\n    if (link.organizer) {\n      const clone = _.cloneDeep(link.organizer);\n      return updateSchedulingLink({\n        organizer: {\n          ...clone,\n          availability: {\n            ...clone.availability,\n            presets: value,\n          },\n        },\n      });\n    } else {\n      return updateSchedulingLink({\n        organizer: {\n          availability: {\n            presets: value,\n          },\n        },\n      });\n    }\n  };\n\n  const updateAvailabilityOverrides = (value: any) => {\n    setOverrides(value);\n    return Promise.resolve();\n  };\n\n  const updateSchedulingLink = async (updates: any) => {\n    _update(updates);\n    await API.updateSchedulingLink(link.id, updates);\n    _revalidate();\n    return Promise.resolve();\n  };\n\n  return (\n    <SchedulingLinkContext.Provider\n      value={{\n        slug: link.url,\n        name: link.name,\n        description: link.description,\n        durations: link.durations,\n        location: link.location,\n        availability: link.organizer?.availability,\n        availabilityPresets: link.organizer?.availability?.presets,\n        availabilityPresetsIntervals: presetsIntervals,\n        availabilityOverrides: overrides,\n        fields: link.fields,\n        bufferBefore: link.before_buffer_time,\n        bufferAfter: link.after_buffer_time,\n        limitBookingTime: link.max_booking_time,\n        emailReminders: link.email_reminders,\n        organizer: {\n          id: '',\n          avatarUrl:\n            'https://secure.gravatar.com/avatar/fcb9bbfe7fa822090dce8a194ed9730d?s=256&d=404',\n          displayName: 'Yuanyuan Zhang',\n          availability: {\n            mode: 'ranked',\n            overrides: [],\n            presets: ['1ac33b81-c2cc-43be-90e5-2cd25685bfd8'],\n            recurringIntervals: [],\n          },\n        },\n\n        updateSlug,\n        updateName,\n        updateDescription,\n        updateDurations,\n        updateLocation,\n        updateAvailability,\n        updateAvailabilityPresets,\n        updateAvailabilityOverrides,\n\n        updateSchedulingLink,\n      }}\n    >\n      {props.children}\n    </SchedulingLinkContext.Provider>\n  );\n};\n\nexport default SchedulingLinkProvider;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/hooks/utils.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/const.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/AuthProvider.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/Login.tsx",["181","182"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/Register.tsx",["183","184"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/PasswordReset.tsx",["185","186"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/EmailVerification.tsx",["187"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/RequestPasswordReset.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/auth/PasswordResetRequested.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/Dashboard.tsx",["188"],"import React, {useEffect} from 'react';\nimport {Switch, Redirect, Route, RouteComponentProps} from 'react-router-dom';\nimport ScheduledEvents from './events/ScheduledEvents';\nimport SchedulingLink from './links/SchedulingLink';\nimport AppDataProvider from '../hooks/AppDataProvider';\nimport {SchedulingLinksBoard} from './links/SchedulingLinksBoard';\nimport {AppSettings} from './AppSettings';\nimport {Availability} from './availability/Availability';\nimport BookingPage from './booking/BookingPage';\n\nfunction Dashboard(props: RouteComponentProps) {\n  return (\n    <div\n      className=\"flex flex-col md:flex-row h-full w-screen\"\n      style={{\n        minHeight: '100vh',\n      }}\n    >\n      <div className=\"flex flex-row w-full\">\n        <Switch>\n          <Route exact path=\"/\" component={() => <Redirect to={'/links'} />} />\n          <Route exact path=\"/links\" component={SchedulingLinksBoard} />\n          <Route\n            path=\"/links/:id\"\n            component={() => (\n              <div className=\"w-full border-l border-gray-200 border-solid\">\n                <SchedulingLink />\n              </div>\n            )}\n          />\n          <Route path=\"/events\" component={ScheduledEvents} />\n          <Route path=\"/settings\" component={AppSettings} />\n          <Route path=\"/availabilities/:id/edit\" component={Availability} />\n          {/*<Route path=\"/apps\" component={() => <div>apps</div>} />*/}\n          <Route\n            path=\"/:userSlug/:schedulingLinkSlug\"\n            component={BookingPage}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nconst DashboardWrapper = (props: RouteComponentProps) => {\n  return (\n    <AppDataProvider>\n      <Dashboard {...props} />\n    </AppDataProvider>\n  );\n};\n\nexport default DashboardWrapper;\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/booking/BookingPage.tsx",["189","190","191","192","193","194","195"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/landing/LandingPage.tsx",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/data.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/AppSettings.tsx",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236"],"import React, {useEffect, useState} from 'react';\nimport {Switch, Route, Link, useLocation, Redirect} from 'react-router-dom';\nimport {useAppData} from '../hooks/AppDataProvider';\nimport {Button, Input, Spacer, Text} from '@geist-ui/react';\nimport {\n  convertMinToHrsMin,\n  convertMinToHrsMinString,\n  dayConvertToZh,\n} from '../utils';\nimport dayjs from 'dayjs';\nimport NavSidebar from './common/NavSidebar';\n\nfunction SettingSection(props: any) {\n  return (\n    <div className=\"border-primary border-b border-solid py-8\">\n      <div className=\"mx-auto w-128\">{props.children}</div>\n    </div>\n  );\n}\n\ninterface SectionTitleProps extends React.PropsWithChildren<any> {\n  title: string;\n}\n\nfunction SectionTitle(props: SectionTitleProps) {\n  return <div className=\"text-xl\">{props.title}</div>;\n}\n\nfunction AvailabilitySection() {\n  const {availabilityPresets, createSchedule} = useAppData();\n\n  const format = (minutes: number) => {\n    if (minutes) return convertMinToHrsMinString(minutes);\n  };\n\n  const add = () => {\n    createSchedule();\n  };\n\n  console.log('availabilityPresets', availabilityPresets);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'时间管理'} />\n      <div className=\"border-primary border-b border-solid py-2\">\n        {availabilityPresets &&\n          availabilityPresets.map((preset) => {\n            return (\n              <div\n                key={preset.id}\n                className=\"border-primary border-t border-solid  py-6 flex flex-row justify-between\"\n              >\n                <div className=\"flex flex-col\">\n                  <Text h3 className=\"font-medium\">\n                    <Link\n                      to={`/availabilities/${preset.id}/edit`}\n                      className={'hover:underline'}\n                    >\n                      {preset.name}\n                    </Link>\n                  </Text>\n                  <div className=\"pt-2\">\n                    {preset.rules.map((rule: any) => {\n                      return (\n                        <div key={rule.id} className=\"grid grid-cols-2\">\n                          <div className=\"flex flex-row\">\n                            {rule.byday.map((byday: string) => {\n                              return (\n                                <span\n                                  key={byday}\n                                  className=\"mr-1 text-sm text-gray-600\"\n                                >\n                                  {dayConvertToZh(byday)}\n                                </span>\n                              );\n                            })}\n                          </div>\n                          <div className=\"text-sm text-gray-600 pl-4\">\n                            <label className=\"mx-1\">\n                              {format(rule.startTime)}\n                            </label>\n                            -\n                            <label className=\"mx-1\">\n                              {format(rule.endTime)}\n                            </label>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                <div className=\"mt-2 flex flex-row\">\n                  <Link\n                    to={`/availabilities/${preset.id}/edit`}\n                    // className=\"btn-draft\"\n                  >\n                    <Button size={'mini'}>编辑</Button>\n                  </Link>\n                  <Button size={'mini'} className=\"ml-4\">\n                    删除\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n      <Spacer y={1.5} />\n      <Button size={'small'} onClick={add}>\n        新建\n      </Button>\n    </SettingSection>\n  );\n}\n\nfunction LinksSettingsSection() {\n  return (\n    <div className=\"flex flex-col\">\n      <AvailabilitySection />\n      <SettingSection>\n        <SectionTitle title={'Buffer'} />\n        <div></div>\n      </SettingSection>\n      <SettingSection>\n        <SectionTitle title={'提醒'} />\n        <div></div>\n      </SettingSection>\n      <SettingSection>\n        <SectionTitle title={'品牌'} />\n        <div></div>\n      </SettingSection>\n    </div>\n  );\n}\n\nconst URL = 'http://localhost:3000';\n\nfunction SlugSection() {\n  const {profile, updateSlug} = useAppData();\n  const [slug, setSlug] = useState<string>('');\n\n  const [editing, setEditing] = useState(false);\n  useEffect(() => {\n    if (profile) {\n      setSlug(profile.slug);\n    }\n  }, [profile]);\n\n  console.log('slug', profile);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'链接地址'} />\n      <div className=\"pt-4 flex flex-row justify-between\">\n        {editing ? (\n          <Input\n            label={URL + '/@'}\n            initialValue={slug}\n            autoFocus={true}\n            onChange={(e) => {\n              setSlug(e.target.value);\n            }}\n          />\n        ) : (\n          <div className=\"my-auto\">{URL + '/@' + slug} </div>\n        )}\n        {editing ? (\n          <div className=\"flex flex-row\">\n            <div className=\"ml-1\">\n              <Button\n                size={'small'}\n                type={'success'}\n                auto\n                onClick={() => {\n                  updateSlug(slug);\n                  setEditing(false);\n                }}\n              >\n                保存\n              </Button>\n            </div>\n            <div className=\"ml-1\">\n              <Button\n                size={'small'}\n                auto\n                onClick={() => {\n                  setSlug(profile.slug);\n                  setEditing(false);\n                }}\n              >\n                取消\n              </Button>\n            </div>\n          </div>\n        ) : (\n          // <div className=\"flex flex-row\">\n          //   <div\n          //     className=\"btn-draft\"\n          //     onClick={() => {\n          //       updateSlug(slug);\n          //       setEditing(false);\n          //     }}\n          //   >\n          //     保存\n          //   </div>\n          //   <div\n          //     className=\"btn-draft\"\n          //     onClick={() => {\n          //       setSlug(settings.slug);\n          //       setEditing(false);\n          //     }}\n          //   >\n          //     取消\n          //   </div>\n          // </div>\n          <Button size={'small'} onClick={() => setEditing(true)}>\n            编辑\n          </Button>\n        )}\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction LinkUrlSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  const [editing, setEditing] = useState<boolean>(false);\n}\n\nfunction EmailSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  const [editing, setEditing] = useState<boolean>(false);\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'邮件地址'} />\n      <div className=\"pt-4\">{profile?.email}</div>\n    </SettingSection>\n  );\n}\n\nfunction NameSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  return (\n    <SettingSection>\n      <SectionTitle title={'姓名'} />\n      <div className=\"pt-4\">\n        <Input\n          className=\"focus:outline-none\"\n          initialValue={profile?.display_name}\n          onChange={(e) => {\n            updateDisplayName(e.target.value);\n          }}\n        />\n      </div>\n    </SettingSection>\n  );\n}\n\nfunction ProfileSection() {\n  const {profile, settings, updateDisplayName, updateSlug} = useAppData();\n\n  return (\n    <div className={'flex flex-col'}>\n      <NameSection />\n      <SlugSection />\n      <EmailSection />\n      <SettingSection>\n        <SectionTitle title={'密码'} />\n        <div className=\"pt-4\">\n          <div className=\"btn-draft\">重设密码</div>\n        </div>\n      </SettingSection>\n    </div>\n  );\n}\n\nexport function AppSettings() {\n  const {pathname} = useLocation();\n\n  return (\n    <div className=\"w-full flex flex-row\">\n      <NavSidebar />\n      <div className=\"w-full\">\n        <div className=\"Header bg-gray-100\">\n          <div className=\"gentle-flex py-1 w-24\">\n            <div className=\"font-bold\">设置</div>\n          </div>\n        </div>\n        <div className=\"border-primary border-b border-solid\">\n          <div className=\"mx-auto w-128\">\n            <div className={'flex flex-row'}>\n              {[\n                {\n                  url: '/settings/profile',\n                  name: '账号',\n                },\n                {\n                  url: '/settings/links',\n                  name: '链接',\n                },\n                {\n                  url: '/settings/teams',\n                  name: '团队',\n                },\n              ].map(({url, name}) => {\n                return (\n                  <Link to={url} key={url}>\n                    <div\n                      className={`${\n                        pathname === url ||\n                        pathname.startsWith(url) ||\n                        (pathname === '/' && url === '/links')\n                          ? 'border-primary border-b-4 border-pink-400 text-black'\n                          : 'opacity-75'\n                      } px-4 py-2`}\n                    >\n                      {name}\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        <Switch>\n          <Route\n            exact\n            path=\"/settings\"\n            component={() => <Redirect to={'/settings/profile'} />}\n          />\n          <Route exact path=\"/settings/profile\" component={ProfileSection} />\n          <Route\n            exact\n            path=\"/settings/links\"\n            component={LinksSettingsSection}\n          />\n          <Route\n            exact\n            path=\"/settings/teams\"\n            component={() => <div>teams</div>}\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n","/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/event-utils.tsx",["237","238","239"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/booking/BookingProvider.tsx",["240","241","242","243","244"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/constants.ts",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common/EventLocationSelect.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/events/ScheduledEvent.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/events/ScheduledEvents.tsx",["245","246"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/links/SchedulingLinksBoard.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/links/SchedulingLink.tsx",["247","248","249","250","251"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/availability/Availability.tsx",["252","253","254","255","256"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common/NavSidebar.tsx",[],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/links/SchedulingLinkSettings.tsx",["257"],"/Users/guanghui/guanghui.io/dev/scheduling/app/assets/src/components/common/Calendar.tsx",["258","259","260","261","262","263"],{"ruleId":"264","severity":1,"message":"265","line":48,"column":1,"nodeType":"266","endLine":51,"endColumn":3},{"ruleId":"267","replacedBy":"268"},{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","severity":1,"message":"272","line":6,"column":9,"nodeType":"273","messageId":"274","endLine":6,"endColumn":15},{"ruleId":"271","severity":1,"message":"275","line":1169,"column":9,"nodeType":"273","messageId":"274","endLine":1169,"endColumn":12},{"ruleId":"271","severity":1,"message":"276","line":1,"column":28,"nodeType":"273","messageId":"274","endLine":1,"endColumn":37},{"ruleId":"271","severity":1,"message":"277","line":3,"column":8,"nodeType":"273","messageId":"274","endLine":3,"endColumn":14},{"ruleId":"271","severity":1,"message":"278","line":123,"column":9,"nodeType":"273","messageId":"274","endLine":123,"endColumn":28},{"ruleId":"271","severity":1,"message":"279","line":131,"column":9,"nodeType":"273","messageId":"274","endLine":131,"endColumn":32},{"ruleId":"271","severity":1,"message":"280","line":180,"column":9,"nodeType":"273","messageId":"274","endLine":180,"endColumn":23},{"ruleId":"271","severity":1,"message":"277","line":2,"column":8,"nodeType":"273","messageId":"274","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":81,"column":6,"nodeType":"283","endLine":81,"endColumn":22,"suggestions":"284"},{"ruleId":"271","severity":1,"message":"285","line":17,"column":20,"nodeType":"273","messageId":"274","endLine":17,"endColumn":31},{"ruleId":"271","severity":1,"message":"286","line":19,"column":10,"nodeType":"273","messageId":"274","endLine":19,"endColumn":17},{"ruleId":"271","severity":1,"message":"285","line":19,"column":20,"nodeType":"273","messageId":"274","endLine":19,"endColumn":31},{"ruleId":"271","severity":1,"message":"286","line":21,"column":10,"nodeType":"273","messageId":"274","endLine":21,"endColumn":17},{"ruleId":"271","severity":1,"message":"287","line":2,"column":30,"nodeType":"273","messageId":"274","endLine":2,"endColumn":34},{"ruleId":"271","severity":1,"message":"288","line":6,"column":9,"nodeType":"273","messageId":"274","endLine":6,"endColumn":13},{"ruleId":"271","severity":1,"message":"289","line":11,"column":10,"nodeType":"273","messageId":"274","endLine":11,"endColumn":20},{"ruleId":"271","severity":1,"message":"276","line":1,"column":16,"nodeType":"273","messageId":"274","endLine":1,"endColumn":25},{"ruleId":"271","severity":1,"message":"290","line":1,"column":36,"nodeType":"273","messageId":"274","endLine":1,"endColumn":45},{"ruleId":"271","severity":1,"message":"291","line":13,"column":24,"nodeType":"273","messageId":"274","endLine":13,"endColumn":28},{"ruleId":"271","severity":1,"message":"292","line":93,"column":5,"nodeType":"273","messageId":"274","endLine":93,"endColumn":9},{"ruleId":"271","severity":1,"message":"293","line":94,"column":5,"nodeType":"273","messageId":"274","endLine":94,"endColumn":17},{"ruleId":"271","severity":1,"message":"294","line":97,"column":5,"nodeType":"273","messageId":"274","endLine":97,"endColumn":17},{"ruleId":"271","severity":1,"message":"295","line":99,"column":5,"nodeType":"273","messageId":"274","endLine":99,"endColumn":15},{"ruleId":"271","severity":1,"message":"296","line":293,"column":9,"nodeType":"273","messageId":"274","endLine":293,"endColumn":20},{"ruleId":"271","severity":1,"message":"276","line":1,"column":16,"nodeType":"273","messageId":"274","endLine":1,"endColumn":25},{"ruleId":"271","severity":1,"message":"297","line":1,"column":27,"nodeType":"273","messageId":"274","endLine":1,"endColumn":35},{"ruleId":"271","severity":1,"message":"298","line":3,"column":3,"nodeType":"273","messageId":"274","endLine":3,"endColumn":14},{"ruleId":"271","severity":1,"message":"299","line":4,"column":3,"nodeType":"273","messageId":"274","endLine":4,"endColumn":9},{"ruleId":"271","severity":1,"message":"300","line":5,"column":3,"nodeType":"273","messageId":"274","endLine":5,"endColumn":11},{"ruleId":"271","severity":1,"message":"301","line":6,"column":3,"nodeType":"273","messageId":"274","endLine":6,"endColumn":8},{"ruleId":"271","severity":1,"message":"302","line":8,"column":3,"nodeType":"273","messageId":"274","endLine":8,"endColumn":22},{"ruleId":"303","severity":1,"message":"304","line":16,"column":11,"nodeType":"305","endLine":16,"endColumn":94},{"ruleId":"303","severity":1,"message":"304","line":32,"column":13,"nodeType":"305","endLine":32,"endColumn":68},{"ruleId":"303","severity":1,"message":"304","line":33,"column":13,"nodeType":"305","endLine":33,"endColumn":68},{"ruleId":"303","severity":1,"message":"304","line":34,"column":13,"nodeType":"305","endLine":34,"endColumn":68},{"ruleId":"303","severity":1,"message":"304","line":35,"column":13,"nodeType":"305","endLine":35,"endColumn":68},{"ruleId":"303","severity":1,"message":"304","line":36,"column":13,"nodeType":"305","endLine":36,"endColumn":68},{"ruleId":"303","severity":1,"message":"304","line":256,"column":17,"nodeType":"305","endLine":256,"endColumn":76},{"ruleId":"303","severity":1,"message":"304","line":298,"column":17,"nodeType":"305","endLine":298,"endColumn":76},{"ruleId":"303","severity":1,"message":"304","line":339,"column":17,"nodeType":"305","endLine":339,"endColumn":76},{"ruleId":"303","severity":1,"message":"304","line":407,"column":11,"nodeType":"305","endLine":407,"endColumn":113},{"ruleId":"303","severity":1,"message":"304","line":434,"column":13,"nodeType":"305","endLine":434,"endColumn":42},{"ruleId":"303","severity":1,"message":"304","line":446,"column":13,"nodeType":"305","endLine":446,"endColumn":47},{"ruleId":"303","severity":1,"message":"304","line":458,"column":13,"nodeType":"305","endLine":458,"endColumn":47},{"ruleId":"303","severity":1,"message":"304","line":472,"column":13,"nodeType":"305","endLine":472,"endColumn":47},{"ruleId":"271","severity":1,"message":"306","line":6,"column":3,"nodeType":"273","messageId":"274","endLine":6,"endColumn":21},{"ruleId":"271","severity":1,"message":"307","line":10,"column":8,"nodeType":"273","messageId":"274","endLine":10,"endColumn":13},{"ruleId":"271","severity":1,"message":"308","line":224,"column":10,"nodeType":"273","messageId":"274","endLine":224,"endColumn":24},{"ruleId":"271","severity":1,"message":"309","line":225,"column":10,"nodeType":"273","messageId":"274","endLine":225,"endColumn":17},{"ruleId":"271","severity":1,"message":"310","line":225,"column":19,"nodeType":"273","messageId":"274","endLine":225,"endColumn":27},{"ruleId":"271","severity":1,"message":"311","line":225,"column":29,"nodeType":"273","messageId":"274","endLine":225,"endColumn":46},{"ruleId":"271","severity":1,"message":"312","line":225,"column":48,"nodeType":"273","messageId":"274","endLine":225,"endColumn":58},{"ruleId":"271","severity":1,"message":"313","line":227,"column":10,"nodeType":"273","messageId":"274","endLine":227,"endColumn":17},{"ruleId":"271","severity":1,"message":"314","line":227,"column":19,"nodeType":"273","messageId":"274","endLine":227,"endColumn":29},{"ruleId":"271","severity":1,"message":"310","line":231,"column":19,"nodeType":"273","messageId":"274","endLine":231,"endColumn":27},{"ruleId":"271","severity":1,"message":"311","line":231,"column":29,"nodeType":"273","messageId":"274","endLine":231,"endColumn":46},{"ruleId":"271","severity":1,"message":"312","line":231,"column":48,"nodeType":"273","messageId":"274","endLine":231,"endColumn":58},{"ruleId":"271","severity":1,"message":"313","line":233,"column":10,"nodeType":"273","messageId":"274","endLine":233,"endColumn":17},{"ruleId":"271","severity":1,"message":"314","line":233,"column":19,"nodeType":"273","messageId":"274","endLine":233,"endColumn":29},{"ruleId":"271","severity":1,"message":"310","line":244,"column":19,"nodeType":"273","messageId":"274","endLine":244,"endColumn":27},{"ruleId":"271","severity":1,"message":"312","line":244,"column":48,"nodeType":"273","messageId":"274","endLine":244,"endColumn":58},{"ruleId":"271","severity":1,"message":"309","line":263,"column":10,"nodeType":"273","messageId":"274","endLine":263,"endColumn":17},{"ruleId":"271","severity":1,"message":"310","line":263,"column":19,"nodeType":"273","messageId":"274","endLine":263,"endColumn":27},{"ruleId":"271","severity":1,"message":"311","line":263,"column":29,"nodeType":"273","messageId":"274","endLine":263,"endColumn":46},{"ruleId":"271","severity":1,"message":"312","line":263,"column":48,"nodeType":"273","messageId":"274","endLine":263,"endColumn":58},{"ruleId":"271","severity":1,"message":"315","line":5,"column":5,"nodeType":"273","messageId":"274","endLine":5,"endColumn":13},{"ruleId":"316","severity":1,"message":"317","line":10,"column":25,"nodeType":"318","messageId":"319","endLine":10,"endColumn":26},{"ruleId":"316","severity":1,"message":"317","line":11,"column":23,"nodeType":"318","messageId":"319","endLine":11,"endColumn":24},{"ruleId":"271","severity":1,"message":"320","line":2,"column":9,"nodeType":"273","messageId":"274","endLine":2,"endColumn":16},{"ruleId":"271","severity":1,"message":"321","line":4,"column":3,"nodeType":"273","messageId":"274","endLine":4,"endColumn":15},{"ruleId":"271","severity":1,"message":"322","line":5,"column":3,"nodeType":"273","messageId":"274","endLine":5,"endColumn":10},{"ruleId":"271","severity":1,"message":"323","line":10,"column":9,"nodeType":"273","messageId":"274","endLine":10,"endColumn":26},{"ruleId":"271","severity":1,"message":"324","line":11,"column":16,"nodeType":"273","messageId":"274","endLine":11,"endColumn":21},{"ruleId":"271","severity":1,"message":"276","line":1,"column":16,"nodeType":"273","messageId":"274","endLine":1,"endColumn":25},{"ruleId":"271","severity":1,"message":"297","line":1,"column":27,"nodeType":"273","messageId":"274","endLine":1,"endColumn":35},{"ruleId":"271","severity":1,"message":"325","line":18,"column":11,"nodeType":"273","messageId":"274","endLine":18,"endColumn":20},{"ruleId":"271","severity":1,"message":"326","line":20,"column":3,"nodeType":"273","messageId":"274","endLine":20,"endColumn":11},{"ruleId":"271","severity":1,"message":"327","line":213,"column":5,"nodeType":"273","messageId":"274","endLine":213,"endColumn":14},{"ruleId":"328","severity":1,"message":"329","line":275,"column":37,"nodeType":"330","messageId":"331","endLine":275,"endColumn":39},{"ruleId":"271","severity":1,"message":"332","line":424,"column":10,"nodeType":"273","messageId":"274","endLine":424,"endColumn":25},{"ruleId":"271","severity":1,"message":"333","line":16,"column":17,"nodeType":"273","messageId":"274","endLine":16,"endColumn":25},{"ruleId":"271","severity":1,"message":"334","line":16,"column":27,"nodeType":"273","messageId":"274","endLine":16,"endColumn":32},{"ruleId":"271","severity":1,"message":"335","line":26,"column":7,"nodeType":"273","messageId":"274","endLine":26,"endColumn":18},{"ruleId":"336","severity":1,"message":"337","line":140,"column":44,"nodeType":"330","messageId":"338","endLine":146,"endColumn":8},{"ruleId":"339","severity":1,"message":"340","line":181,"column":57,"nodeType":"318","messageId":"341","endLine":181,"endColumn":59},{"ruleId":"271","severity":1,"message":"342","line":26,"column":10,"nodeType":"273","messageId":"274","endLine":26,"endColumn":32},{"ruleId":"271","severity":1,"message":"343","line":182,"column":9,"nodeType":"273","messageId":"274","endLine":182,"endColumn":29},{"ruleId":"271","severity":1,"message":"344","line":216,"column":9,"nodeType":"273","messageId":"274","endLine":216,"endColumn":14},{"ruleId":"271","severity":1,"message":"296","line":217,"column":9,"nodeType":"273","messageId":"274","endLine":217,"endColumn":20},{"ruleId":"271","severity":1,"message":"345","line":239,"column":9,"nodeType":"273","messageId":"274","endLine":239,"endColumn":25},{"ruleId":"271","severity":1,"message":"346","line":245,"column":9,"nodeType":"273","messageId":"274","endLine":245,"endColumn":21},{"ruleId":"336","severity":1,"message":"337","line":314,"column":44,"nodeType":"330","messageId":"338","endLine":320,"endColumn":8},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["347"],"no-negated-in-lhs",["348"],"@typescript-eslint/no-unused-vars","'nanoid' is defined but never used.","Identifier","unusedVar","'url' is assigned a value but never used.","'useEffect' is defined but never used.","'useSWR' is defined but never used.","'_updateUserSettings' is assigned a value but never used.","'_revalidateUserSettings' is assigned a value but never used.","'removeSchedule' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAvailabilityPresetsById'. Either include it or remove the dependency array.","ArrayExpression",["349"],"'setRedirect' is assigned a value but never used.","'loading' is assigned a value but never used.","'Link' is defined but never used.","'auth' is assigned a value but never used.","'isVerified' is assigned a value but never used.","'RefObject' is defined but never used.","'Text' is defined but never used.","'user' is assigned a value but never used.","'timeSelected' is assigned a value but never used.","'setEventTime' is assigned a value but never used.","'setEventId' is assigned a value but never used.","'calendarApi' is assigned a value but never used.","'useState' is defined but never used.","'useLocation' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'Route' is defined but never used.","'RouteComponentProps' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'convertMinToHrsMin' is defined but never used.","'dayjs' is defined but never used.","'LinkUrlSection' is defined but never used.","'profile' is assigned a value but never used.","'settings' is assigned a value but never used.","'updateDisplayName' is assigned a value but never used.","'updateSlug' is assigned a value but never used.","'editing' is assigned a value but never used.","'setEditing' is assigned a value but never used.","'todayStr' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'useAuth' is defined but never used.","'useIntervals' is defined but never used.","'useLink' is defined but never used.","'useSchedulingLink' is defined but never used.","'Dayjs' is defined but never used.","'LinkPlain' is defined but never used.","'Textarea' is defined but never used.","'organizer' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CalendarSection' is defined but never used.","'Checkbox' is defined but never used.","'Input' is defined but never used.","'sliceOfTime' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'date', 'date'.","unsafeRefs","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","'CalendarBindingSection' is defined but never used.","'handleWeekendsToggle' is assigned a value but never used.","'title' is assigned a value but never used.","'handleEventClick' is assigned a value but never used.","'handleEvents' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"350","fix":"351"},"Update the dependencies array to be: [settings, link, getAvailabilityPresetsById]",{"range":"352","text":"353"},[2610,2626],"[settings, link, getAvailabilityPresetsById]"]